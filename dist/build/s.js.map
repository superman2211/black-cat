{
  "version": 3,
  "sources": ["../../src/utils/math.ts", "../../src/utils/browser.ts", "../../src/utils/pattern.ts", "../../src/utils/image.ts", "../../src/resources/images.ts", "../../src/resources/sound/background.ts", "../../src/resources/sound/zzfx.js", "../../src/resources/sound/audio.ts", "../../src/utils/geom.ts", "../../src/utils/time.ts", "../../src/engine/animation.ts", "../../src/engine/effect.ts", "../../src/engine/entity.ts", "../../src/engine/stage.ts", "../../src/engine/unit.ts", "../../src/resources/font.ts", "../../src/engine/sprite.ts", "../../src/engine/joystick.ts", "../../src/engine/game.ts", "../../src/engine/gamepad.ts", "../../src/game/mob.ts", "../../src/engine/waves.ts", "../../src/game/hero.ts", "../../src/engine/graphics.ts", "../../src/engine/input.ts", "../../src/resources/loader.ts", "../../src/game/bar.ts", "../../src/game/start.ts", "../../src/game/game.ts", "../../src/engine/item.ts", "../../src/resources/sound/control.ts", "../../src/index.ts"],
  "sourcesContent": ["const math = Math;\n\nexport const mathFloor = math.floor;\nexport const mathCeil = math.ceil;\nexport const mathRound = math.round;\nexport const mathMin = math.min;\nexport const mathMax = math.max;\nexport const mathHypot = math.hypot;\nexport const mathAbs = math.abs;\nexport const mathRandom = math.random;\nexport const mathAtan2 = math.atan2;\nexport const mathCos = math.cos;\nexport const mathSin = math.sin;\nexport const mathPI = math.PI;\nexport const mathPI2 = mathPI * 2;\nexport const numberMax = Number.MAX_VALUE;\n\nexport const limit = (min: number, max: number, value: number) => mathMin(max, mathMax(min, value));\nexport const lerp = (min: number, max: number, value: number) => min + value * (max - min);\nexport const randomRange = (min: number, max: number): number => lerp(min, max, mathRandom());\nexport const chance = (chance: number): boolean => mathRandom() < chance;\n\nexport function randomSelect<T>(values: T[]): T {\n    return values[mathRound(randomRange(0, values.length - 1))];\n}\n\nexport function randomChancesSelect<T>(values: T[], chances: Array<number>): T {\n    const total = chances.reduce((p, c) => p + c, 0);\n\n    const chance = mathRandom() * total;\n    \n    let c = 0;\n\n    for(let i = 0; i < values.length; i++) {\n        c += chances[i];\n        if (chance < c) {\n            return values[i];\n        }\n    }\n\n    return values[0];\n}", "import { mathRound } from \"./math\";\n\nexport const domDocument = document;\nexport const hasTouch = 'ontouchstart' in window;\nexport const dpr = devicePixelRatio;\n\nconst canvasName = 'canvas';\n\nexport const getContext = (canvas: HTMLCanvasElement) => canvas.getContext('2d')!;\nexport const createCanvas = () => domDocument.createElement(canvasName);\nexport const createContext = () => getContext(createCanvas());\nexport const getCanvas = (context: CanvasRenderingContext2D) => context.canvas;\nexport const getWidth = (context: CanvasRenderingContext2D) => getCanvas(context).width;\nexport const getHeight = (context: CanvasRenderingContext2D) => getCanvas(context).height;\nexport const setWidth = (context: CanvasRenderingContext2D, width: number) => getCanvas(context).width = width;\nexport const setHeight = (context: CanvasRenderingContext2D, height: number) => getCanvas(context).height = height;\nexport const resetTransform = (context: CanvasRenderingContext2D) => context.resetTransform();\nexport const drawImage = (context: CanvasRenderingContext2D, image: HTMLCanvasElement, x: number, y: number) => context.drawImage(image, mathRound(x), mathRound(y));\nexport const clear = (context: CanvasRenderingContext2D) => { resetTransform(context); context.clearRect(0, 0, getWidth(context), getHeight(context)); }\n\nexport const now = () => performance.now();\n\nexport const cloneObject = (source: any): any => JSON.parse(JSON.stringify(source));\n\nexport async function timeout(time: number) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, time);\n    })\n}\n", "export const formatColor = (c: number): string => {\n    const a = c >> 24 & 0xff;\n    const r = c >> 16 & 0xff;\n    const g = c >> 8 & 0xff;\n    const b = c & 0xff;\n\n    return `rgba(${r}, ${g}, ${b}, ${a / 0xff})`;\n}\n\nexport const createGradient = (\n    context: CanvasRenderingContext2D,\n    x0: number, y0: number, x1: number, y1: number,\n    startColor: number, endColor: number\n) => {\n    const gradient = context.createLinearGradient(x0, y0, x1, y1);\n    gradient.addColorStop(0, formatColor(startColor));\n    gradient.addColorStop(1, formatColor(endColor));\n    return gradient;\n}", "import { images } from \"../resources/images\";\nimport { createCanvas, drawImage, getContext } from \"./browser\";\nimport { mathCeil, mathRandom, randomChancesSelect } from \"./math\";\nimport { createGradient } from \"./pattern\";\n\nexport const generateRandomTileImage = (width: number, height: number, ids: Array<number>, chances: Array<number>): HTMLCanvasElement => {\n    const canvas = createCanvas();\n    const context = getContext(canvas);\n\n    let image = images[ids[0]];\n\n    canvas.width = width;\n    canvas.height = height;\n\n    const sx = mathCeil(width / image.width);\n    const sy = mathCeil(height / image.height);\n\n    for (let x = 0; x < sx; x++) {\n        for (let y = 0; y < sy; y++) {\n            image = images[randomChancesSelect(ids, chances)];\n            context.drawImage(image, x * image.width, y * image.height);\n        }\n    }\n\n    return canvas;\n}\n\nexport const generateTileImage = (width: number, height: number, imageId: number): HTMLCanvasElement => {\n    const canvas = createCanvas();\n    const context = getContext(canvas);\n\n    canvas.width = width;\n    canvas.height = height;\n\n    const image = images[imageId];\n\n    const sx = mathCeil(width / image.width);\n    const sy = mathCeil(height / image.height);\n\n    for (let x = 0; x < sx; x++) {\n        for (let y = 0; y < sy; y++) {\n            context.drawImage(image, x * image.width, y * image.height);\n        }\n    }\n\n    return canvas;\n}\n\nexport const drawCommands = (commands: Array<number>, context: CanvasRenderingContext2D) => {\n    for (let i = 0; i < commands.length; i += 3) {\n        const id = commands[i];\n        const x = commands[i + 1];\n        const y = commands[i + 2];\n        const image = images[id];\n        drawImage(context, image, x, y);\n    }\n}\n\nexport const drawGradientV = (context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, startColor: number, endColor: number) => {\n    context.fillStyle = createGradient(context, x, y, x, y + height, startColor, endColor);\n    context.fillRect(x, y, width, height);\n}\n\nexport const drawGradientH = (context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, startColor: number, endColor: number) => {\n    context.fillStyle = createGradient(context, x, y, x + width, y, startColor, endColor);\n    context.fillRect(x, y, width, height);\n}\n\nexport const filterImage = (canvas: HTMLCanvasElement, filter: (color: Uint8ClampedArray) => void) => {\n    const context = getContext(canvas);\n    const width = canvas.width;\n    const height = canvas.height;\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = imageData.data;\n\n    let i = 0;\n\n    while (i < pixels.length) {\n        const pixel = pixels.slice(i, i + 4);\n\n        filter(pixel);\n\n        pixels.set(pixel, i);\n\n        i += 4;\n    }\n\n    context.putImageData(imageData, 0, 0);\n}\n\nexport const cloneCanvas = (source: HTMLCanvasElement): HTMLCanvasElement => {\n    var target = createCanvas();\n    var context = getContext(target);\n    target.width = source.width;\n    target.height = source.height;\n    context.drawImage(source, 0, 0);\n    return target;\n}\n\nexport const getPallette = (canvas: HTMLCanvasElement): Array<number> => {\n    const pallette: Array<number> = [];\n\n    filterImage(canvas, (pixel) => {\n        const color = pixelToColor(pixel);\n        if (pallette.indexOf(color) == -1) {\n            pallette.push(color);\n        }\n    });\n\n    return pallette;\n}\n\nexport const applyPallette = (canvas: HTMLCanvasElement, sourcePallette: Array<number>, targetPallette: Array<number>) => {\n    filterImage(canvas, (pixel) => {\n        const sourceColor = pixelToColor(pixel);\n\n        const index = sourcePallette.indexOf(sourceColor);\n\n        if (index != -1) {\n            const targetColor = targetPallette[index];\n\n            colorToPixel(targetColor, pixel);\n        }\n    });\n}\n\nexport const applyShadow = (canvas: HTMLCanvasElement) => {\n    const context = getContext(canvas);\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n\n    for (let x = 1; x < canvas.width - 1; x++) {\n        for (let y = 1; y < canvas.height - 1; y++) {\n            const i = (y * canvas.width + x) * 4;\n            const pixel = data.slice(i, i + 4);\n\n            const l = (y * canvas.width + x - 1) * 4;\n            const left = data.slice(l, l + 4);\n\n            const r = (y * canvas.width + x + 1) * 4;\n            const right = data.slice(r, r + 4);\n\n            if (pixel[3] != 0 && left[3] == 0) {\n                pixel[0] *= 0.5;\n                pixel[1] *= 0.5;\n                pixel[2] *= 0.5;\n                data.set(pixel, i);\n            } else if (pixel[3] != 0 && right[3] == 0) {\n                pixel[0] *= 0.9;\n                pixel[1] *= 0.9;\n                pixel[2] *= 0.9;\n                data.set(pixel, i);\n            }\n        }\n    }\n\n    context.putImageData(imageData, 0, 0);\n}\n\nconst u32 = new Uint32Array(1);\n\nexport const pixelToColor = (pixel: Uint8ClampedArray): number => {\n    const r = pixel[0];\n    const g = pixel[1];\n    const b = pixel[2];\n    const a = pixel[3];\n\n    u32[0] = (a << 24) | (r << 16) | (g << 8) | b;\n\n    return u32[0];\n}\n\nexport const colorToPixel = (color: number, pixel: Uint8ClampedArray) => {\n    const a = (color >> 24) & 0xff;\n    const r = (color >> 16) & 0xff;\n    const g = (color >> 8) & 0xff;\n    const b = color & 0xff;\n\n    pixel[0] = r;\n    pixel[1] = g;\n    pixel[2] = b;\n    pixel[3] = a;\n}\n\nexport const noise = (offset: number, canvas: HTMLCanvasElement) => {\n    const context = getContext(canvas);\n    const offset2 = offset / 2;\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    let i = 0;\n    while (i < data.length) {\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        data[i] = r - offset2 + offset * mathRandom();\n        data[i + 1] = g - offset2 + offset * mathRandom();\n        data[i + 2] = b - offset2 + offset * mathRandom();\n        i += 4;\n    }\n    context.putImageData(imageData, 0, 0);\n}", "import { cloneCanvas, filterImage, noise } from \"../utils/image\";\n\nexport const images: HTMLCanvasElement[] = [];\n\nconst coloredImages: { [key: string]: number } = {};\nconst noisedImages: { [key: number]: boolean } = {};\n\nexport const addImage = (image: HTMLCanvasElement): number => {\n    const id = images.length;\n    images.push(image);\n    return id;\n}\n\nexport const getColoredImage = (id: number, color: number): number => {\n    if (id == -1) return -1;\n\n    const key = `${id}_${color}`;\n    if (!coloredImages[key]) {\n        const a = (color >> 24) & 0xff;\n        const r = (color >> 16) & 0xff;\n        const g = (color >> 8) & 0xff;\n        const b = color & 0xff;\n\n        const coloredImage = cloneCanvas(images[id]);\n\n        filterImage(coloredImage, (color) => {\n            color[0] = r;\n            color[1] = g;\n            color[2] = b;\n            if (color[3]) {\n                color[3] = a;\n            }\n        });\n\n        coloredImages[key] = addImage(coloredImage);\n    }\n\n    return coloredImages[key];\n}\n\nexport const addNoiseToImage = (image: number, value: number = 10) => {\n    if (!noisedImages[image]) {\n        const source = images[image];\n        noise(value, source);\n    }\n}", "export default [[[.6, 0, 100, , , .2, 1, .5, , -10, , , , 3, , , , 10], [.7, 0, 110, , , .2, 2, .1, , , , , , , , , , , .1, .4], [1.3, 0, 300, , , 0, 4, 3, , , 300, , , 1, , , , .3, .2], [, 0, 110, , .13, .7, 3, .2, , , , , .04, .3, , .02, 1, , .3, .1], [1.5, 0, 110, , .03, .06, , 8, , , , , .02, .4, -.1, , .15, 2]], [[[, -.1, 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , ,], [2, .1, , , , , 1, , , , , , , , 1, , , , , , , , 1, , , , , , , , 1, , , 1, , , , , 1, , , , , , , , 1, , , , , , , , 1, , , , , , , , 1, , 1, 1], [1, .1, 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 4, , 16, , 4, , 16, , 4, , 16, , 4, , 16, , 4, , 16, , 4, , 16, , 3, , 15, , 3, , 15, ,], [3, .3, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,]], [[, , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , ,], [2, .1, 1, , , , 1, , , , , , , , 1, , , , , , , , 1, , , , , , , , 1, , , 1, , , , , 1, , , , , , , , 1, , , , , , , , 1, , , , , , , , 1, , 1, 1], [1, .1, 1, , 13, 13, 1, , 13, 13, 1, , 13, , 1, , 13, 13, 1, , 13, 13, 1, , 13, , 1, , 13, 13, 1, , 13, 13, 4, , 16, 16, 4, , 16, 16, 4, , 16, , 4, , 16, 16, 4, , 16, 16, 4, , 16, 16, 3, , 15, 15, 3, , 15, 15], [3, .4, , , , , 20, , , , , , 23, , , , , , 25, , , , , , 27, , , , , , 25, , , , 27, , , , , , , , , , , , , , , , 28, , 27, , , , 25, , , , 27, , , , 25, ,]], [[, -.1, 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , ,], [2, , , , , , 1, , , , , , , , 1, , , , , , , , 1, , , , , , , , 1, , , 1, , , , , 1, , , , , , , , 1, , , , , , , , 1, , , , , , , , 1, , 1, 1], [1, .1, 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 1, , 13, , 4, , 16, , 4, , 16, , 4, , 16, , 4, , 16, , 4, , 16, , 4, , 16, , 3, , 15, , 3, , 15, ,], [4, .1, 32, , 32, 32, 32, 32, , , 30, 30, , 32, 32, 32, , 32, 32, , 30, 30, 32, 32, 32, , 32, 32, 32, 32, , 32, 30, 30, 32, , 32, 32, 32, , 30, , 32, 32, 32, , 32, , 30, , 32, 32, 32, 32, 32, , , 32, 32, 32, , 30, 30, 30, 30, 30]], [[, -.1, 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , , 1, , , ,], [2, .1, 1, , , , 1, , , , , , , , 1, , , , , , , , 1, , , , , , , , 1, , , 1, , , , , 1, , , , , , , , 1, , , , , , , , 1, , 1, , , 1, 1, , 1, 1, 1, 1], [1, .1, 1, , 13, 13, 1, , 13, 13, 1, , 13, , 1, , 13, 13, 1, , 13, 13, 1, , 13, , 1, , 13, 13, 1, , 13, 13, 4, , 16, 16, 4, , 16, 16, 4, , 16, , 4, , 16, 16, 4, , 16, 16, 4, , 16, 16, 3, , , , , , , ,], [3, .4, , , , , 25, , , -1, , , 23, , , , , , 25, , , , , , 27, , , , , -1, 25, , , , 20, , , , , , , , , , , , , , , , 20, 23, 27, , , -1, 25, , , , 27, , , , 25, ,]]], [0, 0, 1, 1, 2, 2, 3], ,]", "// zzfx() - the universal entry point -- returns a AudioBufferSourceNode\nconst zzfx = (...t) => zzfxP(zzfxG(...t))\n\n// zzfxP() - the sound player -- returns a AudioBufferSourceNode\nconst zzfxP = (...t) => { let e = zzfxX.createBufferSource(), f = zzfxX.createBuffer(t.length, t[0].length, zzfxR); t.map((d, i) => f.getChannelData(i).set(d)), e.buffer = f/*, e.connect(zzfxX.destination), e.start()*/; return e }\n\n// zzfxG() - the sound generator -- returns an array of sample data\nconst zzfxG = (q = 1, k = .05, c = 220, e = 0, t = 0, u = .1, r = 0, F = 1, v = 0, z = 0, w = 0, A = 0, l = 0, B = 0, x = 0, G = 0, d = 0, y = 1, m = 0, C = 0) => { let b = 2 * Math.PI, H = v *= 500 * b / zzfxR ** 2, I = (0 < x ? 1 : -1) * b / 4, D = c *= (1 + 2 * k * Math.random() - k) * b / zzfxR, Z = [], g = 0, E = 0, a = 0, n = 1, J = 0, K = 0, f = 0, p, h; e = 99 + zzfxR * e; m *= zzfxR; t *= zzfxR; u *= zzfxR; d *= zzfxR; z *= 500 * b / zzfxR ** 3; x *= b / zzfxR; w *= b / zzfxR; A *= zzfxR; l = zzfxR * l | 0; for (h = e + m + t + u + d | 0; a < h; Z[a++] = f)++K % (100 * G | 0) || (f = r ? 1 < r ? 2 < r ? 3 < r ? Math.sin((g % b) ** 3) : Math.max(Math.min(Math.tan(g), 1), -1) : 1 - (2 * g / b % 2 + 2) % 2 : 1 - 4 * Math.abs(Math.round(g / b) - g / b) : Math.sin(g), f = (l ? 1 - C + C * Math.sin(2 * Math.PI * a / l) : 1) * (0 < f ? 1 : -1) * Math.abs(f) ** F * q * zzfxV * (a < e ? a / e : a < e + m ? 1 - (a - e) / m * (1 - y) : a < e + m + t ? y : a < h - d ? (h - a - d) / u * y : 0), f = d ? f / 2 + (d > a ? 0 : (a < h - d ? 1 : (h - a) / d) * Z[a - d | 0] / 2) : f), p = (c += v += z) * Math.sin(E * x - I), g += p - p * B * (1 - 1E9 * (Math.sin(a) + 1) % 2), E += p - p * B * (1 - 1E9 * (Math.sin(a) ** 2 + 1) % 2), n && ++n > A && (c += w, D += w, n = 0), !l || ++J % l || (c = D, v = H, n = n || 1); return Z }\n\n// zzfxV - global volume\nconst zzfxV = .3\n\n// zzfxR - global sample rate\nconst zzfxR = 44100\n\n// zzfxX - the common audio context\nconst zzfxX = new (window.AudioContext || webkitAudioContext);\n\n/**\n * ZzFX Music Renderer v2.0.3 by Keith Clark and Frank Force\n */\nconst zzfxM = (instruments, patterns, sequence, BPM = 125) => {\n    let instrumentParameters;\n    let i;\n    let j;\n    let k;\n    let note;\n    let sample;\n    let patternChannel;\n    let notFirstBeat;\n    let stop;\n    let instrument;\n    let pitch;\n    let attenuation;\n    let outSampleOffset;\n    let isSequenceEnd;\n    let sampleOffset = 0;\n    let nextSampleOffset;\n    let sampleBuffer = [];\n    let leftChannelBuffer = [];\n    let rightChannelBuffer = [];\n    let channelIndex = 0;\n    let panning = 0;\n    let hasMore = 1;\n    let sampleCache = {};\n    let beatLength = zzfxR / BPM * 60 >> 2;\n\n    // for each channel in order until there are no more\n    for (; hasMore; channelIndex++) {\n\n        // reset current values\n        sampleBuffer = [hasMore = notFirstBeat = pitch = outSampleOffset = 0];\n\n        // for each pattern in sequence\n        sequence.map((patternIndex, sequenceIndex) => {\n            // get pattern for current channel, use empty 1 note pattern if none found\n            patternChannel = patterns[patternIndex][channelIndex] || [0, 0, 0];\n\n            // check if there are more channels\n            hasMore |= !!patterns[patternIndex][channelIndex];\n\n            // get next offset, use the length of first channel\n            nextSampleOffset = outSampleOffset + (patterns[patternIndex][0].length - 2 - !notFirstBeat) * beatLength;\n            // for each beat in pattern, plus one extra if end of sequence\n            isSequenceEnd = sequenceIndex == sequence.length - 1;\n            for (i = 2, k = outSampleOffset; i < patternChannel.length + isSequenceEnd; notFirstBeat = ++i) {\n\n                // <channel-note>\n                note = patternChannel[i];\n\n                // stop if end, different instrument or new note\n                stop = i == patternChannel.length + isSequenceEnd - 1 && isSequenceEnd ||\n                    instrument != (patternChannel[0] || 0) | note | 0;\n\n                // fill buffer with samples for previous beat, most cpu intensive part\n                for (j = 0; j < beatLength && notFirstBeat;\n\n                    // fade off attenuation at end of beat if stopping note, prevents clicking\n                    j++ > beatLength - 99 && stop ? attenuation += (attenuation < 1) / 99 : 0\n                ) {\n                    // copy sample to stereo buffers with panning\n                    sample = (1 - attenuation) * sampleBuffer[sampleOffset++] / 2 || 0;\n                    leftChannelBuffer[k] = (leftChannelBuffer[k] || 0) - sample * panning + sample;\n                    rightChannelBuffer[k] = (rightChannelBuffer[k++] || 0) + sample * panning + sample;\n                }\n\n                // set up for next note\n                if (note) {\n                    // set attenuation\n                    attenuation = note % 1;\n                    panning = patternChannel[1] || 0;\n                    if (note |= 0) {\n                        // get cached sample\n                        sampleBuffer = sampleCache[\n                            [\n                                instrument = patternChannel[sampleOffset = 0] || 0,\n                                note\n                            ]\n                        ] = sampleCache[[instrument, note]] || (\n                            // add sample to cache\n                            instrumentParameters = [...instruments[instrument]],\n                            // instrumentParameters[2] *= 2 ** ((note - 12) / 12),\n                            instrumentParameters[2] = (instrumentParameters[2] || 220) * (2 ** ((note - 12) / 12)),\n\n                            // allow negative values to stop notes\n                            note > 0 ? zzfxG(...instrumentParameters) : []\n                        );\n                    }\n                }\n            }\n\n            // update the sample offset\n            outSampleOffset = nextSampleOffset;\n        });\n    }\n\n    return [leftChannelBuffer, rightChannelBuffer];\n}\n\nexport { zzfx, zzfxG, zzfxP, zzfxR, zzfxV, zzfxX, zzfxM }", "import { timeout } from \"../../utils/browser\";\nimport background from \"./background\";\nimport { zzfxX as audioContext, zzfx, zzfxM, zzfxP, zzfxX } from \"./zzfx\";\n\nexport const musicGainNode = audioContext.createGain();\nmusicGainNode.gain.value = 0.3;\n\nexport const effectsGain = { value: 0.6 };\n\nconst effectHit = [, , 418, .01, .01, .03, 4, 2.1, -1, , , , , .2, , .2, , .67, .03, , 107];\nconst effectKick = [, 1, 48, , .04, .01, 4, 1.6, 1, -26, 300, , , 1.3, , .1, , .9, .03];\nconst effectWhoosh = [.5, .4, 500, .1, .01, , , 1.8, -0.5, -20, 100, .5, , 2.5, , , , .1, .1, , 400];\nconst effectLoose = [2.1, 0, 65.40639, .03, .6, .16, 2, 3.7, , -0.5, , , , .2, , .1, .01, .33, .08];\nconst effectWin = [2, , 61, .08, .24, .42, , 3.7, 9, , , , , 1.4, , .1, .21, .32, .09];\nconst effectEnemyKilled = [, .2, 329.6276, .4, .01, , , 10, , 10, 15, .1, 1, 1, , .08, .1, .92, .4, 1, 1e3];\n\nconst unlockAudio = (force = false) => {\n  if (force || audioContext.state === \"suspended\") {\n    audioContext.resume().catch();\n  }\n};\n\nconst playMusic = async () => {\n  const buffer = await renderSong(background),\n    node = zzfxP(...buffer);\n\n  node.connect(musicGainNode);\n  node.loop = true;\n  node.start();\n\n  musicGainNode.connect(zzfxX.destination);\n\n  zzfxX.resume();\n};\n\nconst renderSong = async (song: any): Promise<any[][]> => {\n  await timeout(50);\n  return zzfxM(...song);\n};\n\nconst playEffect = (effect: any, volume: number = 1) => {\n  const effectGainNode = audioContext.createGain();\n  effectGainNode.gain.value = effectsGain.value * volume;\n\n  const node = zzfx(...effect);\n  node.connect(effectGainNode);\n  node.loop = false;\n\n  effectGainNode.connect(zzfxX.destination);\n\n  node.start();\n}\n\nexport const playWhoosh = () => playEffect(effectWhoosh, 0.5);\nexport const playHit = () => playEffect(effectHit);\nexport const playKick = () => playEffect(effectKick);\nexport const playLoose = () => playEffect(effectLoose, 1.5);\nexport const playWin = () => playEffect(effectWin, 1.5);\nexport const playEnemyKilled = () => playEffect(effectEnemyKilled);\n\nexport { audioContext, unlockAudio, playMusic };\n\n", "import { mathHypot } from \"./math\"\n\nexport interface Vector2 {\n    x: number,\n    y: number,\n}\n\nexport interface Box2 {\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n}\n\nexport interface Transform {\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    tx: number,\n    ty: number,\n}\n\nexport namespace Vector2 {\n    export const normalize = (a: Vector2) => {\n        const l = length(a);\n        if (l > 0) {\n            a.x /= l;\n            a.y /= l;\n        }\n    }\n\n    export const length = (a: Vector2): number => {\n        return mathHypot(a.x, a.y);\n    }\n\n    export const distance = (a: Vector2, b: Vector2): number => {\n        return mathHypot(a.x - b.x, a.y - b.y);\n    }\n\n    export const add = (a: Vector2, b: Vector2): Vector2 => {\n        return { x: a.x + b.x, y: a.y + b.y };\n    }\n\n    export const subtract = (a: Vector2, b: Vector2): Vector2 => {\n        return { x: a.x - b.x, y: a.y - b.y };\n    }\n\n    export const scale = (a: Vector2, s: number): Vector2 => {\n        return { x: a.x * s, y: a.y * s };\n    }\n}\n\nexport const vector2 = (x: number = 0, y: number = 0): Vector2 => ({ x, y });\n\nexport const box2 = (x: number = 0, y: number = 0, w: number = 0, h: number = 0): Box2 => ({ x, y, w, h });\n\nexport namespace Box2 {\n    export const contains = (b: Box2, v: Vector2): boolean => {\n        return b.x < v.x && v.x < b.x + b.w &&\n            b.y < v.y && v.y < b.y + b.h;\n    }\n}", "import { now } from \"./browser\";\n\nexport let nowMS: number = now();\nexport let deltaS: number = 0;\n\nexport const calculateTime = () => {\n    const oldMS = nowMS;\n    nowMS = now();\n    deltaS = (nowMS - oldMS) / 1000;\n}", "export interface AnimationFrame {\n    image: number,\n    time: number,\n}\n\nexport const animationDuration = (animation: Array<AnimationFrame>): number => {\n    let time = 0;\n\n    for (const frame of animation) {\n        time += frame.time;\n    }\n\n    return time;\n}\n\nexport const getFrameImage = (animation: Array<AnimationFrame>, animationTime: number): number => {\n    let time = 0;\n\n    const duratuion = animationDuration(animation);\n    animationTime %= duratuion;\n\n    for (let i = 0; i < animation.length; i++) {\n        const frame = animation[i];\n        time += frame.time;\n\n        if (animationTime <= time) {\n            return frame.image;\n        }\n    }\n\n    return 0;\n}\n\nexport const isAnimationFinished = (animation: Array<AnimationFrame>, animationTime: number): boolean => {\n    const duratuion = animationDuration(animation);\n    return animationTime >= duratuion;\n}\n", "import { hit0, hit1, hit2, hitMini0, hitMini1, hitMini2, hitRed0, hitRed1, hitRed2 } from \"../resources/id\";\nimport { Vector2 } from \"../utils/geom\";\nimport { deltaS } from \"../utils/time\";\nimport { animationDuration, AnimationFrame, getFrameImage } from \"./animation\";\nimport { Sprite } from \"./sprite\";\n\nexport const effects: Array<Effect> = [];\n\nexport interface Effect {\n    sprite: Sprite,\n    animation: Array<AnimationFrame>,\n    animationTime: number,\n}\n\nexport interface EffectConfig {\n    animation: Array<AnimationFrame>,\n    offset: Vector2,\n}\n\nexport const hitEffect: EffectConfig = {\n    animation: [\n        { image: hit0, time: 0.1 },\n        { image: hit1, time: 0.1 },\n        { image: hit2, time: 0.1 },\n    ],\n    offset: { x: 16, y: 16 }\n}\n\nexport const hitMiniEffect: EffectConfig = {\n    animation: [\n        { image: hitMini0, time: 0.1 },\n        { image: hitMini1, time: 0.2 },\n        { image: hitMini2, time: 0.2 },\n    ],\n    offset: { x: 8, y: 8 }\n}\n\nexport const hitRedEffect: EffectConfig = {\n    animation: [\n        { image: hitRed0, time: 0.1 },\n        { image: hitRed1, time: 0.2 },\n        { image: hitRed2, time: 0.2 },\n    ],\n    offset: { x: 8, y: 8 }\n}\n\nexport const removeEffect = (effect: Effect) => {\n    const index = effects.indexOf(effect);\n    if (index != -1) {\n        effects.splice(index, 1);\n    }\n}\n\nexport const addEffect = (config: EffectConfig, position: Vector2) => {\n    effects.push({\n        animation: config.animation,\n        animationTime: 0,\n        sprite: {\n            image: -1,\n            x: position.x - config.offset.x,\n            y: position.y - config.offset.y\n        }\n    });\n}\n\nexport const updateEffects = () => {\n    for (const effect of effects) {\n        const duration = animationDuration(effect.animation);\n        effect.animationTime += deltaS;\n        if (effect.animationTime > duration) {\n            removeEffect(effect);\n        } else {\n            effect.sprite.image = getFrameImage(effect.animation, effect.animationTime);\n        }\n    }\n}", "import { Vector2 } from \"../utils/geom\";\nimport { Sprite } from \"./sprite\";\n\nexport interface Entity {\n    sprite: Sprite,\n    position: Vector2\n}\n\nexport const entities: Array<Entity> = [];\n\nexport const removeEntity = (entity: Entity) => {\n    const index = entities.indexOf(entity);\n    if (index != -1) {\n        entities.splice(index, 1);\n    }\n}\n\nexport const clearEntities = () => {\n    entities.splice(0, entities.length);\n}", "import { images } from \"../resources/images\";\nimport { Box2, Vector2 } from \"../utils/geom\";\nimport { entities } from \"./entity\";\nimport { gameHeight, gameWidth } from \"./graphics\";\nimport { Item } from \"./item\";\nimport { Sprite } from \"./sprite\";\n\nexport interface Stage {\n    bounds: Box2,\n    back: Sprite,\n    camera: Vector2,\n    items: Array<Item>,\n}\n\nlet stage: Stage | undefined;\n\nexport const getStage = () => stage!;\n\nexport const setStage = (value: Stage) => {\n    stage = value;\n\n    for (const item of stage.items) {\n        item.sprite.x = item.position.x - item.offset.x;\n        item.sprite.y = item.position.y - item.offset.y;\n\n        if (item.shadow) {\n            item.shadow.x = item.position.x - item.offset.x;\n            item.shadow.y = item.position.y - item.offset.y * item.shadow.scaleY!;\n        }\n\n        entities.push(item);\n    }\n}\n\nexport const limitCamera = () => {\n    const stage = getStage();\n    const back = images[stage.back.image];\n\n    if (- stage.camera.x > 0) {\n        stage.camera.x = 0;\n    }\n\n    if (-stage.camera.x + back.width < gameWidth) {\n        stage.camera.x = back.width - gameWidth;\n    }\n\n    if (- stage.camera.y > 0) {\n        stage.camera.y = 0;\n    }\n\n    if (-stage.camera.y + back.height < gameHeight) {\n        stage.camera.y = back.height - gameHeight;\n    }\n}", "import { getColoredImage } from \"../resources/images\";\nimport { playHit, playKick, playWhoosh } from \"../resources/sound/audio\";\nimport { Vector2 } from \"../utils/geom\";\nimport { chance, limit, mathAbs, numberMax, randomChancesSelect, randomRange, randomSelect } from \"../utils/math\";\nimport { deltaS } from \"../utils/time\";\nimport { animationDuration, AnimationFrame, getFrameImage, isAnimationFinished } from \"./animation\";\nimport { addEffect, hitEffect, hitMiniEffect, hitRedEffect } from \"./effect\";\nimport { entities, removeEntity } from \"./entity\";\nimport { Sprite } from \"./sprite\";\nimport { getStage } from \"./stage\";\n\nexport const units: Array<Unit> = [];\n\nexport const enum UnitState {\n    Stand,\n    Walk,\n    Attack,\n    Damage,\n    Dead,\n}\n\nexport interface Unit {\n    config: UnitConfig,\n    state: UnitState,\n    controller: {\n        move: Vector2,\n        attack: boolean,\n    },\n    health: number,\n    direction: number,\n    position: Vector2,\n    speed: Vector2,\n    animationTime: number,\n    animation?: Array<AnimationFrame>,\n    sprite: Sprite,\n    shadow: Sprite,\n    frame: number,\n    damage: number,\n    custom: any,\n}\n\nexport interface UnitConfig {\n    mob: boolean,\n    name: string,\n    health: number,\n    walkSpeed: number,\n    offset: Vector2,\n    animations: {\n        stand: Array<AnimationFrame>,\n        walkH: Array<AnimationFrame>,\n        walkV: Array<AnimationFrame>,\n        jab: Array<AnimationFrame>,\n        cross: Array<AnimationFrame>,\n        kick: Array<AnimationFrame>,\n        damage1: Array<AnimationFrame>,\n        damage2: Array<AnimationFrame>,\n        knockdown: Array<AnimationFrame>,\n        dead1: Array<AnimationFrame>,\n        dead2: Array<AnimationFrame>,\n        sit: Array<AnimationFrame>,\n    },\n    damages: { [key: number]: number },\n}\n\nexport const addUnit = (config: UnitConfig): Unit => {\n    let unit: Unit = {\n        config: config,\n        state: UnitState.Stand,\n        controller: {\n            move: {\n                x: 0,\n                y: 0\n            },\n            attack: false,\n        },\n        health: config.health,\n        direction: 1,\n        position: {\n            x: 0,\n            y: 0\n        },\n        speed: {\n            x: 0,\n            y: 0\n        },\n        animationTime: 0,\n        sprite: {\n            image: -1,\n        },\n        shadow: {\n            image: -1,\n        },\n        damage: 0,\n        frame: 0,\n        custom: null,\n    };\n\n    units.push(unit);\n    entities.push(unit);\n\n    return unit;\n}\n\nexport const removeUnit = (unit: Unit) => {\n    const index = units.indexOf(unit);\n    if (index != -1) {\n        units.splice(index, 1);\n    }\n    removeEntity(unit);\n}\n\nexport const clearUnits = () => {\n    units.splice(0, units.length);\n}\n\nexport const limitUnitsPositions = () => {\n    const stage = getStage();\n\n    for (const unit of units.values()) {\n        unit.position.x = limit(stage.bounds.x, stage.bounds.x + stage.bounds.w, unit.position.x);\n        unit.position.y = limit(stage.bounds.y, stage.bounds.y + stage.bounds.h, unit.position.y);\n    }\n}\n\nexport const updateUnits = () => {\n    for (const unit of units.values()) {\n        updateUnit(unit);\n    }\n}\n\nconst updateUnit = (unit: Unit) => {\n    let currentAnimation = null;\n\n    const config = unit.config;\n    const animations = config.animations;\n\n    switch (unit.state) {\n        case UnitState.Stand:\n            currentAnimation = animations.stand;\n\n            if (unit.controller.move.x != 0 || unit.controller.move.y != 0) {\n                unit.state = UnitState.Walk;\n                unit.animationTime = 0;\n            }\n\n            checkAttack(unit);\n            break;\n\n        case UnitState.Walk:\n            if (unit.controller.move.x == 0 && unit.controller.move.y == 0) {\n                unit.state = UnitState.Stand;\n                unit.animationTime = 0;\n            }\n            else if (mathAbs(unit.controller.move.x) > mathAbs(unit.controller.move.y)) {\n                currentAnimation = animations.walkH;\n            } else {\n                currentAnimation = animations.walkV;\n            }\n\n            Vector2.normalize(unit.controller.move);\n\n            unit.position.x += unit.controller.move.x * config.walkSpeed * deltaS;\n            unit.position.y += unit.controller.move.y * config.walkSpeed * deltaS;\n\n            checkAttack(unit);\n            break;\n\n        case UnitState.Attack:\n            currentAnimation = unit.animation || animations.jab;\n\n            if (isAnimationFinished(currentAnimation, unit.animationTime)) {\n                unit.state = UnitState.Stand;\n                unit.animationTime = 0;\n                unit.animation = undefined;\n            }\n            break;\n\n        case UnitState.Damage:\n            currentAnimation = unit.animation || animations.damage1;\n\n            if (isAnimationFinished(currentAnimation, unit.animationTime)) {\n                unit.state = UnitState.Stand;\n                unit.animationTime = 0;\n                unit.animation = undefined;\n            }\n            break;\n\n        case UnitState.Dead:\n            currentAnimation = unit.animation || animations.dead1;\n\n            const duration = animationDuration(currentAnimation);\n            if (duration <= unit.animationTime + deltaS) {\n                removeUnit(unit);\n                currentAnimation = null;\n            }\n            break;\n    }\n\n    unit.position.x += unit.speed.x * deltaS;\n    unit.position.y += unit.speed.y * deltaS;\n\n    unit.speed.x *= 0.9;\n    unit.speed.y *= 0.9;\n\n    if (unit.controller.move.x > 0) {\n        unit.direction = 1;\n    } else if (unit.controller.move.x < 0) {\n        unit.direction = -1;\n    }\n\n    if (currentAnimation) {\n        unit.animationTime += deltaS;\n\n        unit.sprite.image = getFrameImage(currentAnimation, unit.animationTime);\n        unit.sprite.flipX = unit.direction < 0;\n\n        unit.shadow.image = getColoredImage(unit.sprite.image, 0x55000000);\n        unit.shadow.flipX = unit.sprite.flipX;\n    }\n\n    unit.damage = 0;\n    if (unit.frame != unit.sprite.image) {\n        unit.frame = unit.sprite.image;\n        unit.damage = config.damages[unit.frame] || 0;\n    }\n}\n\nexport const applyUnitsDamage = () => {\n    for (const current of units) {\n        if (current.health <= 0) {\n            continue;\n        }\n\n        if (!current.damage) {\n            continue;\n        }\n\n        let opponent: Unit | null = null;\n        let opponentDistanceX = numberMax;\n        let opponentDistanceY = numberMax;\n\n        for (const unit of units) {\n            if (unit.health <= 0 || unit.animation == unit.config.animations.knockdown) {\n                continue;\n            }\n\n            if (current.config.mob != unit.config.mob) {\n                const directionX = unit.position.x - current.position.x;\n                if (directionX * current.direction > 0) {\n                    const distanceX = mathAbs(directionX);\n                    const distanceY = mathAbs(current.position.y - unit.position.y);\n                    if (distanceX < 25 && distanceY < 10) {\n                        if (!opponent || opponentDistanceX > distanceX || opponentDistanceY > distanceY) {\n                            opponent = unit;\n                            opponentDistanceX = distanceX;\n                            opponentDistanceY = distanceY;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (opponent) {\n            opponent.health -= current.damage;\n\n            opponent.speed.x += current.direction * current.damage / 100 * 300;\n            current.speed.x += current.direction * 10;\n\n            const effect = (() => {\n                if (current.damage >= 20) {\n                    playKick();\n                    return hitEffect;\n                } else {\n                    playHit();\n                    if (chance(0.5)) {\n                        return hitRedEffect;\n                    } else {\n                        return hitMiniEffect;\n                    }\n                }\n            })();\n\n            addEffect(effect, Vector2.add(opponent.position, { x: randomRange(-3, 3), y: randomRange(-14, -18) }));\n\n            const animations = opponent.config.animations;\n\n            if (opponent.health > 0) {\n                opponent.state = UnitState.Damage;\n\n                opponent.animationTime = 0;\n\n                opponent.animation = randomChancesSelect([\n                    animations.damage1,\n                    animations.damage2,\n                    animations.knockdown,\n                ], [10, 10, 1]);\n            } else {\n                opponent.state = UnitState.Dead;\n                opponent.animation = randomSelect([animations.dead1, animations.dead2]);\n                opponent.animationTime = 0;\n\n                if (opponent.config.mob) {\n                    // playEnemyKilled();\n                }\n            }\n        } else {\n            if (!current.config.mob) {\n                playWhoosh();\n            }\n        }\n    }\n}\n\nexport const updateUnitsSpritePositions = () => {\n    for (const unit of units.values()) {\n        updateUnitSpritePosition(unit);\n    }\n}\n\nconst updateUnitSpritePosition = (unit: Unit) => {\n    const config = unit.config;\n\n    unit.sprite.x = unit.position.x - config.offset.x;\n    unit.sprite.y = unit.position.y - config.offset.y;\n\n    unit.shadow.scaleY = 0.4;\n    unit.shadow.x = unit.position.x - config.offset.x + 0;\n    unit.shadow.y = unit.position.y - config.offset.y * unit.shadow.scaleY;\n}\n\nconst checkAttack = (unit: Unit) => {\n    if (unit.controller.attack) {\n        const animations = unit.config.animations;\n        unit.state = UnitState.Attack;\n        unit.animation = randomSelect([animations.jab, animations.cross, animations.kick]);\n        unit.animationTime = 0;\n    }\n}", "import { DEBUG } from \"../debug\";\nimport { font0, font1, font10, font11, font12, font13, font14, font15, font16, font17, font18, font19, font2, font20, font21, font22, font23, font24, font25, font26, font27, font28, font29, font3, font30, font31, font32, font33, font34, font35, font36, font37, font4, font5, font6, font7, font8, font9 } from \"./id\";\n\nconst getChars = (): number[] => {\n    const chars: number[] = [];\n\n    chars[33] = font36;\n    chars[35] = 0;\n    chars[46] = font37;\n    chars[47] = -1;\n\n    chars.push(\n        font0,\n        font1,\n        font2,\n        font3,\n        font4,\n        font5,\n        font6,\n        font7,\n        font8,\n        font9,\n    );\n\n    chars[64] = 0;\n\n    chars.push(\n        font10,\n        font11,\n        font12,\n        font13,\n        font14,\n        font15,\n        font16,\n        font17,\n        font18,\n        font19,\n        font20,\n        font21,\n        font22,\n        font23,\n        font24,\n        font25,\n        font26,\n        font27,\n        font28,\n        font29,\n        font30,\n        font31,\n        font32,\n        font33,\n        font34,\n        font35,\n    );\n\n    return chars;\n}\n\nconst font = getChars();\n\nexport const getIdByCharCode = (code: number): number | undefined => {\n    if (DEBUG) {\n        if (code != 32 && (font[code] === undefined || font[code] === -1)) {\n            throw `symbol not found ${code} char ${String.fromCharCode(code)}`;\n        }\n    }\n\n    return font[code];\n}", "import { images } from \"../resources/images\";\nimport { drawImage } from \"../utils/browser\";\nimport { mathRound } from \"../utils/math\";\n\nexport interface Sprite {\n    image: number,\n    x?: number,\n    y?: number,\n    flipX?: boolean,\n    flipY?: boolean,\n    scaleY?: number,\n}\n\nexport const drawSprite = (context: CanvasRenderingContext2D, sprite: Sprite) => {\n    if (sprite.image == -1) return;\n\n    context.save();\n\n    const image = images[sprite.image];\n\n    let a = 1;\n    let b = 0;\n    let c = 0;\n    let d = sprite.scaleY || 1;\n\n    let tx = mathRound(sprite.x || 0);\n    let ty = mathRound(sprite.y || 0);\n\n    if (sprite.flipX) {\n        a = -1;\n        tx += image.width;\n    }\n\n    if (sprite.flipY) {\n        d = -1;\n        ty += image.height;\n    }\n\n    context.transform(a, b, c, d, tx, ty);\n\n    drawImage(context, image, 0, 0);\n\n    context.restore();\n}\n\nexport const drawSprites = (context: CanvasRenderingContext2D, sprites: Array<Sprite>) => {\n    for (const sprite of sprites) {\n        drawSprite(context, sprite);\n    }\n}", "import { hasTouch } from \"../utils/browser\"\nimport { Vector2 } from \"../utils/geom\";\nimport { screenCanvas } from \"./graphics\";\nimport { touches } from \"./input\"\n\nexport const joystick = {\n    moveId: -1,\n\n    move: { x: 0, y: 0 },\n    moveRadius: 30,\n\n    moveStickRadius: 10,\n    moveStick: { x: 0, y: 0 },\n\n    attackId: -1,\n    attack: { x: 0, y: 0 },\n    attackRadius: 30,\n}\n\nconst border = 20;\nconst delta = { x: 60, y: 60 };\n\nexport const updateJoystick = () => {\n    if (!hasTouch) {\n        return;\n    }\n\n    joystick.move.x = delta.x;\n    joystick.move.y = screenCanvas.height - delta.y;\n\n    joystick.attack.x = screenCanvas.width - delta.x;\n    joystick.attack.y = screenCanvas.height - delta.y;\n\n    if (joystick.moveId == -1) {\n        joystick.moveStick.x = joystick.move.x;\n        joystick.moveStick.y = joystick.move.y;\n\n        for (const touchId in touches) {\n            const touch = touches[touchId];\n            if (touch.started) {\n                const distance = Vector2.distance(joystick.move, touch);\n                if (distance < joystick.moveRadius + border) {\n                    joystick.moveId = Number(touchId);\n\n                    joystick.moveStick.x = touch.x;\n                    joystick.moveStick.y = touch.y;\n                    break;\n                }\n            }\n            // console.log(\"touch\", touchId, touches[touchId]);\n        }\n    } else {\n        const touch = touches[joystick.moveId];\n        if (touch) {\n            joystick.moveStick.x = touch.x;\n            joystick.moveStick.y = touch.y;\n        } else {\n            joystick.moveId = -1;\n        }\n    }\n\n    const direction = Vector2.subtract(joystick.moveStick, joystick.move);\n    const distance = Vector2.length(direction);\n    if (distance > joystick.moveRadius) {\n        Vector2.normalize(direction);\n        joystick.moveStick.x = joystick.move.x + direction.x * joystick.moveRadius;\n        joystick.moveStick.y = joystick.move.y + direction.y * joystick.moveRadius;\n    }\n\n    if (joystick.attackId == -1) {\n        for (const touchId in touches) {\n            const touch = touches[touchId];\n            if (touch.started) {\n                const distance = Vector2.distance(joystick.attack, touch);\n                if (distance < joystick.attackRadius + border) {\n                    joystick.attackId = Number(touchId);\n                }\n            }\n        }\n    } else {\n        const touch = touches[joystick.attackId];\n        if (!touch) {\n            joystick.attackId = -1;\n        }\n    }\n}", "export const enum GameState {\n    Game,\n    GameWin,\n    GameOver,\n}\n\nexport const game = {\n    state: GameState.Game,\n    timout: 0,\n}", "import { Vector2 } from \"../utils/geom\";\nimport { mathAbs } from \"../utils/math\";\nimport { setAnyKey } from \"./input\";\n\nexport const gamepadData = {\n    axe: { x: 0, y: 0 },\n    button: false,\n}\n\nconst enum GamepadKey {\n    Up = 12,\n    Down = 13,\n    Left = 14,\n    Right = 15,\n    Action0 = 0,\n    Action1 = 1,\n    Action2 = 2,\n    Action3 = 3,\n}\n\nlet pressed = false;\n\nexport const updateGamepad = () => {\n    if ('getGamepads' in navigator) {\n        gamepadData.axe.x = 0;\n        gamepadData.axe.y = 0;\n        gamepadData.button = false;\n\n        const gamepads = navigator.getGamepads();\n\n        let pressedNow = false;\n\n        for (const gamepad of gamepads) {\n            if (gamepad && gamepad.connected) {\n                if (gamepad.axes.length >= 2) {\n                    gamepadData.axe.x += gamepad.axes[0];\n                    gamepadData.axe.y += gamepad.axes[1];\n                }\n\n                if (gamepad.axes.length >= 4) {\n                    gamepadData.axe.x += gamepad.axes[2];\n                    gamepadData.axe.y += gamepad.axes[3];\n                }\n\n                for (let i = 0; i < gamepad.buttons.length; i++) {\n                    const button = gamepad.buttons[i];\n\n                    if (button.pressed) {\n                        pressedNow = true;\n                        switch (i) {\n                            case GamepadKey.Up:\n                                gamepadData.axe.y -= 1;\n                                break;\n\n                            case GamepadKey.Down:\n                                gamepadData.axe.y += 1;\n                                break;\n\n                            case GamepadKey.Left:\n                                gamepadData.axe.x -= 1;\n                                break;\n\n                            case GamepadKey.Right:\n                                gamepadData.axe.x += 1;\n                                break;\n\n                            case GamepadKey.Action0:\n                            case GamepadKey.Action1:\n                            case GamepadKey.Action2:\n                            case GamepadKey.Action3:\n                                gamepadData.button = true;\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (mathAbs(gamepadData.axe.x) < 0.2) {\n            gamepadData.axe.x = 0;\n        }\n\n        if (mathAbs(gamepadData.axe.y) < 0.2) {\n            gamepadData.axe.y = 0;\n        }\n\n        Vector2.normalize(gamepadData.axe);\n\n        if (pressed != pressedNow) {\n            pressed = pressedNow;\n            setAnyKey(pressed);\n        }\n    }\n}", "import { AnimationFrame } from \"../engine/animation\";\nimport { addUnit, Unit, UnitConfig, units, UnitState } from \"../engine/unit\";\nimport { man0, man1, man10, man11, man12, man2, man3, man4, man5, man6, man7, man8, man9, man13, man14, man15, man16, man17, man18, man19, man20, man21, man22 } from \"../resources/id\";\nimport { addImage, images } from \"../resources/images\";\nimport { cloneObject } from \"../utils/browser\";\nimport { Vector2 } from \"../utils/geom\";\nimport { applyPallette, applyShadow, cloneCanvas, noise } from \"../utils/image\";\nimport { chance, limit, mathAbs, numberMax, randomRange, randomSelect } from \"../utils/math\";\nimport { deltaS } from \"../utils/time\";\nimport { getHero } from \"./hero\";\n\nconst minDistance = 10;\n\nconst fightDistanceX = 18;\nconst fightDistanceY = 5;\n\nconst safeDistanceX = 50;\nconst safeDistanceY = 20;\n\nexport const attackers: Array<Unit> = [];\n\nlet resetAttackersTimer = 0;\n\nexport interface MobData {\n    reaction: { min: number, max: number },\n    reactionTimeout: number,\n    reactionTime: number,\n    attackActive: boolean,\n};\n\nexport const mobs: Array<Unit> = [];\n\nconst pallette = [\n    0xff000000, // hair\n    0xffff9300, // face\n    0xff942192, // body\n    0xffaa7942, // hand0\n    0xff5e0e01, // hand1\n    0xffbf6d5e, // hand2\n    0xff006500, // legs0\n    0xff006a6b, // legs1\n    0xff01187d, // legs2\n];\n\nconst baseConfig: UnitConfig = {\n    mob: true,\n    name: \"enemy\",\n    health: 100,\n    walkSpeed: 20,\n    offset: { x: 16, y: 31 },\n    animations: {\n        stand: [\n            { image: man0, time: 0.3 },\n            { image: man1, time: 0.3 },\n            { image: man0, time: 0.3 },\n            { image: man2, time: 0.3 },\n            { image: man3, time: 0.3 },\n            { image: man2, time: 0.3 },\n        ],\n        walkH: [\n            { image: man0, time: 0.2 },\n            { image: man4, time: 0.2 },\n            { image: man0, time: 0.2 },\n            { image: man5, time: 0.2 },\n        ],\n        walkV: [\n            { image: man0, time: 0.2 },\n            { image: man9, time: 0.2 },\n            { image: man0, time: 0.2 },\n            { image: man10, time: 0.2 },\n        ],\n        jab: [\n            { image: man0, time: 0.2 },\n            { image: man6, time: 0.2 },\n        ],\n        cross: [\n            { image: man6, time: 0.2 },\n            { image: man7, time: 0.2 },\n            { image: man8, time: 0.2 },\n            { image: man7, time: 0.2 },\n        ],\n        kick: [\n            { image: man0, time: 0.2 },\n            { image: man11, time: 0.2 },\n            { image: man12, time: 0.2 },\n            { image: man11, time: 0.2 },\n        ],\n        damage1: [\n            { image: man14, time: 0.5 },\n            { image: man13, time: 0.3 },\n        ],\n        damage2: [\n            { image: man18, time: 0.5 },\n            { image: man17, time: 0.3 },\n        ],\n        knockdown: [\n            { image: man13, time: 0.2 },\n            { image: man14, time: 0.5 },\n            { image: man15, time: 1.0 },\n            { image: man16, time: 0.3 },\n            { image: man17, time: 0.2 },\n        ],\n        dead1: [\n            { image: man18, time: 0.2 },\n            { image: man19, time: 0.2 },\n            { image: man20, time: 0.2 },\n            { image: man21, time: 1.0 },\n            { image: -1, time: 0.2 },\n            { image: man21, time: 0.2 },\n            { image: -1, time: 0.2 },\n            { image: man21, time: 0.2 },\n            { image: -1, time: 0.2 },\n            { image: man21, time: 0.2 },\n        ],\n        dead2: [\n            { image: man13, time: 0.2 },\n            { image: man14, time: 0.5 },\n            { image: man15, time: 1.0 },\n            { image: -1, time: 0.2 },\n            { image: man15, time: 0.2 },\n            { image: -1, time: 0.2 },\n            { image: man15, time: 0.2 },\n            { image: -1, time: 0.2 },\n            { image: man15, time: 0.2 },\n        ],\n        sit: [\n            { image: man22, time: 0.0 },\n        ]\n    },\n    damages: {\n        [man6]: 5, // jab\n        [man8]: 10, // cross\n        [man12]: 20, // kick\n    },\n};\n\nexport const mobsConfigs: Array<UnitConfig> = [];\n\nexport const randomMobConfig = (): UnitConfig => randomSelect(mobsConfigs);\n\nexport const generateMobsConfigs = () => {\n    // const pallette = getPallette(images[man0]);\n    // for (const color of pallette) {\n    //     console.log(`0x${color.toString(16)}`);\n    // }\n\n    // boss\n    generateConfig([\n        0xff000000, // hair\n        0xffff9300, // face\n        0xffaaaaaa, // body\n        0xffffffff, // hand0\n        0xffffffff, // hand1\n        0xffff9300, // hand2\n        0xff666666, // legs0\n        0xff666666, // legs1\n        0xff000000 // legs2\n    ]);\n\n    // bodyguard\n    generateConfig([\n        0xff000000, // hair\n        0xffff9300, // face\n        0xff111111, // body\n        0xff111111, // hand0\n        0xff111111, // hand1\n        0xffff9300, // hand2\n        0xff111111, // legs0\n        0xff111111, // legs1\n        0xff000000 // legs2\n    ]);\n\n    const hairs = [0xff090806, 0xff9B6C4C, 0xffA95942];\n    const skins = [0xffE7C2AA, 0xffC99073, 0xffE1BA91, 0xffBC8663, 0xff553D2D];\n    const shirts = [0xff333333, 0xff2E4A57, 0xff005493];\n    const pants = [0xff000033, 0xff797B8B, 0xff005493, 0xff003F24];\n    const shoes = [0xff000000, 0xffEBEBEB, 0xff270C01];\n\n    for (let i = 0; i < 10; i++) {\n        let hair = randomSelect(hairs);\n        const face = randomSelect(skins);\n        const shirt = randomSelect(shirts);\n        const pant = randomSelect(pants);\n        const shoe = randomSelect(shoes);\n\n        let body = shirt;\n        let hand0 = shirt;\n        let hand1 = shirt;\n        let hand2 = face;\n\n        let legs0 = pant;\n        let legs1 = pant;\n\n        // blind\n        if (chance(0.1)) {\n            hair = face;\n        }\n\n        // short shirt\n        if (chance(0.5)) {\n            hand1 = face;\n        }\n\n        // gloves\n        if (chance(0.2)) {\n            hand2 = 0xff111111;\n        }\n\n        // short pants\n        if (chance(0.5)) {\n            legs1 = face;\n        }\n\n        generateConfig([\n            hair, // hair\n            face, // face\n            body, // body\n            hand0, // hand0\n            hand1, // hand1\n            hand2, // hand2\n            legs0, // legs0\n            legs1, // legs1\n            shoe, // legs2\n        ]);\n    }\n}\n\nconst generateConfig = (targetPallette: number[]) => {\n    const newConfig: UnitConfig = cloneObject(baseConfig);\n\n    newConfig.walkSpeed = randomRange(10, 20);\n\n    const id = mobsConfigs.length;\n\n    const animations = newConfig.animations as any;\n    for (const name in animations) {\n        const animation = animations[name] as Array<AnimationFrame>;\n        replaceImagesPallette(animation, pallette, targetPallette, id);\n    }\n\n    for (const image in newConfig.damages) {\n        const newImage = getPalletteImage(Number(image), pallette, targetPallette, id);\n        newConfig.damages[newImage] = newConfig.damages[image];\n    }\n\n    mobsConfigs.push(newConfig);\n}\n\nconst replaceImagesPallette = (animation: Array<AnimationFrame>, sourcePallette: Array<number>, targetPallette: Array<number>, palletteId: number) => {\n    for (const frame of animation) {\n        frame.image = getPalletteImage(frame.image, sourcePallette, targetPallette, palletteId);\n    }\n}\n\nconst imagesPallete: { [key: string]: number } = {};\nconst getPalletteImage = (id: number, sourcePallette: Array<number>, targetPallette: Array<number>, palletteId: number) => {\n    if (id == -1) return -1;\n\n    const key = `${id}_${palletteId}`;\n    if (!imagesPallete[key]) {\n        const target = cloneCanvas(images[id]);\n        applyPallette(target, sourcePallette, targetPallette);\n        applyShadow(target);\n        noise(10, target);\n        imagesPallete[key] = addImage(target);\n    }\n    return imagesPallete[key];\n}\n\nexport const createMob = (config: UnitConfig): Unit => {\n    const mob = addUnit(config);\n    const mobData: MobData = {\n        reaction: {\n            min: 1,\n            max: 2,\n        },\n        reactionTimeout: 0,\n        reactionTime: 0,\n        attackActive: false,\n    };\n    mob.custom = mobData;\n    mobs.push(mob);\n    return mob;\n}\n\nexport const clearMobs = () => {\n    mobs.splice(0, mobs.length);\n}\n\nexport const removeMob = (mob: Unit) => {\n    const index = mobs.indexOf(mob);\n    if (index != -1) {\n        mobs.splice(index, 1);\n    }\n}\n\nexport const removeAttacker = (mob: Unit) => {\n    const index = attackers.indexOf(mob);\n    if (index != -1) {\n        attackers.splice(index, 1);\n    }\n}\n\nexport const updateMobs = () => {\n    resetAttackersTimer -= deltaS;\n    if (resetAttackersTimer < 0) {\n        resetAttackersTimer = randomRange(3, 5);\n        attackers.splice(0, attackers.length);\n    }\n\n    const hero = getHero();\n\n    for (const mob of mobs) {\n        if (mob.health <= 0 || !units.includes(mob)) {\n            removeMob(mob);\n            removeAttacker(mob);\n            continue;\n        }\n\n        mob.controller.move.x = 0;\n        mob.controller.move.y = 0;\n        mob.controller.attack = false;\n\n        const mobData = mob.custom as MobData;\n\n        if (!mobData.attackActive) {\n            mobData.reactionTime += deltaS;\n            if (mobData.reactionTime > mobData.reactionTimeout) {\n                mobData.reactionTime = 0;\n                mobData.reactionTimeout = randomRange(mobData.reaction.min, mobData.reaction.max);\n                mobData.attackActive = true;\n            }\n        }\n    }\n\n    updateAttackersList(hero);\n\n    for (const mob of mobs) {\n        if (mob.health <= 0 || mob.animation == mob.config.animations.knockdown) {\n            continue;\n        }\n\n        if (mob.state != UnitState.Walk && mob.state != UnitState.Stand) {\n            continue;\n        }\n\n        if (hero.health <= 0 || hero.animation == hero.config.animations.knockdown) {\n            continue;\n        }\n\n        const nearHero = onFightDistance(mob, hero);\n        if (nearHero) {\n            const mobData = mob.custom as MobData;\n            if (mobData.attackActive) {\n                mobData.attackActive = false;\n\n                const direction = Vector2.subtract(hero.position, mob.position);\n                mob.direction = limit(-1, 1, direction.x);\n                mob.controller.attack = true;\n\n                if (!attackers.includes(mob)) {\n                    attackers.push(mob);\n                }\n            }\n        } else {\n            let walkToHero = false;\n\n            if (attackers.includes(mob)) {\n                walkToHero = true;\n            } else {\n                if (!onSafeDistance(mob, hero)) {\n                    walkToHero = true;\n                }\n            }\n\n            if (walkToHero) {\n                const direction = Vector2.subtract(hero.position, mob.position);\n                Vector2.normalize(direction);\n                mob.controller.move.x = direction.x;\n                mob.controller.move.y = direction.y;\n            }\n        }\n    }\n\n    mobsCollision();\n}\n\nconst mobsCollision = () => {\n    for (let i = 0; i < mobs.length; i++) {\n        const mob0 = mobs[i];\n        if (mob0.state == UnitState.Walk || mob0.state == UnitState.Stand) {\n            for (let j = i + 1; j < mobs.length; j++) {\n                const mob1 = mobs[j];\n                if (mob1.state == UnitState.Walk || mob1.state == UnitState.Stand) {\n                    const direction = Vector2.subtract(mob1.position, mob0.position);\n                    if (direction.x == 0 && direction.y == 0) {\n                        direction.x = 1;\n                    }\n                    const distance = Vector2.length(direction);\n                    if (distance < minDistance) {\n                        const scale = (minDistance - distance) / distance;\n\n                        mob0.position.x -= direction.x * scale;\n                        mob0.position.y -= direction.y * scale;\n\n                        mob1.position.x += direction.x * scale;\n                        mob1.position.y += direction.y * scale;\n                    }\n                }\n            }\n        }\n    }\n}\n\nlet attackersMax = 1;\n\nexport const setAttackers = (count: number) => attackersMax = count;\n\nexport const updateAttackersList = (hero: Unit) => {\n    while (attackers.length < attackersMax) {\n        let nearDistance = numberMax;\n        let nearMob: Unit | undefined;\n\n        for (const mob of mobs) {\n            if ((mob.state == UnitState.Stand || mob.state == UnitState.Walk) && mob.health > 0) {\n                if (!attackers.includes(mob)) {\n                    const distance = Vector2.distance(hero.position, mob.position);\n                    if (nearDistance > distance) {\n                        nearDistance = distance;\n                        nearMob = mob;\n                    }\n                }\n            }\n        }\n\n        if (nearMob) {\n            attackers.push(nearMob);\n        } else {\n            break;\n        }\n    }\n\n    while (attackers.length > attackersMax) {\n        let furtherUnit: Unit | undefined;\n        let furtherDistance = 0;\n        for (const attacker of attackers) {\n            const distance = Vector2.distance(attacker.position, hero.position);\n            if (furtherDistance < distance) {\n                furtherDistance = distance;\n                furtherUnit = attacker;\n            }\n        }\n\n        if (furtherUnit) {\n            removeAttacker(furtherUnit);\n        }\n    }\n}\n\nconst onFightDistance = (mob: Unit, hero: Unit): boolean => onDistance(mob, hero, fightDistanceX, fightDistanceY);\nconst onSafeDistance = (mob: Unit, hero: Unit): boolean => onDistance(mob, hero, safeDistanceX, safeDistanceY);\n\nconst onDistance = (mob: Unit, hero: Unit, dx: number, dy: number): boolean => {\n    const direction = Vector2.subtract(hero.position, mob.position);\n    return mathAbs(direction.x) < dx && mathAbs(direction.y) < dy;\n}", "import { DEBUG } from \"../debug\";\nimport { createMob, MobData, mobs, mobsConfigs, setAttackers } from \"../game/mob\";\nimport { playWin } from \"../resources/sound/audio\";\nimport { cloneObject } from \"../utils/browser\";\nimport { Box2 } from \"../utils/geom\";\nimport { lerp, mathMax, mathMin, mathRound, randomRange, randomSelect } from \"../utils/math\";\nimport { game, GameState } from \"./game\";\nimport { gameWidth } from \"./graphics\";\nimport { getStage } from \"./stage\";\nimport { UnitConfig, units } from \"./unit\";\n\nexport interface WaveMob {\n    config: number,\n    count: number,\n    health: number,\n    walkSpeed: number,\n    reaction: {\n        min: number,\n        max: number\n    },\n}\n\nexport interface Wave {\n    mobs: Array<WaveMob>,\n    attackers: number,\n}\n\nlet waves: Array<Wave> = [];\n\nexport const getLevel = (): number => 13 - waves.length;\n\nexport const lastLevel = () => {\n    if (DEBUG) {\n        // while (waves.length > 1) {\n        waves.shift();\n        // }\n    }\n}\n\nexport const initWaves = () => {\n    waves = [];\n\n    const reactionStart = 3;\n    const reactionEnd = 2;\n\n    const countStart = 2;\n    const countEnd = 5;\n\n    const healthStart = 100;\n    const healthEnd = 150;\n\n    const walkSpeedStart = 30;\n    const walkSpeedEnd = 35;\n\n    const attackersStart = 1;\n    const attackersEnd = 3;\n\n    const wavesCount = 12;\n\n    for (let i = 0; i < wavesCount; i++) {\n        const value = i / (wavesCount - 1);\n\n        const reaction = lerp(reactionStart, reactionEnd, value);\n        const count = mathRound(lerp(countStart, countEnd, value));\n        const health = mathRound(lerp(healthStart, healthEnd, value));\n        const walkSpeed = lerp(walkSpeedStart, walkSpeedEnd, value);\n        const attackers = mathRound(lerp(attackersStart, attackersEnd, value));\n\n        waves.push(\n            {\n                attackers: attackers,\n                mobs: [\n                    {\n                        reaction: { min: reaction, max: reaction * 1.2 },\n                        count: count,\n                        config: -1,\n                        health: health,\n                        walkSpeed: walkSpeed,\n                    }\n                ],\n            }\n        )\n    }\n\n    waves.push(\n        {\n            attackers: attackersEnd,\n            mobs: [\n                {\n                    reaction: { min: reactionEnd, max: reactionEnd * 1.2 },\n                    count: 3,\n                    config: 1, // bodyguard\n                    health: healthEnd,\n                    walkSpeed: walkSpeedEnd,\n                },\n                {\n                    reaction: { min: reactionEnd, max: reactionEnd * 1.2 },\n                    count: 1,\n                    config: 0, // boss\n                    health: 500,\n                    walkSpeed: walkSpeedEnd,\n                }\n            ],\n        }\n    )\n}\n\nconst names = [\"bob\", \"jay\", \"jack\", \"serg\", \"alex\", \"john\", \"mike\", \"buba\", \"val\", \"noah\", \"levi\", \"leo\", \"alan\", \"ben\", \"kyle\", \"ivan\"];\n\nexport const getZones = (): Array<Box2> => {\n    const top = 32;\n    const bottom = 64;\n\n    const zones: Array<Box2> = [];\n\n    const stage = getStage();\n\n    const leftMin = mathMax(stage.bounds.x, stage.camera.x - 30);\n    const leftMax = stage.camera.x;\n\n    const left: Box2 = {\n        x: leftMin,\n        y: stage.bounds.y + top,\n        w: leftMax - leftMin,\n        h: stage.bounds.h - top - bottom,\n    }\n\n    if (left.w > 0) {\n        zones.push(left);\n    }\n\n    const rightMin = stage.camera.x + gameWidth;\n    const rightMax = mathMin(stage.bounds.x + stage.bounds.w, stage.camera.x + gameWidth + 30);\n\n    const right: Box2 = {\n        x: rightMin,\n        y: stage.bounds.y + top,\n        w: rightMax - rightMin,\n        h: stage.bounds.h - top - bottom,\n    }\n\n    if (right.w > 0) {\n        zones.push(right);\n    }\n\n    return zones;\n};\n\nexport const generateMobs = () => {\n    const zones = getZones();\n\n    if (!zones.length) {\n        return;\n    }\n\n    if (!mobs.length) {\n        if (waves.length) {\n            const usualMobsConfigs = [...mobsConfigs];\n            usualMobsConfigs.shift();\n            usualMobsConfigs.shift();\n\n            const wave = waves.shift()!;\n\n            setAttackers(wave.attackers);\n\n            for (const waveMob of wave.mobs) {\n                for (let i = 0; i < waveMob.count; i++) {\n                    const config: UnitConfig = cloneObject(waveMob.config == -1 ? randomSelect(usualMobsConfigs) : mobsConfigs[waveMob.config]);\n                    config.health = waveMob.health;\n                    config.walkSpeed = waveMob.walkSpeed;\n                    if (waveMob.config == 0) {\n                        config.name = \"boss\";\n                    } else {\n                        config.name = randomSelect(names);\n                    }\n\n                    const mob = createMob(config);\n                    const mobData = mob.custom as MobData;\n                    mobData.reaction = waveMob.reaction;\n\n                    const zone = randomSelect(zones);\n\n                    mob.position.x = zone.x + randomRange(0, zone.w);\n                    mob.position.y = zone.y + randomRange(0, zone.h);\n                }\n            }\n        } else {\n            if (units.length == 1) {\n                game.state = GameState.GameWin;\n                playWin();\n            }\n        }\n    }\n}", "import { DEBUG } from \"../debug\";\nimport { game, GameState } from \"../engine/game\";\nimport { gamepadData } from \"../engine/gamepad\";\nimport { isKeyPressed, Key } from \"../engine/input\";\nimport { joystick } from \"../engine/joystick\";\nimport { addUnit, Unit, UnitConfig, units } from \"../engine/unit\";\nimport { lastLevel } from \"../engine/waves\";\nimport { kate0, kate1, kate10, kate11, kate12, kate13, kate14, kate15, kate16, kate17, kate18, kate19, kate2, kate3, kate4, kate5, kate6, kate7, kate8, kate9 } from \"../resources/id\";\nimport { playLoose } from \"../resources/sound/audio\";\nimport { Vector2 } from \"../utils/geom\";\n\nexport const enum HeroInputType {\n    Keyboard,\n    TouchJoystick,\n    Gamepad,\n}\n\nexport let heroInputType: HeroInputType = HeroInputType.Keyboard;\n\nexport const setHeroInputType = (value: HeroInputType) => heroInputType = value;\n\nconst config: UnitConfig = {\n    mob: false,\n    name: \"kate\",\n    health: 1000,\n    walkSpeed: 40,\n    offset: { x: 16, y: 29 },\n    animations: {\n        stand: [\n            { image: kate0, time: 0.2 },\n            { image: kate1, time: 0.2 },\n            { image: kate2, time: 0.2 },\n            { image: kate1, time: 0.2 },\n            { image: kate0, time: 0.2 },\n            { image: kate3, time: 0.2 },\n        ],\n        walkH: [\n            { image: kate0, time: 0.1 },\n            { image: kate4, time: 0.1 },\n            { image: kate5, time: 0.1 },\n            { image: kate4, time: 0.1 },\n        ],\n        walkV: [\n            { image: kate11, time: 0.1 },\n            { image: kate12, time: 0.1 },\n            { image: kate11, time: 0.1 },\n            { image: kate13, time: 0.1 },\n        ],\n        jab: [\n            { image: kate0, time: 0.05 },\n            { image: kate8, time: 0.1 },\n        ],\n        cross: [\n            { image: kate8, time: 0.1 },\n            { image: kate9, time: 0.1 },\n            { image: kate10, time: 0.1 },\n            { image: kate9, time: 0.1 },\n        ],\n        kick: [\n            { image: kate0, time: 0.05 },\n            { image: kate6, time: 0.05 },\n            { image: kate7, time: 0.1 },\n            { image: kate6, time: 0.1 },\n        ],\n        damage1: [\n            { image: kate14, time: 0.5 },\n        ],\n        damage2: [\n            { image: kate15, time: 0.5 },\n        ],\n        knockdown: [\n            { image: kate15, time: 0.3 },\n            { image: kate16, time: 0.3 },\n            { image: kate17, time: 1.0 },\n            { image: kate18, time: 0.3 },\n            { image: kate19, time: 0.3 },\n            { image: kate0, time: 0.3 },\n        ],\n        dead1: [\n            { image: kate0, time: 0.1 },\n            { image: kate15, time: 0.3 },\n            { image: kate16, time: 0.3 },\n            { image: kate17, time: 1.0 },\n            { image: -1, time: 0.2 },\n            { image: kate17, time: 0.2 },\n            { image: -1, time: 0.2 },\n            { image: kate17, time: 0.2 },\n            { image: -1, time: 0.2 },\n            { image: kate17, time: 0.2 },\n        ],\n        dead2: [\n            { image: kate0, time: 1.0 },\n        ],\n        sit: []\n    },\n    damages: {\n        [kate8]: 10, // jab\n        [kate10]: 20, // cross\n        [kate7]: 30, // kick\n    },\n};\n\nlet hero: Unit | undefined;\n\nexport const createHero = () => {\n    hero = addUnit(config);\n}\n\nexport const getHero = (): Unit => {\n    return hero!;\n}\n\nexport const updateHero = () => {\n    if (!hero) {\n        return;\n    }\n\n    if (!units.includes(hero)) {\n        game.state = GameState.GameOver;\n        playLoose();\n    }\n\n    if (hero.health <= 0) {\n        return;\n    }\n\n    hero.controller.move.x = 0;\n    hero.controller.move.y = 0;\n    hero.controller.attack = false;\n\n    if (isKeyPressed(Key.Left) || isKeyPressed(Key.A)) {\n        hero.controller.move.x = -1;\n        heroInputType = HeroInputType.Keyboard;\n    }\n\n    if (isKeyPressed(Key.Right) || isKeyPressed(Key.D)) {\n        hero.controller.move.x = 1;\n        heroInputType = HeroInputType.Keyboard;\n    }\n\n    if (isKeyPressed(Key.Up) || isKeyPressed(Key.W)) {\n        hero.controller.move.y = -1;\n        heroInputType = HeroInputType.Keyboard;\n    }\n\n    if (isKeyPressed(Key.Down) || isKeyPressed(Key.S)) {\n        hero.controller.move.y = 1;\n        heroInputType = HeroInputType.Keyboard;\n    }\n\n    if (isKeyPressed(Key.Space) || isKeyPressed(Key.X)) {\n        hero.controller.attack = true;\n        heroInputType = HeroInputType.Keyboard;\n    }\n\n    if (DEBUG) {\n        if (isKeyPressed(Key.Z)) {\n            lastLevel();\n        }\n    }\n\n    if (joystick.moveId != -1) {\n        const direction = Vector2.subtract(joystick.moveStick, joystick.move);\n        hero.controller.move.x = direction.x;\n        hero.controller.move.y = direction.y;\n\n        heroInputType = HeroInputType.TouchJoystick;\n    }\n\n    if (joystick.attackId != -1) {\n        hero.controller.attack = true;\n        heroInputType = HeroInputType.TouchJoystick;\n    }\n\n    if (gamepadData.axe.x != 0 || gamepadData.axe.y != 0) {\n        hero.controller.move.x = gamepadData.axe.x;\n        hero.controller.move.y = gamepadData.axe.y;\n        heroInputType = HeroInputType.Gamepad;\n    }\n\n    if (gamepadData.button) {\n        hero.controller.attack = true;\n        heroInputType = HeroInputType.Gamepad;\n    }\n}", "import { DEBUG } from \"../debug\";\nimport { units } from \"./unit\";\nimport { getIdByCharCode } from \"../resources/font\";\nimport { getColoredImage, images } from \"../resources/images\";\nimport { drawImage, getContext, hasTouch, now } from \"../utils/browser\";\nimport { limit, mathFloor, mathMax, mathMin, mathPI2, mathRound } from \"../utils/math\";\nimport { deltaS, nowMS } from \"../utils/time\";\nimport { getStage } from \"./stage\";\nimport { drawSprite } from \"./sprite\";\nimport { effects } from \"./effect\";\nimport { entities } from \"./entity\";\nimport { formatColor } from \"../utils/pattern\";\nimport { joystick } from \"./joystick\";\nimport { getHero, HeroInputType, heroInputType } from \"../game/hero\";\nimport { game, GameState } from \"./game\";\nimport { getLevel } from \"./waves\";\nimport { mobs } from \"../game/mob\";\n\nexport const screenCanvas = document.getElementById('c') as HTMLCanvasElement;\nscreenCanvas.style.imageRendering = 'pixelated';\n\nconst context = getContext(screenCanvas);\n\nexport const gameWidth = 200;\nexport const gameHeight = 200;\n\nexport const screenOffset = { x: 0, y: 0 };\nexport let screenScale = 1;\n\nexport const updateSize = () => {\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n\n    screenScale = mathMin(screenWidth / gameWidth, screenHeight / gameHeight);\n\n    screenCanvas.width = mathMax(gameWidth, screenWidth / screenScale);\n    screenCanvas.height = mathMax(gameHeight, screenHeight / screenScale);\n\n    screenCanvas.style.width = `${screenWidth}px`;\n    screenCanvas.style.height = `${screenHeight}px`;\n\n    screenOffset.x = mathFloor((screenCanvas.width - gameWidth) / 2);\n    screenOffset.y = 0;//mathFloor((screenCanvas.height - gameHeight) / 2);\n}\n\nexport const draw = () => {\n    context.clearRect(0, 0, screenCanvas.width, screenCanvas.height);\n    const stage = getStage();\n\n    context.save();\n    context.setTransform(1, 0, 0, 1, screenOffset.x, screenOffset.y);\n\n    context.save();\n    context.translate(mathRound(-stage.camera.x), mathRound(-stage.camera.y));\n\n    drawSprite(context, stage.back);\n\n    context.shadowBlur = 2;\n    context.shadowColor = \"black\";\n    for (const unit of units) {\n        drawSprite(context, unit.shadow);\n    }\n    for (const item of stage.items) {\n        if (item.shadow) {\n            drawSprite(context, item.shadow);\n        }\n    }\n    context.shadowBlur = 0;\n\n    entities.sort((a, b) => a.position.y == b.position.y ? b.position.x - a.position.x : a.position.y - b.position.y);\n\n    for (const entity of entities) {\n        drawSprite(context, entity.sprite);\n    }\n\n    // for (const item of stage.items) {\n    //     context.fillStyle = formatColor(0x55ff0000);\n    //     context.fillRect(\n    //         item.position.x + item.bounds.x,\n    //         item.position.y + item.bounds.y,\n    //         item.bounds.w,\n    //         item.bounds.h,\n    //     );\n    // }\n\n    for (const effect of effects) {\n        drawSprite(context, effect.sprite);\n    }\n\n    context.restore();\n\n    context.fillStyle = \"black\";\n    if (screenCanvas.width < screenCanvas.height) {\n        context.fillRect(0, - screenOffset.y, gameWidth, screenOffset.y);\n        context.fillRect(0, gameHeight, gameWidth, gameHeight);\n    } else {\n        context.fillRect(- screenOffset.x, 0, screenOffset.x, gameWidth);\n        context.fillRect(gameWidth, 0, gameWidth, gameHeight);\n    }\n\n    drawUI();\n\n    context.restore();\n\n    drawDebug();\n\n    // drawText(\n    //     65, 0,\n    //     'BLACK KATE',\n    //     0xffffff\n    // );\n\n    // for (const touchId in touches) {\n    //     const touch = touches[touchId];\n    //     context.fillStyle = \"red\";\n    //     context.fillRect(touch.x, touch.y, 10, 10);\n    // }\n\n    if (heroInputType == HeroInputType.TouchJoystick) {\n        context.strokeStyle = formatColor(0x99ffffff);\n        context.lineWidth = 2;\n\n        context.beginPath();\n        context.arc(mathRound(joystick.move.x), mathRound(joystick.move.y), joystick.moveRadius, 0, mathPI2);\n        context.closePath();\n        context.stroke();\n\n        if (joystick.moveId != -1) {\n            context.beginPath();\n            context.arc(mathRound(joystick.moveStick.x), mathRound(joystick.moveStick.y), joystick.moveStickRadius, 0, mathPI2);\n            context.closePath();\n            context.stroke();\n        }\n\n        context.strokeStyle = formatColor(0x99ff0000);\n        context.lineWidth = 2;\n\n        context.beginPath();\n        context.arc(mathRound(joystick.attack.x), mathRound(joystick.attack.y), joystick.attackRadius, 0, mathPI2);\n        context.closePath();\n        context.stroke();\n        if (joystick.attackId != -1) {\n            context.fillStyle = formatColor(0x33ff0000);\n            context.fill();\n        }\n    }\n\n\n}\n\nconst drawDebug = () => {\n    if (DEBUG) {\n        context.shadowBlur = 3;\n        context.shadowColor = \"black\";\n\n        const frameTime = (now() - nowMS).toFixed();\n        const fps = (1 / deltaS).toFixed();\n\n        drawText(\n            3, screenCanvas.height - 8 - 3,\n            `FPS ${fps} TIME ${frameTime}`,\n            0xffffffff\n        );\n\n        context.shadowBlur = 0;\n\n        // const musicVolume = mathRound(musicGainNode.gain.value * 100);\n        // const effectVolume = mathRound(effectGainNode.gain.value * 100);\n\n        // drawText(\n        //     3, 3 + 16,\n        //     `MUSIC ${musicVolume}`,\n        //     0xff00ffff\n        // );\n\n        // drawText(\n        //     3, 3 + 32,\n        //     `EFFECT ${effectVolume}`,\n        //     0xffff00ff\n        // );\n    }\n}\n\nconst drawText = (x: number, y: number, text: string, color: number) => {\n    for (let i = 0; i < text.length; i++) {\n        const code = text[i].toUpperCase().charCodeAt(0);\n        const id = getIdByCharCode(code);\n        if (id !== undefined) {\n            const char = getColoredImage(id, color);\n            let image = images[char];\n            if (image !== undefined) {\n                drawImage(context, image, x + i * 8, y);\n            }\n        }\n    }\n}\n\nconst drawUIText = (x: number, y: number, text: string, color: number) => {\n    drawText(x - 1, y - 1, text, 0xff000000);\n    drawText(x + 1, y - 1, text, 0xff000000);\n    drawText(x + 1, y + 1, text, 0xff000000);\n    drawText(x + 1, y - 1, text, 0xff000000);\n    drawText(x, y, text, color);\n}\n\nconst drawUI = () => {\n    switch (game.state) {\n        case GameState.Game:\n            const hero = getHero();\n            const health = limit(0, mathRound(hero.config.health), mathRound(hero.health));\n            const healthText = `${hero.config.name} ${health}`;\n            drawUIText(5, 5, healthText, 0xff99ff99);\n\n            const level = getLevel();\n            const levelText = `LEVEL ${level}`;\n            const levelWidth = levelText.length * 8;\n            drawUIText(gameWidth - levelWidth - 5, 5, levelText, 0xffffff99);\n\n            const eneies = [...mobs];\n            eneies.sort((a, b) => a.health - b.health);\n\n            if (eneies.length >= 1) {\n                const attacker = eneies[0];\n                const health = limit(0, mathRound(attacker.config.health), mathRound(attacker.health));\n                const healthText = `${attacker.config.name} ${health}`;\n                drawUIText(5, gameHeight - 5 - 8, healthText, 0xffff9999);\n            }\n\n            if (eneies.length >= 2) {\n                const attacker = eneies[1];\n                const health = limit(0, mathRound(attacker.config.health), mathRound(attacker.health));\n                const healthText = `${attacker.config.name} ${health}`;\n                drawUIText(gameWidth - 5 - healthText.length * 8, gameHeight - 5 - 8, healthText, 0xffff9999);\n            }\n            break;\n\n        case GameState.GameOver:\n            drawBack(0x99660000);\n            const gameOverText = 'GAME OVER';\n            drawUIText(\n                (gameWidth - gameOverText.length * 8) / 2,\n                (gameHeight - 8) / 2,\n                gameOverText,\n                0xffffffff\n            );\n\n            drawPressAny();\n            break;\n\n        case GameState.GameWin:\n            drawBack(0x99006600);\n\n            const gameWinText = 'CONGRATULATIONS!';\n            drawUIText(\n                (gameWidth - gameWinText.length * 8) / 2,\n                (gameHeight - 8) / 2,\n                gameWinText,\n                0xffffffff\n            );\n\n            drawPressAny();\n            break;\n    }\n}\n\nconst drawPressAny = () => {\n    const pressAny1 = hasTouch ? 'TAP TO START AGAIN' : 'PRESS ANY KEY';\n    const pressAny2 = hasTouch ? '' : 'TO START AGAIN';\n    drawUIText(\n        (gameWidth - pressAny1.length * 8) / 2,\n        (gameHeight - 8) / 2 + 64,\n        pressAny1,\n        0xffffffff\n    );\n    drawUIText(\n        (gameWidth - pressAny2.length * 8) / 2,\n        (gameHeight - 8) / 2 + 76,\n        pressAny2,\n        0xffffffff\n    );\n}\n\nconst drawBack = (color: number) => {\n    context.fillStyle = formatColor(color);\n    context.fillRect(0, 0, screenCanvas.width, screenCanvas.height);\n}", "import { screenCanvas, screenOffset, screenScale } from \"./graphics\";\nimport { unlockAudio } from \"../resources/sound/audio\";\nimport { domDocument } from \"../utils/browser\";\nimport { HeroInputType, setHeroInputType } from \"../game/hero\";\n\nexport interface TouchData {\n    x: number,\n    y: number,\n    started: boolean\n}\n\nexport const touches: { [key: string]: TouchData } = {};\n\nconst keys: { [key: string]: boolean } = {};\nexport let anyKey = false;\n\nexport const setAnyKey = (value: boolean) => anyKey = value;\n\nexport const initInput = () => {\n    domDocument.onkeydown = (e) => {\n        // console.log(e.keyCode);\n        unlockAudio();\n        anyKey = true;\n        keys[e.keyCode] = true;\n        e.preventDefault();\n    }\n\n    domDocument.onkeyup = (e) => {\n        anyKey = false;\n        unpressKey(e.keyCode);\n        e.preventDefault();\n    }\n\n    screenCanvas.onmousedown = (e) => {\n        anyKey = true;\n        unlockAudio();\n        e.preventDefault();\n    }\n\n    screenCanvas.onmousemove = (e) => {\n        e.preventDefault();\n    }\n\n    screenCanvas.onmouseup = (e) => {\n        anyKey = false;\n        e.preventDefault();\n    }\n\n    const forTouch = (e: TouchEvent, handler: (id: number, t: TouchData) => void) => {\n        const changedTouches = e.changedTouches;\n        for (let i = 0; i < changedTouches.length; i++) {\n            const { clientX, clientY, identifier } = changedTouches[i];\n            handler(\n                identifier,\n                {\n                    x: clientX / screenScale,\n                    y: clientY / screenScale,\n                    started: false,\n                }\n            );\n        }\n        e.preventDefault();\n    };\n\n    screenCanvas.ontouchstart = (e) => {\n        anyKey = true;\n        setHeroInputType(HeroInputType.TouchJoystick);\n        forTouch(e, (id, t) => { touches[id] = t; t.started = true; });\n    };\n\n    screenCanvas.ontouchmove = (e) => {\n        forTouch(e, (id, t) => { touches[id] = t; });\n    };\n\n    screenCanvas.ontouchend = (e) => {\n        anyKey = false;\n        forTouch(e, (id, t) => { delete touches[id]; });\n    };\n\n    screenCanvas.ontouchcancel = (e) => {\n        forTouch(e, (id, t) => { delete touches[id]; });\n    };\n}\n\nexport const enum Key {\n    Up = 38,\n    Down = 40,\n    Left = 37,\n    Right = 39,\n    A = 65,\n    D = 68,\n    W = 87,\n    S = 83,\n    Z = 90,\n    X = 88,\n    U = 85,\n    I = 73,\n    J = 74,\n    K = 75,\n    Enter = 13,\n    Space = 32,\n}\n\nexport const isKeyPressed = (code: Key): boolean | undefined => keys[code];\nexport const unpressKey = (code: Key) => delete keys[code];", "import { createContext, getCanvas, setHeight, setWidth } from \"../utils/browser\";\nimport { images } from \"./images\";\n\nexport async function loadResources() {\n    const response = await fetch('r');\n    const buffer = await response.arrayBuffer();\n\n    const stream = new Uint8Array(buffer);\n\n    let p = 0;\n\n    const palletteSize = stream[p++] * 4;\n    const pallette = stream.slice(p, p + palletteSize);\n    p += palletteSize;\n\n    let imagesLength = stream[p++];\n\n    while (imagesLength--) {\n        const width = stream[p++];\n        const height = stream[p++];\n\n        const imageSize = width * height;\n\n        const pixels = stream.slice(p, p + imageSize);\n        p += imageSize;\n\n        let context = createContext();\n        setWidth(context, width);\n        setHeight(context, height);\n\n        let imageData = context.getImageData(0, 0, width, height);\n\n        for (let p = 0; p < pixels.length; p++) {\n            let c = pixels[p] << 2;\n\n            imageData.data.set(pallette.slice(c, c + 4), p << 2);\n        }\n\n        context.putImageData(imageData, 0, 0);\n\n        images.push(getCanvas(context));\n    }\n}", "import { Item } from \"../engine/item\";\nimport { drawSprite, drawSprites } from \"../engine/sprite\";\nimport { Stage } from \"../engine/stage\";\nimport { barBigItems0, barFloor0, barFloor1, barFloor2, barFloor3, barItem0, barItem1, barWall0, barWall1, barWall10, barWall2, barWall3, barWall4, barWall5, barWall6, barWall7, barWall8, barWall9, bottle0, bottle1, bottle2, bottle3, bottle4, bottle5, trash0, trash1, trash2, trash3, trash4 } from \"../resources/id\";\nimport { addImage, addNoiseToImage, images } from \"../resources/images\";\nimport { createCanvas, drawImage, getContext } from \"../utils/browser\"\nimport { drawCommands, drawGradientV, generateRandomTileImage, generateTileImage, noise } from \"../utils/image\";\nimport { chance, mathRound, randomChancesSelect, randomRange, randomSelect } from \"../utils/math\";\nimport { randomMobConfig } from \"./mob\";\n\nexport const getBarStage = (): Stage => {\n    const floorWidth = 400;\n    const floorHeight = 150;\n    const wallHeight = 95;\n\n    addNoiseToImage(bottle0, 20);\n    addNoiseToImage(bottle1, 20);\n    addNoiseToImage(bottle2, 20);\n    addNoiseToImage(bottle3, 20);\n    addNoiseToImage(bottle4, 20);\n    addNoiseToImage(bottle5, 20);\n\n    const floorCanvas = generateFloorImage(floorWidth, floorHeight);\n    const wallCanvas = generateWallImage(floorWidth, wallHeight);\n\n    const backCanvas = createCanvas();\n    const backContext = getContext(backCanvas);\n    backCanvas.width = floorWidth;\n    backCanvas.height = floorHeight + wallHeight;\n    drawImage(backContext, wallCanvas, 0, 0);\n    drawImage(backContext, floorCanvas, 0, wallHeight);\n\n    const back = addImage(backCanvas);\n\n    const borderX = 10;\n    const borderY = 5;\n\n    addNoiseToImage(barItem0);\n\n    const items: Array<Item> = [];\n\n    for (let i = 0; i < 10; i++) {\n        addBarCounter(items, 90 + i * 21, 120);\n    }\n\n    addBarCounter(items, 84, 114);\n    addBarCounter(items, 273, 114);\n\n    addNoiseToImage(barItem1);\n\n    for (let i = 0; i < 10; i++) {\n        addBarStool(items, 100 + i * 20, 130);\n    }\n\n    addNoiseToImage(barBigItems0);\n\n    for (let i = 0; i < 6; i++) {\n        addTableArmchair(items, 80 + i * 45, 240);\n    }\n\n    return {\n        bounds: {\n            x: borderX,\n            y: wallHeight + borderY,\n            w: floorWidth - borderX * 2,\n            h: floorHeight - borderY * 2,\n        },\n        back: { image: back },\n        camera: { x: 0, y: 0 },\n        items: items\n    }\n}\n\nconst addBarCounter = (items: Array<Item>, x: number, y: number) => {\n    items.push(\n        {\n            sprite: { image: barItem0 },\n            position: { x, y },\n            offset: { x: 16, y: 32 },\n            bounds: { x: -16, y: -10, w: 32, h: 12 }\n        },\n    );\n\n    if (chance(0.5)) {\n        items.push(\n            {\n                sprite: { image: randomSelect([bottle0, bottle1, bottle2, bottle3, bottle4, bottle5]) },\n                position: { x: x, y: y },\n                offset: { x: 4 + randomRange(-1, 1), y: 16 + 25 + randomRange(-1, 1) },\n                bounds: { x: 0, y: 0, w: 0, h: 0 },\n            },\n        )\n    }\n\n    if (chance(0.5)) {\n        items.push(\n            {\n                sprite: { image: randomSelect([bottle0, bottle1, bottle2, bottle3, bottle4, bottle5]) },\n                position: { x: x, y: y },\n                offset: { x: 0 + randomRange(-1, 1), y: 16 + 27 + randomRange(-1, 1) },\n                bounds: { x: 0, y: 0, w: 0, h: 0 },\n            },\n        )\n    }\n}\n\nconst addBarStool = (items: Array<Item>, x: number, y: number) => {\n    items.push(\n        {\n            sprite: { image: barItem1 },\n            position: { x, y },\n            offset: { x: 16, y: 32 },\n            bounds: { x: -6, y: -7, w: 12, h: 10 },\n        },\n    );\n}\n\nconst addTableArmchair = (items: Array<Item>, x: number, y: number) => {\n    items.push(\n        {\n            sprite: { image: barBigItems0 },\n            position: { x, y },\n            offset: { x: 32, y: 64 },\n            bounds: { x: -34, y: -22, w: 68, h: 25 },\n        },\n    );\n\n    if (chance(0.9)) {\n        const config = randomMobConfig();\n        const offset = mathRound(randomRange(0, 2));\n        items.push(\n            {\n                sprite: { image: config.animations.sit[0].image },\n                position: { x: x + offset, y: y + offset },\n                offset: { x: 12, y: 50 },\n                bounds: { x: 0, y: 0, w: 10, h: 10 },\n            },\n        );\n\n        items.push(\n            {\n                sprite: { image: randomSelect([bottle0, bottle1, bottle2, bottle3, bottle4, bottle5]) },\n                position: { x: x, y: y },\n                offset: { x: 8 + randomRange(-1, 1), y: 16 + 20 + randomRange(-1, 1) },\n                bounds: { x: 0, y: 0, w: 0, h: 0 },\n            },\n        );\n    }\n\n\n}\n\nconst generateFloorImage = (width: number, height: number): HTMLCanvasElement => {\n    const image = generateRandomTileImage(width, height, [barFloor0, barFloor1, barFloor2, barFloor3], [3, 2, 1, 1]);\n    const context = getContext(image);\n\n    const border = 30;\n\n    context.fillStyle = \"black\";\n    context.fillRect(0, 0, image.width, 1);\n\n    drawGradientV(context, 0, 0, image.width, border, 0x77000000, 0);\n    drawGradientV(context, 0, image.height - border, image.width, border, 0, 0x77000000);\n\n    let trashCount = 150;\n\n    while (trashCount-- > 0) {\n        context.globalAlpha = randomRange(0.1, 0.3);\n        const trash = images[randomSelect([trash0, trash1, trash2, trash3, trash4])];\n        drawImage(context, trash, randomRange(0, width), randomRange(0, height));\n    }\n\n    noise(10, image);\n\n    return image;\n}\n\nconst generateWallImage = (width: number, height: number): HTMLCanvasElement => {\n    const image = generateTileImage(width, height, barWall0);\n    const context = getContext(image);\n\n    const columns = [barWall1, barWall2, barWall3];\n    const columnsChances = [2, 1, 1];\n\n    const columnStep = 70;\n\n    for (let x = 0; x < width; x += columnStep) {\n        for (let y = 0; y < width; y += 16) {\n            const columnImage = images[randomChancesSelect(columns, columnsChances)];\n            drawImage(context, columnImage, x, y);\n        }\n    }\n\n    drawCommands(\n        [\n            barWall4, columnStep - 13, 0,\n            barWall4, columnStep * 3 - 13, 0,\n            barWall4, columnStep * 6 - 13, 0,\n\n            barWall5, columnStep * 2 - 17, 0,\n            barWall5, columnStep * 5 - 30, 0\n        ],\n        context,\n    );\n\n    drawShelf(context, 89, 30);\n    drawShelf(context, 159, 30);\n    drawShelf(context, 229, 30);\n\n    const border = 40;\n    drawGradientV(context, 0, image.height - border, image.width, border, 0, 0x77000000);\n\n    noise(10, image);\n\n    return image;\n}\n\nconst drawBottles = (context: CanvasRenderingContext2D, bottles: Array<number>, x: number, y: number) => {\n    for (let i = 0; i < 6; i++) {\n        const image = randomSelect(bottles);\n        drawSprite(context, { image: image, x: i * 7 + x, y });\n    }\n}\n\nfunction drawShelf(context: CanvasRenderingContext2D, x: number, y: number) {\n    context.setTransform(1, 0, 0, 1, x, y);\n\n    drawSprites(context, [\n        { image: barWall6 },\n        { image: barWall7, y: 16 },\n        { image: barWall6, y: 32, flipY: true },\n        { image: barWall8, x: 16 },\n        { image: barWall6, x: 32, flipX: true },\n        { image: barWall7, x: 32, y: 16, flipX: true },\n        { image: barWall6, x: 32, y: 32, flipY: true, flipX: true },\n        { image: barWall9, x: 16, y: 16 },\n        { image: barWall8, x: 16, y: 32, flipY: true },\n        { image: barWall10, x: 3, y: 15 },\n        { image: barWall10, x: 16, y: 15 },\n        { image: barWall10, x: 29, y: 15 },\n        { image: barWall10, x: 3, y: 30 },\n        { image: barWall10, x: 16, y: 30 },\n        { image: barWall10, x: 29, y: 30 },\n    ]);\n\n    drawBottles(context, [bottle0, bottle1, bottle2], -1, -1);\n    drawBottles(context, [bottle2, bottle3, bottle1], -1, 14);\n    drawBottles(context, [bottle4], -1, 28);\n\n    context.resetTransform();\n}\n\n", "import { clearEntities } from \"../engine/entity\";\nimport { getStage, setStage } from \"../engine/stage\"\nimport { clearUnits } from \"../engine/unit\";\nimport { createHero, getHero } from \"./hero\";\nimport { getBarStage } from \"./bar\"\nimport { initWaves } from \"../engine/waves\";\nimport { anyKey } from \"../engine/input\";\nimport { game, GameState } from \"../engine/game\";\nimport { deltaS } from \"../utils/time\";\n\nexport const start = () => {\n    clearUnits();\n    clearEntities();\n    initWaves();\n\n    setStage(getBarStage());\n\n    createHero();\n\n    const stage = getStage();\n\n    const hero = getHero();\n    hero.position.x = stage.bounds.x + 50;\n    hero.position.y = stage.bounds.y + stage.bounds.h / 2;\n}\n\nexport const startAgain = () => {\n    game.timout += deltaS;\n    if (game.timout > 3) {\n        if (anyKey) {\n            game.state = GameState.Game;\n            start();\n        }\n    }\n}", "import { gameHeight, gameWidth } from \"../engine/graphics\";\nimport { getStage } from \"../engine/stage\";\nimport { getHero } from \"./hero\";\n\nexport const updateCameraPosition = () => {\n    const stage = getStage();\n    const hero = getHero();\n\n    stage.camera.x = hero.position.x - gameWidth / 2;\n    stage.camera.y = hero.position.y - gameHeight / 2;\n}", "import { Box2, Vector2 } from \"../utils/geom\";\nimport { mathMin } from \"../utils/math\";\nimport { Entity } from \"./entity\";\nimport { Sprite } from \"./sprite\";\nimport { getStage } from \"./stage\";\nimport { units } from \"./unit\";\n\nexport interface Item extends Entity {\n    offset: Vector2,\n    bounds: Box2,\n    shadow?: Sprite,\n}\n\nexport const collisionItems = () => {\n    const stage = getStage();\n\n    for (const unit of units) {\n        for (const item of stage.items) {\n            if (item.bounds.w == 0 && item.bounds.h == 0) {\n                continue;\n            }\n\n            let minX = item.position.x + item.bounds.x;\n            let minY = item.position.y + item.bounds.y;\n\n            let maxX = minX + item.bounds.w;\n            let maxY = minY + item.bounds.h;\n\n            const left = unit.position.x - minX;\n            const top = unit.position.y - minY;\n            const right = maxX - unit.position.x;\n            const bottom = maxY - unit.position.y;\n\n            if (left > 0 && top > 0 && right > 0 && bottom > 0) {\n                const min = mathMin(left, top, right, bottom);\n\n                if (left == min) {\n                    unit.position.x -= left;\n                }\n\n                if (top == min) {\n                    unit.position.y -= top;\n                }\n\n                if (right == min) {\n                    unit.position.x += right;\n                }\n\n                if (bottom == min) {\n                    unit.position.y += bottom;\n                }\n            }\n        }\n    }\n}", "import { isKeyPressed, Key } from \"../../engine/input\"\nimport { limit } from \"../../utils/math\";\nimport { effectsGain, musicGainNode } from \"./audio\"\n\nexport const controlAudio = () => {\n    const step = 0.01;\n\n    if (isKeyPressed(Key.U)) {\n        musicGainNode.gain.value -= step;\n    }\n\n    if (isKeyPressed(Key.I)) {\n        musicGainNode.gain.value += step;\n    }\n\n    musicGainNode.gain.value = limit(0, 1, musicGainNode.gain.value);\n\n    if (isKeyPressed(Key.J)) {\n        effectsGain.value -= step;\n    }\n\n    if (isKeyPressed(Key.K)) {\n        effectsGain.value += step;\n    }\n\n    effectsGain.value = limit(0, 1, effectsGain.value);\n}\n", "import { DEBUG } from \"./debug\";\nimport { initInput } from \"./engine/input\";\nimport { applyUnitsDamage, limitUnitsPositions, updateUnits, updateUnitsSpritePositions } from \"./engine/unit\";\nimport { updateHero } from \"./game/hero\";\nimport { draw, updateSize } from \"./engine/graphics\";\nimport { loadResources } from \"./resources/loader\";\nimport { playMusic } from \"./resources/sound/audio\";\nimport { calculateTime } from \"./utils/time\";\nimport { start, startAgain } from \"./game/start\";\nimport { updateCameraPosition } from \"./game/game\";\nimport { limitCamera } from \"./engine/stage\";\nimport { generateMobsConfigs, updateMobs } from \"./game/mob\";\nimport { updateEffects } from \"./engine/effect\";\nimport { collisionItems } from \"./engine/item\";\nimport { controlAudio } from \"./resources/sound/control\";\nimport { generateMobs } from \"./engine/waves\";\nimport { updateJoystick } from \"./engine/joystick\";\nimport { updateGamepad } from \"./engine/gamepad\";\nimport { game, GameState } from \"./engine/game\";\n\nif (DEBUG) {\n    console.warn(\"debug mode\");\n    new EventSource('/esbuild').addEventListener('change', () => location.reload())\n}\n\nconst update = () => {\n    calculateTime();\n    updateSize();\n    updateGamepad();\n\n    switch (game.state) {\n        case GameState.Game:\n            updateJoystick();\n            generateMobs();\n            updateHero();\n            updateMobs();\n            updateUnits();\n            collisionItems();\n            applyUnitsDamage();\n            limitUnitsPositions();\n            updateEffects();\n            break;\n\n        default:\n            startAgain();\n            break;\n    }\n\n    updateCameraPosition();\n    limitCamera();\n    updateUnitsSpritePositions();\n\n    draw();\n\n    controlAudio();\n\n    requestAnimationFrame(update);\n};\n\nasync function main() {\n    await loadResources();\n    playMusic();\n    initInput();\n    generateMobsConfigs();\n    start();\n    update();\n}\n\nmain();"],
  "mappings": "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AAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAG,EAAG,CAAC,EAAG,CAAC,EAAG,GAAI,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAA,EAAK,CAAC,EAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAA,CAAG,EAAG,CAAC,CAAC,CAAC,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAA,EAAK,CAAC,EAAG,GAAI,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAG,EAAG,CAAC,EAAG,CAAC,EAAG,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,EAAE,EAAG,CAAC,EAAG,GAAG,CAAE,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,GAAG,CAAG,GAAG,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAG,GAAG,CAAA,CAAG,EAAG,CAAC,CAAC,CAAE,IAAK,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAA,EAAK,CAAC,EAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAG,EAAG,CAAC,EAAG,CAAC,EAAG,GAAI,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAG,CAAA,EAAK,CAAC,EAAG,GAAI,GAAG,CAAG,GAAI,GAAI,GAAI,GAAG,CAAE,CAAG,GAAI,GAAG,CAAG,GAAI,GAAI,GAAG,CAAG,GAAI,GAAG,CAAG,GAAI,GAAI,GAAI,GAAI,GAAG,CAAG,GAAI,GAAI,GAAI,GAAG,CAAG,GAAI,GAAI,GAAI,GAAG,CAAG,GAAI,GAAI,GAAG,CAAG,GAAG,CAAG,GAAI,GAAI,GAAG,CAAG,GAAG,CAAG,GAAG,CAAG,GAAI,GAAI,GAAI,GAAI,GAAG,CAAE,CAAG,GAAI,GAAI,GAAG,CAAG,GAAI,GAAI,GAAI,GAAI,EAAE,CAAC,EAAG,CAAC,CAAC,CAAE,IAAK,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAA,EAAK,CAAC,EAAG,GAAI,EAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,EAAE,CAAG,EAAE,CAAE,CAAG,EAAG,EAAE,CAAG,EAAG,EAAG,EAAG,CAAC,EAAG,CAAC,EAAG,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAG,CAAG,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAG,GAAI,GAAI,EAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAA,EAAK,CAAC,EAAG,GAAG,CAAE,CAAE,CAAE,CAAG,GAAG,CAAE,CAAG,GAAG,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAG,GAAI,GAAG,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAE,CAAG,GAAI,GAAI,GAAG,CAAE,CAAG,GAAI,GAAG,CAAE,CAAE,CAAG,GAAG,CAAE,CAAE,CAAG,GAAG,CAAA,CAAG,CAAC,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAAE,CAAA,ECCn+F,IAAMC,GAAO,IAAI,IAAMC,GAAMC,GAAM,GAAG,CAAC,CAAC,EAGlCD,GAAQ,IAAI,IAAK,CAAG,IAAI,EAAIE,EAAM,mBAAkB,EAAIC,EAAID,EAAM,aAAa,EAAE,OAAQ,EAAE,CAAC,EAAE,OAAQE,CAAK,EAAG,SAAE,IAAI,CAACC,EAAGC,IAAMH,EAAE,eAAeG,CAAC,EAAE,IAAID,CAAC,CAAC,EAAG,EAAE,OAASF,EAAuD,CAAE,EAG/NF,GAAQ,CAACM,EAAI,EAAGC,EAAI,IAAKC,EAAI,IAAKC,EAAI,EAAGC,EAAI,EAAGC,EAAI,GAAIC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGjB,EAAI,EAAGkB,EAAI,EAAGC,GAAI,EAAGC,GAAI,IAAK,CAAG,IAAIC,EAAI,EAAI,KAAK,GAAIC,GAAIZ,GAAK,IAAMW,EAAItB,GAAS,EAAGwB,IAAK,EAAIP,EAAI,EAAI,IAAMK,EAAI,EAAGG,GAAIpB,IAAM,EAAI,EAAID,EAAI,KAAK,OAAM,EAAKA,GAAKkB,EAAItB,EAAO0B,GAAI,CAAA,EAAIC,EAAI,EAAGC,GAAI,EAAGC,EAAI,EAAGC,EAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGjC,GAAI,EAAGkC,GAAGC,GAAiK,IAA9J5B,EAAI,GAAKN,EAAQM,EAAGc,IAAKpB,EAAOO,GAAKP,EAAOQ,GAAKR,EAAOC,GAAKD,EAAOY,GAAK,IAAMU,EAAItB,GAAS,EAAGiB,GAAKK,EAAItB,EAAOa,GAAKS,EAAItB,EAAOc,GAAKd,EAAOe,EAAIf,EAAQe,EAAI,EAAQmB,GAAI5B,EAAIc,GAAIb,EAAIC,EAAIP,EAAI,EAAG4B,EAAIK,GAAGR,GAAEG,GAAG,EAAI9B,GAAE,EAAEiC,IAAK,IAAMd,EAAI,KAAOnB,GAAIU,EAAI,EAAIA,EAAI,EAAIA,EAAI,EAAIA,EAAI,KAAK,KAAKkB,EAAIL,IAAM,CAAC,EAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAIK,CAAC,EAAG,CAAC,EAAG,EAAE,EAAI,GAAK,EAAIA,EAAIL,EAAI,EAAI,GAAK,EAAI,EAAI,EAAI,KAAK,IAAI,KAAK,MAAMK,EAAIL,CAAC,EAAIK,EAAIL,CAAC,EAAI,KAAK,IAAIK,CAAC,EAAG5B,IAAKgB,EAAI,EAAIM,GAAIA,GAAI,KAAK,IAAI,EAAI,KAAK,GAAKQ,EAAId,CAAC,EAAI,IAAM,EAAIhB,GAAI,EAAI,IAAM,KAAK,IAAIA,EAAC,GAAKW,EAAIP,EAAIgC,IAASN,EAAIvB,EAAIuB,EAAIvB,EAAIuB,EAAIvB,EAAIc,GAAI,GAAKS,EAAIvB,GAAKc,IAAK,EAAID,GAAKU,EAAIvB,EAAIc,GAAIb,EAAIY,EAAIU,EAAIK,GAAIjC,GAAKiC,GAAIL,EAAI5B,GAAKO,EAAIW,EAAI,GAAIpB,GAAIE,EAAIF,GAAI,GAAKE,EAAI4B,EAAI,GAAKA,EAAIK,GAAIjC,EAAI,GAAKiC,GAAIL,GAAK5B,GAAKyB,GAAEG,EAAI5B,EAAI,CAAC,EAAI,GAAKF,IAAIkC,IAAK5B,GAAKM,GAAKC,GAAK,KAAK,IAAIgB,GAAIX,EAAIO,EAAC,EAAGG,GAAKM,GAAIA,GAAIjB,GAAK,EAAI,KAAO,KAAK,IAAIa,CAAC,EAAI,GAAK,GAAID,IAAKK,GAAIA,GAAIjB,GAAK,EAAI,KAAO,KAAK,IAAIa,CAAC,GAAK,EAAI,GAAK,GAAIC,GAAK,EAAEA,EAAIhB,IAAMT,GAAKQ,EAAGY,IAAKZ,EAAGiB,EAAI,GAAI,CAACf,GAAK,EAAEgB,GAAIhB,IAAMV,EAAIoB,GAAGd,EAAIY,GAAGO,EAAIA,GAAK,GAAI,OAAOJ,EAAE,EAGlzCS,GAAQ,GAGRnC,EAAQ,MAGRF,EAAQ,IAAK,OAAO,cAAgB,oBAKpCsC,GAAQ,CAACC,EAAaC,EAAUC,EAAUC,EAAM,MAAO,CACzD,IAAIC,EACA,EACAC,EACAtC,EACAuC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAe,EACfC,GACAC,EAAe,CAAA,EACfC,GAAoB,CAAA,EACpBC,GAAqB,CAAA,EACrBC,GAAe,EACfC,GAAU,EACVC,EAAU,EACVC,GAAc,CAAA,EACdC,EAAa,MAAQtB,EAAM,IAAM,EAGrC,KAAOoB,EAASF,KAGZH,EAAe,CAACK,EAAUd,EAAeG,EAAQE,EAAkB,CAAC,EAGpEZ,EAAS,IAAI,CAACwB,EAAcC,KAAiB,CAWzC,IATAnB,EAAiBP,EAASyB,CAAY,EAAEL,EAAY,GAAK,CAAC,EAAG,EAAG,CAAC,EAGjEE,GAAW,CAAC,CAACtB,EAASyB,CAAY,EAAEL,EAAY,EAGhDJ,GAAmBH,GAAmBb,EAASyB,CAAY,EAAE,CAAC,EAAE,OAAS,EAAI,CAACjB,GAAgBgB,EAE9FV,EAAgBY,IAAiBzB,EAAS,OAAS,EAC9C,EAAI,EAAGnC,EAAI+C,EAAiB,EAAIN,EAAe,OAASO,EAAeN,EAAe,EAAE,EAAG,CAU5F,IAPAH,EAAOE,EAAe,CAAC,EAGvBE,EAAO,GAAKF,EAAe,OAASO,EAAgB,GAAKA,GACrDJ,IAAeH,EAAe,CAAC,GAAK,GAAKF,EAAO,EAG/CD,EAAI,EAAGA,EAAIoB,GAAchB,EAG1BJ,IAAMoB,EAAa,IAAMf,EAAOG,IAAgBA,EAAc,GAAK,GAAK,EAGxEN,GAAU,EAAIM,GAAeK,EAAaF,IAAc,EAAI,GAAK,EACjEG,GAAkBpD,CAAC,GAAKoD,GAAkBpD,CAAC,GAAK,GAAKwC,EAASe,GAAUf,EACxEa,GAAmBrD,CAAC,GAAKqD,GAAmBrD,GAAG,GAAK,GAAKwC,EAASe,GAAUf,EAI5ED,IAEAO,EAAcP,EAAO,EACrBgB,GAAUd,EAAe,CAAC,GAAK,GAC3BF,GAAQ,KAERY,EAAeM,GACX,CACIb,EAAaH,EAAeQ,GAAe,CAAC,GAAK,EACjDV,EACH,EACDkB,GAAY,CAACb,EAAYL,CAAI,CAAC,IAE9BF,EAAuB,CAAC,GAAGJ,EAAYW,CAAU,CAAC,EAElDP,EAAqB,CAAC,GAAKA,EAAqB,CAAC,GAAK,KAAQ,KAAOE,EAAO,IAAM,IAGlFA,EAAO,EAAI9C,GAAM,GAAG4C,CAAoB,EAAI,CAAA,IAI5D,CAGAU,EAAkBG,EACtB,CAAC,EAGL,MAAO,CAACE,GAAmBC,EAAkB,CACjD,ECjHO,IAAMQ,GAAgBC,EAAa,WAAU,EACpDD,GAAc,KAAK,MAAQ,GAEpB,IAAME,GAAc,CAAE,MAAO,EAAG,EAEjCC,GAAY,CAAC,CAAC,CAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,GAAG,CAAE,CAAE,CAAE,CAAG,GAAG,CAAG,GAAG,CAAG,IAAK,IAAI,CAAG,GAAG,EACpFC,GAAa,CAAC,CAAE,EAAG,GAAG,CAAG,IAAK,IAAK,EAAG,IAAK,EAAG,IAAK,IAAI,CAAE,CAAG,IAAI,CAAG,GAAG,CAAG,GAAI,GAAG,EAChFC,GAAe,CAAC,GAAI,GAAI,IAAK,GAAI,IAAI,CAAE,CAAG,IAAK,IAAM,IAAK,IAAK,GAAG,CAAG,IAAI,CAAE,CAAE,CAAG,GAAI,GAAG,CAAG,GAAG,EAC7FC,GAAc,CAAC,IAAK,EAAG,SAAU,IAAK,GAAI,IAAK,EAAG,IAAI,CAAG,IAAK,CAAE,CAAE,CAAG,GAAG,CAAG,GAAI,IAAK,IAAK,GAAG,EAC5FC,GAAY,CAAC,EAAE,CAAG,GAAI,IAAK,IAAK,IAAI,CAAG,IAAK,EAAE,CAAE,CAAE,CAAE,CAAG,IAAI,CAAG,GAAI,IAAK,IAAK,GAAG,EAGrF,IAAMC,GAAc,CAACC,EAAQ,KAAS,EAChCA,GAASC,EAAa,QAAU,cAClCA,EAAa,OAAM,EAAG,MAAK,CAE/B,EAEMC,GAAY,SAAW,CAC3B,IAAMC,EAAS,MAAMC,GAAWC,EAAU,EACxCC,EAAOC,GAAM,GAAGJ,CAAM,EAExBG,EAAK,QAAQE,EAAa,EAC1BF,EAAK,KAAO,GACZA,EAAK,MAAK,EAEVE,GAAc,QAAQP,EAAM,WAAW,EAEvCA,EAAM,OAAM,CACd,EAEMG,GAAa,MAAOK,IACxB,MAAMC,GAAQ,EAAE,EACTC,GAAM,GAAGF,CAAI,GAGhBG,GAAa,CAACC,EAAaC,EAAiB,IAAK,CACrD,IAAMC,EAAiBd,EAAa,WAAU,EAC9Cc,EAAe,KAAK,MAAQC,GAAY,MAAQF,EAEhD,IAAMR,EAAOW,GAAK,GAAGJ,CAAM,EAC3BP,EAAK,QAAQS,CAAc,EAC3BT,EAAK,KAAO,GAEZS,EAAe,QAAQd,EAAM,WAAW,EAExCK,EAAK,MAAK,CACZ,EAEaY,GAAa,IAAMN,GAAWO,GAAc,EAAG,EAC/CC,GAAU,IAAMR,GAAWS,EAAS,EACpCC,GAAW,IAAMV,GAAWW,EAAU,EACtCC,GAAY,IAAMZ,GAAWa,GAAa,GAAG,EAC7CC,GAAU,IAAMd,GAAWe,GAAW,GAAG,EClChD,IAAWC,GAAjB,SAAiBA,EAAO,CACPA,EAAA,UAAaC,GAAc,CACpC,IAAMC,EAAIF,EAAA,OAAOC,CAAC,EACdC,EAAI,IACJD,EAAE,GAAKC,EACPD,EAAE,GAAKC,EAEf,EAEaF,EAAA,OAAUC,GACZE,GAAUF,EAAE,EAAGA,EAAE,CAAC,EAGhBD,EAAA,SAAW,CAACC,EAAYG,IAC1BD,GAAUF,EAAE,EAAIG,EAAE,EAAGH,EAAE,EAAIG,EAAE,CAAC,EAG5BJ,EAAA,IAAM,CAACC,EAAYG,KACrB,CAAE,EAAGH,EAAE,EAAIG,EAAE,EAAG,EAAGH,EAAE,EAAIG,EAAE,CAAC,GAG1BJ,EAAA,SAAW,CAACC,EAAYG,KAC1B,CAAE,EAAGH,EAAE,EAAIG,EAAE,EAAG,EAAGH,EAAE,EAAIG,EAAE,CAAC,GAG1BJ,EAAA,MAAQ,CAACC,EAAYI,KACvB,CAAE,EAAGJ,EAAE,EAAII,EAAG,EAAGJ,EAAE,EAAII,CAAC,EAEvC,GA5BiBL,IAAAA,EAAO,CAAA,EAAA,EAkClB,IAAWM,IAAjB,SAAiBA,EAAI,CACJA,EAAA,SAAW,CAACC,EAASC,IACvBD,EAAE,EAAIC,EAAE,GAAKA,EAAE,EAAID,EAAE,EAAIA,EAAE,GAC9BA,EAAE,EAAIC,EAAE,GAAKA,EAAE,EAAID,EAAE,EAAIA,EAAE,CAEvC,GALiBD,KAAAA,GAAI,CAAA,EAAA,ECvDd,IAAIG,GAAgBC,GAAG,EACnBC,EAAiB,EAEfC,GAAgB,IAAK,CAC9B,IAAMC,EAAQJ,GACdA,GAAQC,GAAG,EACXC,GAAUF,GAAQI,GAAS,GAC/B,ECJO,IAAMC,GAAqBC,GAA4C,CAC1E,IAAIC,EAAO,EAEX,QAAWC,KAASF,EAChBC,GAAQC,EAAM,KAGlB,OAAOD,CACX,EAEaE,GAAgB,CAACH,EAAkCI,IAAiC,CAC7F,IAAIH,EAAO,EAELI,EAAYN,GAAkBC,CAAS,EAC7CI,GAAiBC,EAEjB,QAASC,EAAI,EAAGA,EAAIN,EAAU,OAAQM,IAAK,CACvC,IAAMJ,EAAQF,EAAUM,CAAC,EAGzB,GAFAL,GAAQC,EAAM,KAEVE,GAAiBH,EACjB,OAAOC,EAAM,KAErB,CAEA,MAAO,EACX,EAEaK,GAAsB,CAACP,EAAkCI,IAAkC,CACpG,IAAMC,EAAYN,GAAkBC,CAAS,EAC7C,OAAOI,GAAiBC,CAC5B,EC9BO,IAAMG,GAAyB,CAAA,EAazBC,GAA0B,CACnC,UAAW,CACP,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,GAE5B,OAAQ,CAAE,EAAG,GAAI,EAAG,EAAE,GAGbC,GAA8B,CACvC,UAAW,CACP,CAAE,MAAO,GAAU,KAAM,EAAG,EAC5B,CAAE,MAAO,GAAU,KAAM,EAAG,EAC5B,CAAE,MAAO,GAAU,KAAM,EAAG,GAEhC,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAC,GAGXC,GAA6B,CACtC,UAAW,CACP,CAAE,MAAO,GAAS,KAAM,EAAG,EAC3B,CAAE,MAAO,GAAS,KAAM,EAAG,EAC3B,CAAE,MAAO,GAAS,KAAM,EAAG,GAE/B,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAC,GAGXC,GAAgBC,GAAkB,CAC3C,IAAMC,EAAQN,GAAQ,QAAQK,CAAM,EAChCC,GAAS,IACTN,GAAQ,OAAOM,EAAO,CAAC,CAE/B,EAEaC,GAAY,CAACC,EAAsBC,IAAqB,CACjET,GAAQ,KAAK,CACT,UAAWQ,EAAO,UAClB,cAAe,EACf,OAAQ,CACJ,MAAO,GACP,EAAGC,EAAS,EAAID,EAAO,OAAO,EAC9B,EAAGC,EAAS,EAAID,EAAO,OAAO,GAErC,CACL,EAEaE,GAAgB,IAAK,CAC9B,QAAWL,KAAUL,GAAS,CAC1B,IAAMW,EAAWC,GAAkBP,EAAO,SAAS,EACnDA,EAAO,eAAiBQ,EACpBR,EAAO,cAAgBM,EACvBP,GAAaC,CAAM,EAEnBA,EAAO,OAAO,MAAQS,GAAcT,EAAO,UAAWA,EAAO,aAAa,CAElF,CACJ,ECnEO,IAAMU,EAA0B,CAAA,EAE1BC,GAAgBC,GAAkB,CAC3C,IAAMC,EAAQH,EAAS,QAAQE,CAAM,EACjCC,GAAS,IACTH,EAAS,OAAOG,EAAO,CAAC,CAEhC,EAEaC,GAAgB,IAAK,CAC9BJ,EAAS,OAAO,EAAGA,EAAS,MAAM,CACtC,ECLA,IAAIK,GAESC,EAAW,IAAMD,GAEjBE,GAAYC,GAAgB,CACrCH,GAAQG,EAER,QAAWC,KAAQJ,GAAM,MACrBI,EAAK,OAAO,EAAIA,EAAK,SAAS,EAAIA,EAAK,OAAO,EAC9CA,EAAK,OAAO,EAAIA,EAAK,SAAS,EAAIA,EAAK,OAAO,EAE1CA,EAAK,SACLA,EAAK,OAAO,EAAIA,EAAK,SAAS,EAAIA,EAAK,OAAO,EAC9CA,EAAK,OAAO,EAAIA,EAAK,SAAS,EAAIA,EAAK,OAAO,EAAIA,EAAK,OAAO,QAGlEC,EAAS,KAAKD,CAAI,CAE1B,EAEaE,GAAc,IAAK,CAC5B,IAAMN,EAAQC,EAAQ,EAChBM,EAAOC,EAAOR,EAAM,KAAK,KAAK,EAEhC,CAAEA,EAAM,OAAO,EAAI,IACnBA,EAAM,OAAO,EAAI,GAGjB,CAACA,EAAM,OAAO,EAAIO,EAAK,MAAQE,IAC/BT,EAAM,OAAO,EAAIO,EAAK,MAAQE,GAG9B,CAAET,EAAM,OAAO,EAAI,IACnBA,EAAM,OAAO,EAAI,GAGjB,CAACA,EAAM,OAAO,EAAIO,EAAK,OAASG,IAChCV,EAAM,OAAO,EAAIO,EAAK,OAASG,EAEvC,EC1CO,IAAMC,EAAqB,CAAA,EAqDrBC,GAAWC,GAA4B,CAChD,IAAIC,EAAa,CACb,OAAQD,EACR,MAAK,EACL,WAAY,CACR,KAAM,CACF,EAAG,EACH,EAAG,GAEP,OAAQ,IAEZ,OAAQA,EAAO,OACf,UAAW,EACX,SAAU,CACN,EAAG,EACH,EAAG,GAEP,MAAO,CACH,EAAG,EACH,EAAG,GAEP,cAAe,EACf,OAAQ,CACJ,MAAO,IAEX,OAAQ,CACJ,MAAO,IAEX,OAAQ,EACR,MAAO,EACP,OAAQ,MAGZ,OAAAF,EAAM,KAAKG,CAAI,EACfC,EAAS,KAAKD,CAAI,EAEXA,CACX,EAEaE,GAAcF,GAAc,CACrC,IAAMG,EAAQN,EAAM,QAAQG,CAAI,EAC5BG,GAAS,IACTN,EAAM,OAAOM,EAAO,CAAC,EAEzBC,GAAaJ,CAAI,CACrB,EAEaK,GAAa,IAAK,CAC3BR,EAAM,OAAO,EAAGA,EAAM,MAAM,CAChC,EAEaS,GAAsB,IAAK,CACpC,IAAMC,EAAQC,EAAQ,EAEtB,QAAWR,KAAQH,EAAM,OAAM,EAC3BG,EAAK,SAAS,EAAIS,EAAMF,EAAM,OAAO,EAAGA,EAAM,OAAO,EAAIA,EAAM,OAAO,EAAGP,EAAK,SAAS,CAAC,EACxFA,EAAK,SAAS,EAAIS,EAAMF,EAAM,OAAO,EAAGA,EAAM,OAAO,EAAIA,EAAM,OAAO,EAAGP,EAAK,SAAS,CAAC,CAEhG,EAEaU,GAAc,IAAK,CAC5B,QAAWV,KAAQH,EAAM,OAAM,EAC3Bc,GAAWX,CAAI,CAEvB,EAEMW,GAAcX,GAAc,CAC9B,IAAIY,EAAmB,KAEjBb,EAASC,EAAK,OACda,EAAad,EAAO,WAE1B,OAAQC,EAAK,MAAO,CAChB,IAAA,GACIY,EAAmBC,EAAW,OAE1Bb,EAAK,WAAW,KAAK,GAAK,GAAKA,EAAK,WAAW,KAAK,GAAK,KACzDA,EAAK,MAAK,EACVA,EAAK,cAAgB,GAGzBc,GAAYd,CAAI,EAChB,MAEJ,IAAA,GACQA,EAAK,WAAW,KAAK,GAAK,GAAKA,EAAK,WAAW,KAAK,GAAK,GACzDA,EAAK,MAAK,EACVA,EAAK,cAAgB,GAEhBe,EAAQf,EAAK,WAAW,KAAK,CAAC,EAAIe,EAAQf,EAAK,WAAW,KAAK,CAAC,EACrEY,EAAmBC,EAAW,MAE9BD,EAAmBC,EAAW,MAGlCG,EAAQ,UAAUhB,EAAK,WAAW,IAAI,EAEtCA,EAAK,SAAS,GAAKA,EAAK,WAAW,KAAK,EAAID,EAAO,UAAYkB,EAC/DjB,EAAK,SAAS,GAAKA,EAAK,WAAW,KAAK,EAAID,EAAO,UAAYkB,EAE/DH,GAAYd,CAAI,EAChB,MAEJ,IAAA,GACIY,EAAmBZ,EAAK,WAAaa,EAAW,IAE5CK,GAAoBN,EAAkBZ,EAAK,aAAa,IACxDA,EAAK,MAAK,EACVA,EAAK,cAAgB,EACrBA,EAAK,UAAY,QAErB,MAEJ,IAAA,GACIY,EAAmBZ,EAAK,WAAaa,EAAW,QAE5CK,GAAoBN,EAAkBZ,EAAK,aAAa,IACxDA,EAAK,MAAK,EACVA,EAAK,cAAgB,EACrBA,EAAK,UAAY,QAErB,MAEJ,IAAA,GACIY,EAAmBZ,EAAK,WAAaa,EAAW,MAE/BM,GAAkBP,CAAgB,GACnCZ,EAAK,cAAgBiB,IACjCf,GAAWF,CAAI,EACfY,EAAmB,MAEvB,KACR,CAEAZ,EAAK,SAAS,GAAKA,EAAK,MAAM,EAAIiB,EAClCjB,EAAK,SAAS,GAAKA,EAAK,MAAM,EAAIiB,EAElCjB,EAAK,MAAM,GAAK,GAChBA,EAAK,MAAM,GAAK,GAEZA,EAAK,WAAW,KAAK,EAAI,EACzBA,EAAK,UAAY,EACVA,EAAK,WAAW,KAAK,EAAI,IAChCA,EAAK,UAAY,IAGjBY,IACAZ,EAAK,eAAiBiB,EAEtBjB,EAAK,OAAO,MAAQoB,GAAcR,EAAkBZ,EAAK,aAAa,EACtEA,EAAK,OAAO,MAAQA,EAAK,UAAY,EAErCA,EAAK,OAAO,MAAQqB,GAAgBrB,EAAK,OAAO,MAAO,UAAU,EACjEA,EAAK,OAAO,MAAQA,EAAK,OAAO,OAGpCA,EAAK,OAAS,EACVA,EAAK,OAASA,EAAK,OAAO,QAC1BA,EAAK,MAAQA,EAAK,OAAO,MACzBA,EAAK,OAASD,EAAO,QAAQC,EAAK,KAAK,GAAK,EAEpD,EAEasB,GAAmB,IAAK,CACjC,QAAWC,KAAW1B,EAAO,CAKzB,GAJI0B,EAAQ,QAAU,GAIlB,CAACA,EAAQ,OACT,SAGJ,IAAIC,EAAwB,KACxBC,EAAoBC,GACpBC,EAAoBD,GAExB,QAAW1B,KAAQH,EACf,GAAI,EAAAG,EAAK,QAAU,GAAKA,EAAK,WAAaA,EAAK,OAAO,WAAW,YAI7DuB,EAAQ,OAAO,KAAOvB,EAAK,OAAO,IAAK,CACvC,IAAM4B,EAAa5B,EAAK,SAAS,EAAIuB,EAAQ,SAAS,EACtD,GAAIK,EAAaL,EAAQ,UAAY,EAAG,CACpC,IAAMM,EAAYd,EAAQa,CAAU,EAC9BE,EAAYf,EAAQQ,EAAQ,SAAS,EAAIvB,EAAK,SAAS,CAAC,EAC1D6B,EAAY,IAAMC,EAAY,KAC1B,CAACN,GAAYC,EAAoBI,GAAaF,EAAoBG,KAClEN,EAAWxB,EACXyB,EAAoBI,EACpBF,EAAoBG,EAGhC,CACJ,CAGJ,GAAIN,EAAU,CACVA,EAAS,QAAUD,EAAQ,OAE3BC,EAAS,MAAM,GAAKD,EAAQ,UAAYA,EAAQ,OAAS,IAAM,IAC/DA,EAAQ,MAAM,GAAKA,EAAQ,UAAY,GAEvC,IAAMQ,EACER,EAAQ,QAAU,IAClBS,GAAQ,EACDC,KAEPC,GAAO,EACHC,EAAO,EAAG,EACHC,GAEAC,IAKnBC,GAAUP,EAAQf,EAAQ,IAAIQ,EAAS,SAAU,CAAE,EAAGe,EAAY,GAAI,CAAC,EAAG,EAAGA,EAAY,IAAK,GAAG,CAAC,CAAE,CAAC,EAErG,IAAM1B,EAAaW,EAAS,OAAO,WAE/BA,EAAS,OAAS,GAClBA,EAAS,MAAK,EAEdA,EAAS,cAAgB,EAEzBA,EAAS,UAAYgB,GAAoB,CACrC3B,EAAW,QACXA,EAAW,QACXA,EAAW,WACZ,CAAC,GAAI,GAAI,CAAC,CAAC,IAEdW,EAAS,MAAK,EACdA,EAAS,UAAYiB,EAAa,CAAC5B,EAAW,MAAOA,EAAW,KAAK,CAAC,EACtEW,EAAS,cAAgB,EAErBA,EAAS,OAAO,IAI5B,MACSD,EAAQ,OAAO,KAChBmB,GAAU,CAGtB,CACJ,EAEaC,GAA6B,IAAK,CAC3C,QAAW3C,KAAQH,EAAM,OAAM,EAC3B+C,GAAyB5C,CAAI,CAErC,EAEM4C,GAA4B5C,GAAc,CAC5C,IAAMD,EAASC,EAAK,OAEpBA,EAAK,OAAO,EAAIA,EAAK,SAAS,EAAID,EAAO,OAAO,EAChDC,EAAK,OAAO,EAAIA,EAAK,SAAS,EAAID,EAAO,OAAO,EAEhDC,EAAK,OAAO,OAAS,GACrBA,EAAK,OAAO,EAAIA,EAAK,SAAS,EAAID,EAAO,OAAO,EAAI,EACpDC,EAAK,OAAO,EAAIA,EAAK,SAAS,EAAID,EAAO,OAAO,EAAIC,EAAK,OAAO,MACpE,EAEMc,GAAed,GAAc,CAC/B,GAAIA,EAAK,WAAW,OAAQ,CACxB,IAAMa,EAAab,EAAK,OAAO,WAC/BA,EAAK,MAAK,EACVA,EAAK,UAAYyC,EAAa,CAAC5B,EAAW,IAAKA,EAAW,MAAOA,EAAW,IAAI,CAAC,EACjFb,EAAK,cAAgB,CACzB,CACJ,EC9UA,IAAM6C,GAAW,IAAe,CAC5B,IAAMC,EAAkB,CAAA,EAExB,OAAAA,EAAM,EAAE,EAAI,GACZA,EAAM,EAAE,EAAI,EACZA,EAAM,EAAE,EAAI,GACZA,EAAM,EAAE,EAAI,GAEZA,EAAM,KACF,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EAAK,EAGTA,EAAM,EAAE,EAAI,EAEZA,EAAM,KACF,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EAAM,EAGHA,CACX,EAEMC,GAAOF,GAAQ,EAERG,GAAmBC,GAAoC,CAChE,GAAI,GAEI,KAAM,oBAAoBA,CAAI,SAAS,OAAO,aAAaA,CAAI,CAAC,GAIxE,OAAOF,GAAKE,CAAI,CACpB,ECvDO,IAAMC,GAAa,CAACC,EAAmCC,IAAkB,CAC5E,GAAIA,EAAO,OAAS,GAAI,OAExBD,EAAQ,KAAI,EAEZ,IAAME,EAAQC,EAAOF,EAAO,KAAK,EAE7BG,EAAI,EACJC,EAAI,EACJC,EAAI,EACJC,EAAIN,EAAO,QAAU,EAErBO,EAAKC,EAAUR,EAAO,GAAK,CAAC,EAC5BS,EAAKD,EAAUR,EAAO,GAAK,CAAC,EAE5BA,EAAO,QACPG,EAAI,GACJI,GAAMN,EAAM,OAGZD,EAAO,QACPM,EAAI,GACJG,GAAMR,EAAM,QAGhBF,EAAQ,UAAUI,EAAGC,EAAGC,EAAGC,EAAGC,EAAIE,CAAE,EAEpCC,EAAUX,EAASE,EAAO,EAAG,CAAC,EAE9BF,EAAQ,QAAO,CACnB,EAEaY,GAAc,CAACZ,EAAmCa,IAA0B,CACrF,QAAWZ,KAAUY,EACjBd,GAAWC,EAASC,CAAM,CAElC,EC5CO,IAAMa,EAAW,CACpB,OAAQ,GAER,KAAM,CAAE,EAAG,EAAG,EAAG,CAAC,EAClB,WAAY,GAEZ,gBAAiB,GACjB,UAAW,CAAE,EAAG,EAAG,EAAG,CAAC,EAEvB,SAAU,GACV,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAC,EACpB,aAAc,IAGZC,GAAS,GACTC,GAAQ,CAAE,EAAG,GAAI,EAAG,EAAE,EAEfC,GAAiB,IAAK,CAC/B,GAAI,CAACC,GACD,OASJ,GANAJ,EAAS,KAAK,EAAIE,GAAM,EACxBF,EAAS,KAAK,EAAIK,EAAa,OAASH,GAAM,EAE9CF,EAAS,OAAO,EAAIK,EAAa,MAAQH,GAAM,EAC/CF,EAAS,OAAO,EAAIK,EAAa,OAASH,GAAM,EAE5CF,EAAS,QAAU,GAAI,CACvBA,EAAS,UAAU,EAAIA,EAAS,KAAK,EACrCA,EAAS,UAAU,EAAIA,EAAS,KAAK,EAErC,QAAWM,KAAWC,EAAS,CAC3B,IAAMC,EAAQD,EAAQD,CAAO,EAC7B,GAAIE,EAAM,SACWC,EAAQ,SAAST,EAAS,KAAMQ,CAAK,EACvCR,EAAS,WAAaC,GAAQ,CACzCD,EAAS,OAAS,OAAOM,CAAO,EAEhCN,EAAS,UAAU,EAAIQ,EAAM,EAC7BR,EAAS,UAAU,EAAIQ,EAAM,EAC7B,KACJ,CAGR,CACJ,KAAO,CACH,IAAMA,EAAQD,EAAQP,EAAS,MAAM,EACjCQ,GACAR,EAAS,UAAU,EAAIQ,EAAM,EAC7BR,EAAS,UAAU,EAAIQ,EAAM,GAE7BR,EAAS,OAAS,EAE1B,CAEA,IAAMU,EAAYD,EAAQ,SAAST,EAAS,UAAWA,EAAS,IAAI,EAQpE,GAPiBS,EAAQ,OAAOC,CAAS,EAC1BV,EAAS,aACpBS,EAAQ,UAAUC,CAAS,EAC3BV,EAAS,UAAU,EAAIA,EAAS,KAAK,EAAIU,EAAU,EAAIV,EAAS,WAChEA,EAAS,UAAU,EAAIA,EAAS,KAAK,EAAIU,EAAU,EAAIV,EAAS,YAGhEA,EAAS,UAAY,GACrB,QAAWM,KAAWC,EAAS,CAC3B,IAAMC,EAAQD,EAAQD,CAAO,EACzBE,EAAM,SACWC,EAAQ,SAAST,EAAS,OAAQQ,CAAK,EACzCR,EAAS,aAAeC,KACnCD,EAAS,SAAW,OAAOM,CAAO,EAG9C,MAEcC,EAAQP,EAAS,QAAQ,IAEnCA,EAAS,SAAW,GAGhC,EC/EO,IAAMW,EAAO,CAChB,MAAK,EACL,OAAQ,GCJL,IAAMC,EAAc,CACvB,IAAK,CAAE,EAAG,EAAG,EAAG,CAAC,EACjB,OAAQ,IAcRC,GAAU,GAEDC,GAAgB,IAAK,CAC9B,GAAI,gBAAiB,UAAW,CAC5BF,EAAY,IAAI,EAAI,EACpBA,EAAY,IAAI,EAAI,EACpBA,EAAY,OAAS,GAErB,IAAMG,EAAW,UAAU,YAAW,EAElCC,EAAa,GAEjB,QAAWC,KAAWF,EAClB,GAAIE,GAAWA,EAAQ,UAAW,CAC1BA,EAAQ,KAAK,QAAU,IACvBL,EAAY,IAAI,GAAKK,EAAQ,KAAK,CAAC,EACnCL,EAAY,IAAI,GAAKK,EAAQ,KAAK,CAAC,GAGnCA,EAAQ,KAAK,QAAU,IACvBL,EAAY,IAAI,GAAKK,EAAQ,KAAK,CAAC,EACnCL,EAAY,IAAI,GAAKK,EAAQ,KAAK,CAAC,GAGvC,QAASC,EAAI,EAAGA,EAAID,EAAQ,QAAQ,OAAQC,IAGxC,GAFeD,EAAQ,QAAQC,CAAC,EAErB,QAEP,OADAF,EAAa,GACLE,EAAG,CACP,IAAA,IACIN,EAAY,IAAI,GAAK,EACrB,MAEJ,IAAA,IACIA,EAAY,IAAI,GAAK,EACrB,MAEJ,IAAA,IACIA,EAAY,IAAI,GAAK,EACrB,MAEJ,IAAA,IACIA,EAAY,IAAI,GAAK,EACrB,MAEJ,IAAA,GACA,IAAA,GACA,IAAA,GACA,IAAA,GACIA,EAAY,OAAS,GACrB,KACR,CAGZ,CAGAO,EAAQP,EAAY,IAAI,CAAC,EAAI,KAC7BA,EAAY,IAAI,EAAI,GAGpBO,EAAQP,EAAY,IAAI,CAAC,EAAI,KAC7BA,EAAY,IAAI,EAAI,GAGxBQ,EAAQ,UAAUR,EAAY,GAAG,EAE7BC,IAAWG,IACXH,GAAUG,EACVK,GAAUR,EAAO,EAEzB,CACJ,EClFA,IAAMS,GAAc,GAEdC,GAAiB,GACjBC,GAAiB,EAEjBC,GAAgB,GAChBC,GAAgB,GAETC,EAAyB,CAAA,EAElCC,GAAsB,EASbC,EAAoB,CAAA,EAE3BC,GAAW,CACb,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YAGEC,GAAyB,CAC3B,IAAK,GACL,KAAM,QACN,OAAQ,IACR,UAAW,GACX,OAAQ,CAAE,EAAG,GAAI,EAAG,EAAE,EACtB,WAAY,CACR,MAAO,CACH,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,GAE5B,MAAO,CACH,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,GAE5B,MAAO,CACH,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,IAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,IAAO,KAAM,EAAG,GAE7B,IAAK,CACD,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,GAE5B,MAAO,CACH,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,IAAM,KAAM,EAAG,EACxB,CAAE,MAAO,GAAM,KAAM,EAAG,GAE5B,KAAM,CACF,CAAE,MAAO,GAAM,KAAM,EAAG,EACxB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,GAE7B,QAAS,CACL,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,GAE7B,QAAS,CACL,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,GAE7B,UAAW,CACP,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,CAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,GAE7B,MAAO,CACH,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,CAAG,EACzB,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,IAAO,KAAM,EAAG,GAE7B,MAAO,CACH,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,IAAO,KAAM,CAAG,EACzB,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,IAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,IAAO,KAAM,EAAG,GAE7B,IAAK,CACD,CAAE,MAAO,IAAO,KAAM,CAAG,IAGjC,QAAS,CACJ,GAAO,EACP,IAAO,GACP,IAAQ,KAIJC,GAAiC,CAAA,EAEjCC,GAAkB,IAAkBC,EAAaF,EAAW,EAE5DG,GAAsB,IAAK,CAOpCC,GAAe,CACX,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACH,EAGDA,GAAe,CACX,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACH,EAED,IAAMC,EAAQ,CAAC,WAAY,WAAY,UAAU,EAC3CC,EAAQ,CAAC,WAAY,WAAY,WAAY,WAAY,UAAU,EACnEC,EAAS,CAAC,WAAY,WAAY,UAAU,EAC5CC,EAAQ,CAAC,WAAY,WAAY,WAAY,UAAU,EACvDC,EAAQ,CAAC,WAAY,WAAY,UAAU,EAEjD,QAAS,EAAI,EAAG,EAAI,GAAI,IAAK,CACzB,IAAIC,EAAOR,EAAaG,CAAK,EACvBM,EAAOT,EAAaI,CAAK,EACzBM,EAAQV,EAAaK,CAAM,EAC3BM,EAAOX,EAAaM,CAAK,EACzBM,EAAOZ,EAAaO,CAAK,EAE3BM,EAAOH,EACPI,EAAQJ,EACRK,EAAQL,EACRM,EAAQP,EAERQ,EAAQN,EACRO,EAAQP,EAGRQ,EAAO,EAAG,IACVX,EAAOC,GAIPU,EAAO,EAAG,IACVJ,EAAQN,GAIRU,EAAO,EAAG,IACVH,EAAQ,YAIRG,EAAO,EAAG,IACVD,EAAQT,GAGZP,GAAe,CACXM,EACAC,EACAI,EACAC,EACAC,EACAC,EACAC,EACAC,EACAN,EACH,CACL,CACJ,EAEMV,GAAkBkB,GAA4B,CAChD,IAAMC,EAAwBC,GAAYzB,EAAU,EAEpDwB,EAAU,UAAYE,EAAY,GAAI,EAAE,EAExC,IAAMC,EAAK1B,GAAY,OAEjB2B,EAAaJ,EAAU,WAC7B,QAAWK,KAAQD,EAAY,CAC3B,IAAME,EAAYF,EAAWC,CAAI,EACjCE,GAAsBD,EAAW/B,GAAUwB,EAAgBI,CAAE,CACjE,CAEA,QAAWK,KAASR,EAAU,QAAS,CACnC,IAAMS,EAAWC,GAAiB,OAAOF,CAAK,EAAGjC,GAAUwB,EAAgBI,CAAE,EAC7EH,EAAU,QAAQS,CAAQ,EAAIT,EAAU,QAAQQ,CAAK,CACzD,CAEA/B,GAAY,KAAKuB,CAAS,CAC9B,EAEMO,GAAwB,CAACD,EAAkCK,EAA+BZ,EAA+Ba,IAAsB,CACjJ,QAAWC,KAASP,EAChBO,EAAM,MAAQH,GAAiBG,EAAM,MAAOF,EAAgBZ,EAAgBa,CAAU,CAE9F,EAEME,GAA2C,CAAA,EAC3CJ,GAAmB,CAACP,EAAYQ,EAA+BZ,EAA+Ba,IAAsB,CACtH,GAAIT,GAAM,GAAI,MAAO,GAErB,IAAMY,EAAM,GAAGZ,CAAE,IAAIS,CAAU,GAC/B,GAAI,CAACE,GAAcC,CAAG,EAAG,CACrB,IAAMC,EAASC,GAAYC,EAAOf,CAAE,CAAC,EACrCgB,GAAcH,EAAQL,EAAgBZ,CAAc,EACpDqB,GAAYJ,CAAM,EAClBK,GAAM,GAAIL,CAAM,EAChBF,GAAcC,CAAG,EAAIO,GAASN,CAAM,CACxC,CACA,OAAOF,GAAcC,CAAG,CAC5B,EAEaQ,GAAaC,GAA4B,CAClD,IAAMC,EAAMC,GAAQF,CAAM,EACpBG,EAAmB,CACrB,SAAU,CACN,IAAK,EACL,IAAK,GAET,gBAAiB,EACjB,aAAc,EACd,aAAc,IAElB,OAAAF,EAAI,OAASE,EACbrD,EAAK,KAAKmD,CAAG,EACNA,CACX,EAMO,IAAMG,GAAaC,GAAa,CACnC,IAAMC,EAAQC,EAAK,QAAQF,CAAG,EAC1BC,GAAS,IACTC,EAAK,OAAOD,EAAO,CAAC,CAE5B,EAEaE,GAAkBH,GAAa,CACxC,IAAMC,EAAQG,EAAU,QAAQJ,CAAG,EAC/BC,GAAS,IACTG,EAAU,OAAOH,EAAO,CAAC,CAEjC,EAEaI,GAAa,IAAK,CAC3BC,IAAuBC,EACnBD,GAAsB,IACtBA,GAAsBE,EAAY,EAAG,CAAC,EACtCJ,EAAU,OAAO,EAAGA,EAAU,MAAM,GAGxC,IAAMK,EAAOC,GAAO,EAEpB,QAAWV,KAAOE,EAAM,CACpB,GAAIF,EAAI,QAAU,GAAK,CAACW,EAAM,SAASX,CAAG,EAAG,CACzCD,GAAUC,CAAG,EACbG,GAAeH,CAAG,EAClB,QACJ,CAEAA,EAAI,WAAW,KAAK,EAAI,EACxBA,EAAI,WAAW,KAAK,EAAI,EACxBA,EAAI,WAAW,OAAS,GAExB,IAAMY,EAAUZ,EAAI,OAEfY,EAAQ,eACTA,EAAQ,cAAgBL,EACpBK,EAAQ,aAAeA,EAAQ,kBAC/BA,EAAQ,aAAe,EACvBA,EAAQ,gBAAkBJ,EAAYI,EAAQ,SAAS,IAAKA,EAAQ,SAAS,GAAG,EAChFA,EAAQ,aAAe,IAGnC,CAEAC,GAAoBJ,CAAI,EAExB,QAAWT,KAAOE,EAAM,CASpB,GARIF,EAAI,QAAU,GAAKA,EAAI,WAAaA,EAAI,OAAO,WAAW,WAI1DA,EAAI,OAAK,GAAsBA,EAAI,OAAK,GAIxCS,EAAK,QAAU,GAAKA,EAAK,WAAaA,EAAK,OAAO,WAAW,UAC7D,SAIJ,GADiBK,GAAgBd,EAAKS,CAAI,EAC5B,CACV,IAAMG,EAAUZ,EAAI,OACpB,GAAIY,EAAQ,aAAc,CACtBA,EAAQ,aAAe,GAEvB,IAAMG,EAAYC,EAAQ,SAASP,EAAK,SAAUT,EAAI,QAAQ,EAC9DA,EAAI,UAAYiB,EAAM,GAAI,EAAGF,EAAU,CAAC,EACxCf,EAAI,WAAW,OAAS,GAEnBI,EAAU,SAASJ,CAAG,GACvBI,EAAU,KAAKJ,CAAG,CAE1B,CACJ,KAAO,CACH,IAAIkB,EAAa,GAUjB,GARId,EAAU,SAASJ,CAAG,EACtBkB,EAAa,GAERC,GAAenB,EAAKS,CAAI,IACzBS,EAAa,IAIjBA,EAAY,CACZ,IAAMH,EAAYC,EAAQ,SAASP,EAAK,SAAUT,EAAI,QAAQ,EAC9DgB,EAAQ,UAAUD,CAAS,EAC3Bf,EAAI,WAAW,KAAK,EAAIe,EAAU,EAClCf,EAAI,WAAW,KAAK,EAAIe,EAAU,CACtC,CACJ,CACJ,CAEAK,GAAa,CACjB,EAEMA,GAAgB,IAAK,CACvB,QAASC,EAAI,EAAGA,EAAInB,EAAK,OAAQmB,IAAK,CAClC,IAAMC,EAAOpB,EAAKmB,CAAC,EACnB,GAAIC,EAAK,OAAK,GAAsBA,EAAK,OAAK,EAC1C,QAASC,EAAIF,EAAI,EAAGE,EAAIrB,EAAK,OAAQqB,IAAK,CACtC,IAAMC,EAAOtB,EAAKqB,CAAC,EACnB,GAAIC,EAAK,OAAK,GAAsBA,EAAK,OAAK,EAAqB,CAC/D,IAAMT,EAAYC,EAAQ,SAASQ,EAAK,SAAUF,EAAK,QAAQ,EAC3DP,EAAU,GAAK,GAAKA,EAAU,GAAK,IACnCA,EAAU,EAAI,GAElB,IAAMU,EAAWT,EAAQ,OAAOD,CAAS,EACzC,GAAIU,EAAWC,GAAa,CACxB,IAAMC,GAASD,GAAcD,GAAYA,EAEzCH,EAAK,SAAS,GAAKP,EAAU,EAAIY,EACjCL,EAAK,SAAS,GAAKP,EAAU,EAAIY,EAEjCH,EAAK,SAAS,GAAKT,EAAU,EAAIY,EACjCH,EAAK,SAAS,GAAKT,EAAU,EAAIY,CACrC,CACJ,CACJ,CAER,CACJ,EAEIC,GAAe,EAENC,GAAgBC,GAAkBF,GAAeE,EAEjDjB,GAAuBJ,GAAc,CAC9C,KAAOL,EAAU,OAASwB,IAAc,CACpC,IAAIG,EAAeC,GACfC,EAEJ,QAAWjC,KAAOE,EACd,IAAKF,EAAI,OAAK,GAAuBA,EAAI,OAAK,IAAuBA,EAAI,OAAS,GAC1E,CAACI,EAAU,SAASJ,CAAG,EAAG,CAC1B,IAAMyB,EAAWT,EAAQ,SAASP,EAAK,SAAUT,EAAI,QAAQ,EACzD+B,EAAeN,IACfM,EAAeN,EACfQ,EAAUjC,EAElB,CAIR,GAAIiC,EACA7B,EAAU,KAAK6B,CAAO,MAEtB,MAER,CAEA,KAAO7B,EAAU,OAASwB,IAAc,CACpC,IAAIM,EACAC,EAAkB,EACtB,QAAWC,KAAYhC,EAAW,CAC9B,IAAMqB,EAAWT,EAAQ,SAASoB,EAAS,SAAU3B,EAAK,QAAQ,EAC9D0B,EAAkBV,IAClBU,EAAkBV,EAClBS,EAAcE,EAEtB,CAEIF,GACA/B,GAAe+B,CAAW,CAElC,CACJ,EAEMpB,GAAkB,CAACd,EAAWS,IAAwB4B,GAAWrC,EAAKS,EAAM6B,GAAgBC,EAAc,EAC1GpB,GAAiB,CAACnB,EAAWS,IAAwB4B,GAAWrC,EAAKS,EAAM+B,GAAeC,EAAa,EAEvGJ,GAAa,CAACrC,EAAWS,EAAYiC,EAAYC,IAAuB,CAC1E,IAAM5B,EAAYC,EAAQ,SAASP,EAAK,SAAUT,EAAI,QAAQ,EAC9D,OAAO4C,EAAQ7B,EAAU,CAAC,EAAI2B,GAAME,EAAQ7B,EAAU,CAAC,EAAI4B,CAC/D,ECtbA,IAAIE,GAAqB,CAAA,EAEZC,GAAW,IAAc,GAAKD,GAAM,OAEpCE,GAAY,IAAK,CACtB,EAKR,EAEaC,GAAY,IAAK,CAC1BH,GAAQ,CAAA,EAER,IAAMI,EAAgB,EAChBC,EAAc,EAEdC,EAAa,EACbC,EAAW,EAEXC,EAAc,IACdC,EAAY,IAEZC,EAAiB,GACjBC,EAAe,GAEfC,EAAiB,EACjBC,EAAe,EAEfC,EAAa,GAEnB,QAASC,EAAI,EAAGA,EAAID,EAAYC,IAAK,CACjC,IAAMC,EAAQD,GAAKD,EAAa,GAE1BG,EAAWC,GAAKd,EAAeC,EAAaW,CAAK,EACjDG,EAAQC,EAAUF,GAAKZ,EAAYC,EAAUS,CAAK,CAAC,EACnDK,EAASD,EAAUF,GAAKV,EAAaC,EAAWO,CAAK,CAAC,EACtDM,EAAYJ,GAAKR,EAAgBC,EAAcK,CAAK,EACpDO,EAAYH,EAAUF,GAAKN,EAAgBC,EAAcG,CAAK,CAAC,EAErEhB,GAAM,KACF,CACI,UAAWuB,EACX,KAAM,CACF,CACI,SAAU,CAAE,IAAKN,EAAU,IAAKA,EAAW,GAAG,EAC9C,MAAOE,EACP,OAAQ,GACR,OAAQE,EACR,UAAWC,IAGtB,CAET,CAEAtB,GAAM,KACF,CACI,UAAWa,EACX,KAAM,CACF,CACI,SAAU,CAAE,IAAKR,EAAa,IAAKA,EAAc,GAAG,EACpD,MAAO,EACP,OAAQ,EACR,OAAQI,EACR,UAAWE,GAEf,CACI,SAAU,CAAE,IAAKN,EAAa,IAAKA,EAAc,GAAG,EACpD,MAAO,EACP,OAAQ,EACR,OAAQ,IACR,UAAWM,IAGtB,CAET,EAEMa,GAAQ,CAAC,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAM,EAE3HC,GAAW,IAAkB,CAItC,IAAMC,EAAqB,CAAA,EAErBC,EAAQC,EAAQ,EAEhBC,EAAUC,GAAQH,EAAM,OAAO,EAAGA,EAAM,OAAO,EAAI,EAAE,EACrDI,EAAUJ,EAAM,OAAO,EAEvBK,EAAa,CACf,EAAGH,EACH,EAAGF,EAAM,OAAO,EAAI,GACpB,EAAGI,EAAUF,EACb,EAAGF,EAAM,OAAO,EAAI,GAAM,IAG1BK,EAAK,EAAI,GACTN,EAAM,KAAKM,CAAI,EAGnB,IAAMC,EAAWN,EAAM,OAAO,EAAIO,EAC5BC,EAAWC,GAAQT,EAAM,OAAO,EAAIA,EAAM,OAAO,EAAGA,EAAM,OAAO,EAAIO,EAAY,EAAE,EAEnFG,EAAc,CAChB,EAAGJ,EACH,EAAGN,EAAM,OAAO,EAAI,GACpB,EAAGQ,EAAWF,EACd,EAAGN,EAAM,OAAO,EAAI,GAAM,IAG9B,OAAIU,EAAM,EAAI,GACVX,EAAM,KAAKW,CAAK,EAGbX,CACX,EAEaY,GAAe,IAAK,CAC7B,IAAMZ,EAAQD,GAAQ,EAEtB,GAAKC,EAAM,QAIP,CAACa,EAAK,OACN,GAAIvC,GAAM,OAAQ,CACd,IAAMwC,EAAmB,CAAC,GAAGC,EAAW,EACxCD,EAAiB,MAAK,EACtBA,EAAiB,MAAK,EAEtB,IAAME,EAAO1C,GAAM,MAAK,EAExB2C,GAAaD,EAAK,SAAS,EAE3B,QAAWE,KAAWF,EAAK,KACvB,QAAS3B,EAAI,EAAGA,EAAI6B,EAAQ,MAAO7B,IAAK,CACpC,IAAM8B,EAAqBC,GAAYF,EAAQ,QAAU,GAAKG,EAAaP,CAAgB,EAAIC,GAAYG,EAAQ,MAAM,CAAC,EAC1HC,EAAO,OAASD,EAAQ,OACxBC,EAAO,UAAYD,EAAQ,UACvBA,EAAQ,QAAU,EAClBC,EAAO,KAAO,OAEdA,EAAO,KAAOE,EAAavB,EAAK,EAGpC,IAAMwB,EAAMC,GAAUJ,CAAM,EACtBK,EAAUF,EAAI,OACpBE,EAAQ,SAAWN,EAAQ,SAE3B,IAAMO,EAAOJ,EAAarB,CAAK,EAE/BsB,EAAI,SAAS,EAAIG,EAAK,EAAIC,EAAY,EAAGD,EAAK,CAAC,EAC/CH,EAAI,SAAS,EAAIG,EAAK,EAAIC,EAAY,EAAGD,EAAK,CAAC,CACnD,CAER,MACQE,EAAM,QAAU,IAChBC,EAAK,MAAK,EACVC,GAAO,EAIvB,EChLO,IAAIC,EAAa,EAEXC,GAAoBC,GAAyBF,EAAgBE,EAEpEC,GAAqB,CACvB,IAAK,GACL,KAAM,OACN,OAAQ,IACR,UAAW,GACX,OAAQ,CAAE,EAAG,GAAI,EAAG,EAAE,EACtB,WAAY,CACR,MAAO,CACH,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,GAE7B,MAAO,CACH,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,GAE7B,MAAO,CACH,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,EAAG,GAE9B,IAAK,CACD,CAAE,MAAO,GAAO,KAAM,GAAI,EAC1B,CAAE,MAAO,GAAO,KAAM,EAAG,GAE7B,MAAO,CACH,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAO,KAAM,EAAG,GAE7B,KAAM,CACF,CAAE,MAAO,GAAO,KAAM,GAAI,EAC1B,CAAE,MAAO,GAAO,KAAM,GAAI,EAC1B,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAO,KAAM,EAAG,GAE7B,QAAS,CACL,CAAE,MAAO,GAAQ,KAAM,EAAG,GAE9B,QAAS,CACL,CAAE,MAAO,GAAQ,KAAM,EAAG,GAE9B,UAAW,CACP,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,CAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAO,KAAM,EAAG,GAE7B,MAAO,CACH,CAAE,MAAO,GAAO,KAAM,EAAG,EACzB,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAQ,KAAM,CAAG,EAC1B,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,GAAQ,KAAM,EAAG,EAC1B,CAAE,MAAO,GAAI,KAAM,EAAG,EACtB,CAAE,MAAO,GAAQ,KAAM,EAAG,GAE9B,MAAO,CACH,CAAE,MAAO,GAAO,KAAM,CAAG,GAE7B,IAAK,CAAA,GAET,QAAS,CACJ,GAAQ,GACR,GAAS,GACT,GAAQ,KAIbC,EAESC,GAAa,IAAK,CAC3BD,EAAOE,GAAQH,EAAM,CACzB,EAEaI,GAAU,IACZH,EAGEI,GAAa,IAAK,CAC3B,GAAKJ,IAIAK,EAAM,SAASL,CAAI,IACpBM,EAAK,MAAK,EACVC,GAAS,GAGT,EAAAP,EAAK,QAAU,IAuCnB,IAnCAA,EAAK,WAAW,KAAK,EAAI,EACzBA,EAAK,WAAW,KAAK,EAAI,EACzBA,EAAK,WAAW,OAAS,IAErBQ,EAAY,EAAA,GAAcA,EAAY,EAAA,KACtCR,EAAK,WAAW,KAAK,EAAI,GACzBJ,EAAa,IAGbY,EAAY,EAAA,GAAeA,EAAY,EAAA,KACvCR,EAAK,WAAW,KAAK,EAAI,EACzBJ,EAAa,IAGbY,EAAY,EAAA,GAAYA,EAAY,EAAA,KACpCR,EAAK,WAAW,KAAK,EAAI,GACzBJ,EAAa,IAGbY,EAAY,EAAA,GAAcA,EAAY,EAAA,KACtCR,EAAK,WAAW,KAAK,EAAI,EACzBJ,EAAa,IAGbY,EAAY,EAAA,GAAeA,EAAY,EAAA,KACvCR,EAAK,WAAW,OAAS,GACzBJ,EAAa,GAGb,GAMAa,EAAS,QAAU,GAAI,CACvB,IAAMC,EAAYC,EAAQ,SAASF,EAAS,UAAWA,EAAS,IAAI,EACpET,EAAK,WAAW,KAAK,EAAIU,EAAU,EACnCV,EAAK,WAAW,KAAK,EAAIU,EAAU,EAEnCd,EAAa,CACjB,CAEIa,EAAS,UAAY,KACrBT,EAAK,WAAW,OAAS,GACzBJ,EAAa,IAGbgB,EAAY,IAAI,GAAK,GAAKA,EAAY,IAAI,GAAK,KAC/CZ,EAAK,WAAW,KAAK,EAAIY,EAAY,IAAI,EACzCZ,EAAK,WAAW,KAAK,EAAIY,EAAY,IAAI,EACzChB,EAAa,GAGbgB,EAAY,SACZZ,EAAK,WAAW,OAAS,GACzBJ,EAAa,GAErB,ECtKO,IAAMiB,EAAe,SAAS,eAAe,GAAG,EACvDA,EAAa,MAAM,eAAiB,YAEpC,IAAMC,EAAUC,EAAWF,CAAY,EAE1BG,EAAY,IACZC,EAAa,IAEbC,GAAe,CAAE,EAAG,EAAG,EAAG,CAAC,EAC7BC,GAAc,EAEZC,GAAa,IAAK,CAC3B,IAAMC,EAAc,OAAO,WACrBC,EAAe,OAAO,YAE5BH,GAAcI,GAAQF,EAAcL,EAAWM,EAAeL,CAAU,EAExEJ,EAAa,MAAQW,GAAQR,EAAWK,EAAcF,EAAW,EACjEN,EAAa,OAASW,GAAQP,EAAYK,EAAeH,EAAW,EAEpEN,EAAa,MAAM,MAAQ,GAAGQ,CAAW,KACzCR,EAAa,MAAM,OAAS,GAAGS,CAAY,KAE3CJ,GAAa,EAAIO,IAAWZ,EAAa,MAAQG,GAAa,CAAC,EAC/DE,GAAa,EAAI,CACrB,EAEaQ,GAAO,IAAK,CACrBZ,EAAQ,UAAU,EAAG,EAAGD,EAAa,MAAOA,EAAa,MAAM,EAC/D,IAAMc,EAAQC,EAAQ,EAEtBd,EAAQ,KAAI,EACZA,EAAQ,aAAa,EAAG,EAAG,EAAG,EAAGI,GAAa,EAAGA,GAAa,CAAC,EAE/DJ,EAAQ,KAAI,EACZA,EAAQ,UAAUe,EAAU,CAACF,EAAM,OAAO,CAAC,EAAGE,EAAU,CAACF,EAAM,OAAO,CAAC,CAAC,EAExEG,GAAWhB,EAASa,EAAM,IAAI,EAE9Bb,EAAQ,WAAa,EACrBA,EAAQ,YAAc,QACtB,QAAWiB,KAAQC,EACfF,GAAWhB,EAASiB,EAAK,MAAM,EAEnC,QAAWE,KAAQN,EAAM,MACjBM,EAAK,QACLH,GAAWhB,EAASmB,EAAK,MAAM,EAGvCnB,EAAQ,WAAa,EAErBoB,EAAS,KAAK,CAACC,EAAGC,IAAMD,EAAE,SAAS,GAAKC,EAAE,SAAS,EAAIA,EAAE,SAAS,EAAID,EAAE,SAAS,EAAIA,EAAE,SAAS,EAAIC,EAAE,SAAS,CAAC,EAEhH,QAAWC,KAAUH,EACjBJ,GAAWhB,EAASuB,EAAO,MAAM,EAarC,QAAWC,KAAUC,GACjBT,GAAWhB,EAASwB,EAAO,MAAM,EAGrCxB,EAAQ,QAAO,EAEfA,EAAQ,UAAY,QAChBD,EAAa,MAAQA,EAAa,QAClCC,EAAQ,SAAS,EAAG,CAAEI,GAAa,EAAGF,EAAWE,GAAa,CAAC,EAC/DJ,EAAQ,SAAS,EAAGG,EAAYD,EAAWC,CAAU,IAErDH,EAAQ,SAAS,CAAEI,GAAa,EAAG,EAAGA,GAAa,EAAGF,CAAS,EAC/DF,EAAQ,SAASE,EAAW,EAAGA,EAAWC,CAAU,GAGxDuB,GAAM,EAEN1B,EAAQ,QAAO,EAEf2B,GAAS,EAcLC,GAAa,IACb5B,EAAQ,YAAc6B,GAAY,UAAU,EAC5C7B,EAAQ,UAAY,EAEpBA,EAAQ,UAAS,EACjBA,EAAQ,IAAIe,EAAUe,EAAS,KAAK,CAAC,EAAGf,EAAUe,EAAS,KAAK,CAAC,EAAGA,EAAS,WAAY,EAAGC,EAAO,EACnG/B,EAAQ,UAAS,EACjBA,EAAQ,OAAM,EAEV8B,EAAS,QAAU,KACnB9B,EAAQ,UAAS,EACjBA,EAAQ,IAAIe,EAAUe,EAAS,UAAU,CAAC,EAAGf,EAAUe,EAAS,UAAU,CAAC,EAAGA,EAAS,gBAAiB,EAAGC,EAAO,EAClH/B,EAAQ,UAAS,EACjBA,EAAQ,OAAM,GAGlBA,EAAQ,YAAc6B,GAAY,UAAU,EAC5C7B,EAAQ,UAAY,EAEpBA,EAAQ,UAAS,EACjBA,EAAQ,IAAIe,EAAUe,EAAS,OAAO,CAAC,EAAGf,EAAUe,EAAS,OAAO,CAAC,EAAGA,EAAS,aAAc,EAAGC,EAAO,EACzG/B,EAAQ,UAAS,EACjBA,EAAQ,OAAM,EACV8B,EAAS,UAAY,KACrB9B,EAAQ,UAAY6B,GAAY,SAAU,EAC1C7B,EAAQ,KAAI,GAKxB,EAEM2B,GAAY,IAAK,CACnB,GAAI,GAAO,CACP3B,EAAQ,WAAa,EACrBA,EAAQ,YAAc,QAEtB,IAAMgC,GAAaC,GAAG,EAAKC,IAAO,QAAO,EACnCC,GAAO,EAAIC,GAAQ,QAAO,EAEhCC,GACI,EAAGtC,EAAa,OAAS,EAAI,EAC7B,OAAOoC,CAAG,SAASH,CAAS,GAC5B,UAAU,EAGdhC,EAAQ,WAAa,CAgBzB,CACJ,EAEMqC,GAAW,CAACC,EAAWC,EAAWC,EAAcC,IAAiB,CACnE,QAASC,EAAI,EAAGA,EAAIF,EAAK,OAAQE,IAAK,CAClC,IAAMC,EAAOH,EAAKE,CAAC,EAAE,YAAW,EAAG,WAAW,CAAC,EACzCE,EAAKC,GAAgBF,CAAI,EAC/B,GAAIC,IAAO,OAAW,CAClB,IAAME,EAAOC,GAAgBH,EAAIH,CAAK,EAClCO,EAAQC,EAAOH,CAAI,EACnBE,IAAU,QACVE,EAAUlD,EAASgD,EAAOV,EAAII,EAAI,EAAGH,CAAC,CAE9C,CACJ,CACJ,EAEMY,GAAa,CAACb,EAAWC,EAAWC,EAAcC,IAAiB,CACrEJ,GAASC,EAAI,EAAGC,EAAI,EAAGC,EAAM,UAAU,EACvCH,GAASC,EAAI,EAAGC,EAAI,EAAGC,EAAM,UAAU,EACvCH,GAASC,EAAI,EAAGC,EAAI,EAAGC,EAAM,UAAU,EACvCH,GAASC,EAAI,EAAGC,EAAI,EAAGC,EAAM,UAAU,EACvCH,GAASC,EAAGC,EAAGC,EAAMC,CAAK,CAC9B,EAEMf,GAAS,IAAK,CAChB,OAAQ0B,EAAK,MAAO,CAChB,IAAA,GACI,IAAMC,EAAOC,GAAO,EACdC,EAASC,EAAM,EAAGzC,EAAUsC,EAAK,OAAO,MAAM,EAAGtC,EAAUsC,EAAK,MAAM,CAAC,EACvEI,EAAa,GAAGJ,EAAK,OAAO,IAAI,IAAIE,CAAM,GAChDJ,GAAW,EAAG,EAAGM,EAAY,UAAU,EAGvC,IAAMC,EAAY,SADJC,GAAQ,CACU,GAC1BC,EAAaF,EAAU,OAAS,EACtCP,GAAWjD,EAAY0D,EAAa,EAAG,EAAGF,EAAW,UAAU,EAE/D,IAAMG,EAAS,CAAC,GAAGC,CAAI,EAGvB,GAFAD,EAAO,KAAK,CAACxC,EAAGC,IAAMD,EAAE,OAASC,EAAE,MAAM,EAErCuC,EAAO,QAAU,EAAG,CACpB,IAAME,EAAWF,EAAO,CAAC,EACnBN,EAASC,EAAM,EAAGzC,EAAUgD,EAAS,OAAO,MAAM,EAAGhD,EAAUgD,EAAS,MAAM,CAAC,EAC/EN,EAAa,GAAGM,EAAS,OAAO,IAAI,IAAIR,CAAM,GACpDJ,GAAW,EAAGhD,EAAa,EAAI,EAAGsD,EAAY,UAAU,CAC5D,CAEA,GAAII,EAAO,QAAU,EAAG,CACpB,IAAME,EAAWF,EAAO,CAAC,EACnBN,EAASC,EAAM,EAAGzC,EAAUgD,EAAS,OAAO,MAAM,EAAGhD,EAAUgD,EAAS,MAAM,CAAC,EAC/EN,EAAa,GAAGM,EAAS,OAAO,IAAI,IAAIR,CAAM,GACpDJ,GAAWjD,EAAY,EAAIuD,EAAW,OAAS,EAAGtD,EAAa,EAAI,EAAGsD,EAAY,UAAU,CAChG,CACA,MAEJ,IAAA,GACIO,GAAS,UAAU,EACnB,IAAMC,EAAe,YACrBd,IACKjD,EAAY+D,EAAa,OAAS,GAAK,GACvC9D,EAAa,GAAK,EACnB8D,EACA,UAAU,EAGdC,GAAY,EACZ,MAEJ,IAAA,GACIF,GAAS,UAAU,EAEnB,IAAMG,EAAc,mBACpBhB,IACKjD,EAAYiE,EAAY,OAAS,GAAK,GACtChE,EAAa,GAAK,EACnBgE,EACA,UAAU,EAGdD,GAAY,EACZ,KACR,CACJ,EAEMA,GAAe,IAAK,CACtB,IAAME,EAAYC,GAAW,qBAAuB,gBAC9CC,EAAYD,GAAW,GAAK,iBAClClB,IACKjD,EAAYkE,EAAU,OAAS,GAAK,GACpCjE,EAAa,GAAK,EAAI,GACvBiE,EACA,UAAU,EAEdjB,IACKjD,EAAYoE,EAAU,OAAS,GAAK,GACpCnE,EAAa,GAAK,EAAI,GACvBmE,EACA,UAAU,CAElB,EAEMN,GAAYvB,GAAiB,CAC/BzC,EAAQ,UAAY6B,GAAYY,CAAK,EACrCzC,EAAQ,SAAS,EAAG,EAAGD,EAAa,MAAOA,EAAa,MAAM,CAClE,EClRO,IAAMwE,EAAwC,CAAA,EAE/CC,GAAmC,CAAA,EAC9BC,GAAS,GAEPC,GAAaC,GAAmBF,GAASE,EAEzCC,GAAY,IAAK,CAC1BC,GAAY,UAAa,GAAK,CAE1BC,GAAW,EACXL,GAAS,GACTD,GAAK,EAAE,OAAO,EAAI,GAClB,EAAE,eAAc,CACpB,EAEAK,GAAY,QAAW,GAAK,CACxBJ,GAAS,GACTM,GAAW,EAAE,OAAO,EACpB,EAAE,eAAc,CACpB,EAEAC,EAAa,YAAe,GAAK,CAC7BP,GAAS,GACTK,GAAW,EACX,EAAE,eAAc,CACpB,EAEAE,EAAa,YAAe,GAAK,CAC7B,EAAE,eAAc,CACpB,EAEAA,EAAa,UAAa,GAAK,CAC3BP,GAAS,GACT,EAAE,eAAc,CACpB,EAEA,IAAMQ,EAAW,CAAC,EAAeC,IAA+C,CAC5E,IAAMC,EAAiB,EAAE,eACzB,QAASC,EAAI,EAAGA,EAAID,EAAe,OAAQC,IAAK,CAC5C,GAAM,CAAE,QAAAC,EAAS,QAAAC,EAAS,WAAAC,CAAU,EAAKJ,EAAeC,CAAC,EACzDF,EACIK,EACA,CACI,EAAGF,EAAUG,GACb,EAAGF,EAAUE,GACb,QAAS,GACZ,CAET,CACA,EAAE,eAAc,CACpB,EAEAR,EAAa,aAAgB,GAAK,CAC9BP,GAAS,GACTgB,GAAgB,CAAA,EAChBR,EAAS,EAAG,CAACS,EAAIC,IAAK,CAAGpB,EAAQmB,CAAE,EAAIC,EAAGA,EAAE,QAAU,EAAM,CAAC,CACjE,EAEAX,EAAa,YAAe,GAAK,CAC7BC,EAAS,EAAG,CAACS,EAAIC,IAAK,CAAGpB,EAAQmB,CAAE,EAAIC,CAAG,CAAC,CAC/C,EAEAX,EAAa,WAAc,GAAK,CAC5BP,GAAS,GACTQ,EAAS,EAAG,CAACS,EAAIC,IAAK,CAAG,OAAOpB,EAAQmB,CAAE,CAAG,CAAC,CAClD,EAEAV,EAAa,cAAiB,GAAK,CAC/BC,EAAS,EAAG,CAACS,EAAIC,IAAK,CAAG,OAAOpB,EAAQmB,CAAE,CAAG,CAAC,CAClD,CACJ,EAqBaE,EAAgBC,GAAmCrB,GAAKqB,CAAI,EAC5Dd,GAAcc,GAAc,OAAOrB,GAAKqB,CAAI,ECrGzD,eAAsBC,IAAa,CAE/B,IAAMC,EAAS,MADE,MAAM,MAAM,GAAG,GACF,YAAW,EAEnCC,EAAS,IAAI,WAAWD,CAAM,EAEhCE,EAAI,EAEFC,EAAeF,EAAOC,GAAG,EAAI,EAC7BE,EAAWH,EAAO,MAAMC,EAAGA,EAAIC,CAAY,EACjDD,GAAKC,EAEL,IAAIE,EAAeJ,EAAOC,GAAG,EAE7B,KAAOG,KAAgB,CACnB,IAAMC,EAAQL,EAAOC,GAAG,EAClBK,EAASN,EAAOC,GAAG,EAEnBM,EAAYF,EAAQC,EAEpBE,EAASR,EAAO,MAAMC,EAAGA,EAAIM,CAAS,EAC5CN,GAAKM,EAEL,IAAIE,EAAUC,GAAa,EAC3BC,GAASF,EAASJ,CAAK,EACvBO,GAAUH,EAASH,CAAM,EAEzB,IAAIO,EAAYJ,EAAQ,aAAa,EAAG,EAAGJ,EAAOC,CAAM,EAExD,QAASL,EAAI,EAAGA,EAAIO,EAAO,OAAQP,IAAK,CACpC,IAAIa,EAAIN,EAAOP,CAAC,GAAK,EAErBY,EAAU,KAAK,IAAIV,EAAS,MAAMW,EAAGA,EAAI,CAAC,EAAGb,GAAK,CAAC,CACvD,CAEAQ,EAAQ,aAAaI,EAAW,EAAG,CAAC,EAEpCE,EAAO,KAAKC,GAAUP,CAAO,CAAC,CAClC,CACJ,CChCO,IAAMQ,GAAc,IAAY,CAKnCC,EAAgB,GAAS,EAAE,EAC3BA,EAAgB,GAAS,EAAE,EAC3BA,EAAgB,GAAS,EAAE,EAC3BA,EAAgB,GAAS,EAAE,EAC3BA,EAAgB,GAAS,EAAE,EAC3BA,EAAgB,GAAS,EAAE,EAE3B,IAAMC,EAAcC,GAAmB,IAAY,GAAW,EACxDC,EAAaC,GAAkB,IAAY,EAAU,EAErDC,EAAaC,GAAY,EACzBC,EAAcC,EAAWH,CAAU,EACzCA,EAAW,MAAQ,IACnBA,EAAW,OAAS,IACpBI,EAAUF,EAAaJ,EAAY,EAAG,CAAC,EACvCM,EAAUF,EAAaN,EAAa,EAAG,EAAU,EAEjD,IAAMS,EAAOC,GAASN,CAAU,EAE1BO,EAAU,GACVC,EAAU,EAEhBb,EAAgB,CAAQ,EAExB,IAAMc,EAAqB,CAAA,EAE3B,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACpBC,GAAcF,EAAO,GAAKC,EAAI,GAAI,GAAG,EAGzCC,GAAcF,EAAO,GAAI,GAAG,EAC5BE,GAAcF,EAAO,IAAK,GAAG,EAE7Bd,EAAgB,CAAQ,EAExB,QAASe,EAAI,EAAGA,EAAI,GAAIA,IACpBE,GAAYH,EAAO,IAAMC,EAAI,GAAI,GAAG,EAGxCf,EAAgB,CAAY,EAE5B,QAASe,EAAI,EAAGA,EAAI,EAAGA,IACnBG,GAAiBJ,EAAO,GAAKC,EAAI,GAAI,GAAG,EAG5C,MAAO,CACH,OAAQ,CACJ,EAAGH,EACH,EAAG,GAAaC,EAChB,EAAG,IAAaD,EAAU,EAC1B,EAAG,IAAcC,EAAU,GAE/B,KAAM,CAAE,MAAOH,CAAI,EACnB,OAAQ,CAAE,EAAG,EAAG,EAAG,CAAC,EACpB,MAAOI,EAEf,EAEME,GAAgB,CAACF,EAAoBK,EAAWC,IAAa,CAC/DN,EAAM,KACF,CACI,OAAQ,CAAE,MAAO,CAAQ,EACzB,SAAU,CAAE,EAAAK,EAAG,EAAAC,CAAC,EAChB,OAAQ,CAAE,EAAG,GAAI,EAAG,EAAE,EACtB,OAAQ,CAAE,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,EAAE,EACzC,EAGDC,EAAO,EAAG,GACVP,EAAM,KACF,CACI,OAAQ,CAAE,MAAOQ,EAAa,CAAC,GAAS,GAAS,GAAS,GAAS,GAAS,EAAO,CAAC,CAAC,EACrF,SAAU,CAAE,EAAGH,EAAG,EAAGC,CAAC,EACtB,OAAQ,CAAE,EAAG,EAAIG,EAAY,GAAI,CAAC,EAAG,EAAG,GAAUA,EAAY,GAAI,CAAC,CAAC,EACpE,OAAQ,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACnC,EAILF,EAAO,EAAG,GACVP,EAAM,KACF,CACI,OAAQ,CAAE,MAAOQ,EAAa,CAAC,GAAS,GAAS,GAAS,GAAS,GAAS,EAAO,CAAC,CAAC,EACrF,SAAU,CAAE,EAAGH,EAAG,EAAGC,CAAC,EACtB,OAAQ,CAAE,EAAG,EAAIG,EAAY,GAAI,CAAC,EAAG,EAAG,GAAUA,EAAY,GAAI,CAAC,CAAC,EACpE,OAAQ,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACnC,CAGb,EAEMN,GAAc,CAACH,EAAoBK,EAAWC,IAAa,CAC7DN,EAAM,KACF,CACI,OAAQ,CAAE,MAAO,CAAQ,EACzB,SAAU,CAAE,EAAAK,EAAG,EAAAC,CAAC,EAChB,OAAQ,CAAE,EAAG,GAAI,EAAG,EAAE,EACtB,OAAQ,CAAE,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAE,EACvC,CAET,EAEMF,GAAmB,CAACJ,EAAoBK,EAAWC,IAAa,CAUlE,GATAN,EAAM,KACF,CACI,OAAQ,CAAE,MAAO,CAAY,EAC7B,SAAU,CAAE,EAAAK,EAAG,EAAAC,CAAC,EAChB,OAAQ,CAAE,EAAG,GAAI,EAAG,EAAE,EACtB,OAAQ,CAAE,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,EAAE,EACzC,EAGDC,EAAO,EAAG,EAAG,CACb,IAAMG,EAASC,GAAe,EACxBC,EAASC,EAAUJ,EAAY,EAAG,CAAC,CAAC,EAC1CT,EAAM,KACF,CACI,OAAQ,CAAE,MAAOU,EAAO,WAAW,IAAI,CAAC,EAAE,KAAK,EAC/C,SAAU,CAAE,EAAGL,EAAIO,EAAQ,EAAGN,EAAIM,CAAM,EACxC,OAAQ,CAAE,EAAG,GAAI,EAAG,EAAE,EACtB,OAAQ,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAE,EACrC,EAGLZ,EAAM,KACF,CACI,OAAQ,CAAE,MAAOQ,EAAa,CAAC,GAAS,GAAS,GAAS,GAAS,GAAS,EAAO,CAAC,CAAC,EACrF,SAAU,CAAE,EAAGH,EAAG,EAAGC,CAAC,EACtB,OAAQ,CAAE,EAAG,EAAIG,EAAY,GAAI,CAAC,EAAG,EAAG,GAAUA,EAAY,GAAI,CAAC,CAAC,EACpE,OAAQ,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACnC,CAET,CAGJ,EAEMrB,GAAqB,CAAC0B,EAAeC,IAAqC,CAC5E,IAAMC,EAAQC,GAAwBH,EAAOC,EAAQ,CAAC,EAAW,EAAW,EAAW,CAAS,EAAG,CAAC,EAAG,EAAG,EAAG,CAAC,CAAC,EACzGG,EAAUxB,EAAWsB,CAAK,EAE1BG,EAAS,GAEfD,EAAQ,UAAY,QACpBA,EAAQ,SAAS,EAAG,EAAGF,EAAM,MAAO,CAAC,EAErCI,GAAcF,EAAS,EAAG,EAAGF,EAAM,MAAOG,EAAQ,WAAY,CAAC,EAC/DC,GAAcF,EAAS,EAAGF,EAAM,OAASG,EAAQH,EAAM,MAAOG,EAAQ,EAAG,UAAU,EAEnF,IAAIE,EAAa,IAEjB,KAAOA,KAAe,GAAG,CACrBH,EAAQ,YAAcT,EAAY,GAAK,EAAG,EAC1C,IAAMa,EAAQC,EAAOf,EAAa,CAAC,IAAQ,IAAQ,IAAQ,IAAQ,GAAM,CAAC,CAAC,EAC3Eb,EAAUuB,EAASI,EAAOb,EAAY,EAAGK,CAAK,EAAGL,EAAY,EAAGM,CAAM,CAAC,CAC3E,CAEA,OAAAS,GAAM,GAAIR,CAAK,EAERA,CACX,EAEM1B,GAAoB,CAACwB,EAAeC,IAAqC,CAC3E,IAAMC,EAAQS,GAAkBX,EAAOC,EAAQ,CAAQ,EACjDG,EAAUxB,EAAWsB,CAAK,EAE1BU,EAAU,CAAC,EAAU,GAAU,EAAQ,EACvCC,EAAiB,CAAC,EAAG,EAAG,CAAC,EAEzBC,EAAa,GAEnB,QAASvB,EAAI,EAAGA,EAAIS,EAAOT,GAAKuB,EAC5B,QAAStB,EAAI,EAAGA,EAAIQ,EAAOR,GAAK,GAAI,CAChC,IAAMuB,EAAcN,EAAOO,GAAoBJ,EAASC,CAAc,CAAC,EACvEhC,EAAUuB,EAASW,EAAaxB,EAAGC,CAAC,CACxC,CAGJyB,GACI,CACI,GAAUH,EAAa,GAAI,EAC3B,GAAUA,EAAa,EAAI,GAAI,EAC/B,GAAUA,EAAa,EAAI,GAAI,EAE/B,GAAUA,EAAa,EAAI,GAAI,EAC/B,GAAUA,EAAa,EAAI,GAAI,GAEnCV,CAAO,EAGXc,GAAUd,EAAS,GAAI,EAAE,EACzBc,GAAUd,EAAS,IAAK,EAAE,EAC1Bc,GAAUd,EAAS,IAAK,EAAE,EAE1B,IAAMC,EAAS,GACf,OAAAC,GAAcF,EAAS,EAAGF,EAAM,OAASG,EAAQH,EAAM,MAAOG,EAAQ,EAAG,UAAU,EAEnFK,GAAM,GAAIR,CAAK,EAERA,CACX,EAEMiB,GAAc,CAACf,EAAmCgB,EAAwB7B,EAAWC,IAAa,CACpG,QAASL,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMe,EAAQR,EAAa0B,CAAO,EAClCC,GAAWjB,EAAS,CAAE,MAAOF,EAAO,EAAGf,EAAI,EAAII,EAAG,EAAAC,CAAC,CAAE,CACzD,CACJ,EAEA,SAAS0B,GAAUd,EAAmCb,EAAWC,EAAS,CACtEY,EAAQ,aAAa,EAAG,EAAG,EAAG,EAAGb,EAAGC,CAAC,EAErC8B,GAAYlB,EAAS,CACjB,CAAE,MAAO,EAAQ,EACjB,CAAE,MAAO,GAAU,EAAG,EAAE,EACxB,CAAE,MAAO,GAAU,EAAG,GAAI,MAAO,EAAI,EACrC,CAAE,MAAO,GAAU,EAAG,EAAE,EACxB,CAAE,MAAO,GAAU,EAAG,GAAI,MAAO,EAAI,EACrC,CAAE,MAAO,GAAU,EAAG,GAAI,EAAG,GAAI,MAAO,EAAI,EAC5C,CAAE,MAAO,GAAU,EAAG,GAAI,EAAG,GAAI,MAAO,GAAM,MAAO,EAAI,EACzD,CAAE,MAAO,GAAU,EAAG,GAAI,EAAG,EAAE,EAC/B,CAAE,MAAO,GAAU,EAAG,GAAI,EAAG,GAAI,MAAO,EAAI,EAC5C,CAAE,MAAO,GAAW,EAAG,EAAG,EAAG,EAAE,EAC/B,CAAE,MAAO,GAAW,EAAG,GAAI,EAAG,EAAE,EAChC,CAAE,MAAO,GAAW,EAAG,GAAI,EAAG,EAAE,EAChC,CAAE,MAAO,GAAW,EAAG,EAAG,EAAG,EAAE,EAC/B,CAAE,MAAO,GAAW,EAAG,GAAI,EAAG,EAAE,EAChC,CAAE,MAAO,GAAW,EAAG,GAAI,EAAG,EAAE,EACnC,EAEDe,GAAYf,EAAS,CAAC,GAAS,GAAS,EAAO,EAAG,GAAI,EAAE,EACxDe,GAAYf,EAAS,CAAC,GAAS,GAAS,EAAO,EAAG,GAAI,EAAE,EACxDe,GAAYf,EAAS,CAAC,EAAO,EAAG,GAAI,EAAE,EAEtCA,EAAQ,eAAc,CAC1B,CChPO,IAAMmB,GAAQ,IAAK,CACtBC,GAAU,EACVC,GAAa,EACbC,GAAS,EAETC,GAASC,GAAW,CAAE,EAEtBC,GAAU,EAEV,IAAMC,EAAQC,EAAQ,EAEhBC,EAAOC,GAAO,EACpBD,EAAK,SAAS,EAAIF,EAAM,OAAO,EAAI,GACnCE,EAAK,SAAS,EAAIF,EAAM,OAAO,EAAIA,EAAM,OAAO,EAAI,CACxD,EAEaI,GAAa,IAAK,CAC3BC,EAAK,QAAUC,EACXD,EAAK,OAAS,GACVE,KACAF,EAAK,MAAK,EACVZ,GAAK,EAGjB,EC9BO,IAAMe,GAAuB,IAAK,CACrC,IAAMC,EAAQC,EAAQ,EAChBC,EAAOC,GAAO,EAEpBH,EAAM,OAAO,EAAIE,EAAK,SAAS,EAAIE,EAAY,EAC/CJ,EAAM,OAAO,EAAIE,EAAK,SAAS,EAAIG,EAAa,CACpD,ECGO,IAAMC,GAAiB,IAAK,CAC/B,IAAMC,EAAQC,EAAQ,EAEtB,QAAWC,KAAQC,EACf,QAAWC,KAAQJ,EAAM,MAAO,CAC5B,GAAII,EAAK,OAAO,GAAK,GAAKA,EAAK,OAAO,GAAK,EACvC,SAGJ,IAAIC,EAAOD,EAAK,SAAS,EAAIA,EAAK,OAAO,EACrCE,EAAOF,EAAK,SAAS,EAAIA,EAAK,OAAO,EAErCG,EAAOF,EAAOD,EAAK,OAAO,EAC1BI,EAAOF,EAAOF,EAAK,OAAO,EAExBK,EAAOP,EAAK,SAAS,EAAIG,EACzBK,EAAMR,EAAK,SAAS,EAAII,EACxBK,EAAQJ,EAAOL,EAAK,SAAS,EAC7BU,EAASJ,EAAON,EAAK,SAAS,EAEpC,GAAIO,EAAO,GAAKC,EAAM,GAAKC,EAAQ,GAAKC,EAAS,EAAG,CAChD,IAAMC,EAAMC,GAAQL,EAAMC,EAAKC,EAAOC,CAAM,EAExCH,GAAQI,IACRX,EAAK,SAAS,GAAKO,GAGnBC,GAAOG,IACPX,EAAK,SAAS,GAAKQ,GAGnBC,GAASE,IACTX,EAAK,SAAS,GAAKS,GAGnBC,GAAUC,IACVX,EAAK,SAAS,GAAKU,EAE3B,CACJ,CAER,EClDO,IAAMG,GAAe,IAAK,CAGzBC,EAAY,EAAA,IACZC,GAAc,KAAK,OAAS,KAG5BD,EAAY,EAAA,IACZC,GAAc,KAAK,OAAS,KAGhCA,GAAc,KAAK,MAAQC,EAAM,EAAG,EAAGD,GAAc,KAAK,KAAK,EAE3DD,EAAY,EAAA,IACZG,GAAY,OAAS,KAGrBH,EAAY,EAAA,IACZG,GAAY,OAAS,KAGzBA,GAAY,MAAQD,EAAM,EAAG,EAAGC,GAAY,KAAK,CACrD,ECNI,GAKJ,IAAMC,GAAS,IAAK,CAKhB,OAJAC,GAAa,EACbC,GAAU,EACVC,GAAa,EAELC,EAAK,MAAO,CAChB,IAAA,GACIC,GAAc,EACdC,GAAY,EACZC,GAAU,EACVC,GAAU,EACVC,GAAW,EACXC,GAAc,EACdC,GAAgB,EAChBC,GAAmB,EACnBC,GAAa,EACb,MAEJ,QACIC,GAAU,EACV,KACR,CAEAC,GAAoB,EACpBC,GAAW,EACXC,GAA0B,EAE1BC,GAAI,EAEJC,GAAY,EAEZ,sBAAsBnB,EAAM,CAChC,EAEA,eAAeoB,IAAI,CACf,MAAMC,GAAa,EACnBC,GAAS,EACTC,GAAS,EACTC,GAAmB,EACnBC,GAAK,EACLzB,GAAM,CACV,CAEAoB,GAAI",
  "names": ["math", "mathFloor", "mathCeil", "mathRound", "mathMin", "mathMax", "mathHypot", "mathAbs", "mathRandom", "mathAtan2", "mathCos", "mathSin", "mathPI", "mathPI2", "numberMax", "limit", "min", "max", "value", "lerp", "randomRange", "chance", "randomSelect", "values", "randomChancesSelect", "chances", "total", "p", "c", "domDocument", "hasTouch", "canvasName", "getContext", "canvas", "createCanvas", "domDocument", "createContext", "getCanvas", "context", "setWidth", "context", "width", "getCanvas", "setHeight", "height", "drawImage", "context", "image", "x", "y", "mathRound", "now", "cloneObject", "source", "timeout", "time", "resolve", "formatColor", "c", "a", "r", "g", "b", "createGradient", "context", "x0", "y0", "x1", "y1", "startColor", "endColor", "gradient", "generateRandomTileImage", "width", "height", "ids", "chances", "canvas", "createCanvas", "context", "getContext", "image", "images", "sx", "mathCeil", "sy", "x", "y", "randomChancesSelect", "generateTileImage", "imageId", "drawCommands", "commands", "i", "id", "drawImage", "drawGradientV", "startColor", "endColor", "createGradient", "filterImage", "canvas", "filter", "context", "getContext", "width", "height", "imageData", "pixels", "i", "pixel", "cloneCanvas", "source", "target", "createCanvas", "applyPallette", "canvas", "sourcePallette", "targetPallette", "filterImage", "pixel", "sourceColor", "pixelToColor", "index", "targetColor", "colorToPixel", "applyShadow", "context", "getContext", "imageData", "data", "x", "y", "i", "l", "left", "r", "right", "u32", "g", "b", "color", "a", "noise", "offset", "offset2", "mathRandom", "images", "coloredImages", "noisedImages", "addImage", "image", "id", "getColoredImage", "color", "key", "a", "r", "g", "b", "coloredImage", "cloneCanvas", "filterImage", "addNoiseToImage", "value", "source", "noise", "background_default", "zzfx", "zzfxP", "zzfxG", "zzfxX", "f", "zzfxR", "d", "i", "q", "k", "c", "e", "t", "u", "r", "F", "v", "z", "w", "A", "l", "B", "x", "G", "y", "m", "C", "b", "H", "I", "D", "Z", "g", "E", "a", "n", "J", "K", "p", "h", "zzfxV", "zzfxM", "instruments", "patterns", "sequence", "BPM", "instrumentParameters", "j", "note", "sample", "patternChannel", "notFirstBeat", "stop", "instrument", "pitch", "attenuation", "outSampleOffset", "isSequenceEnd", "sampleOffset", "nextSampleOffset", "sampleBuffer", "leftChannelBuffer", "rightChannelBuffer", "channelIndex", "panning", "hasMore", "sampleCache", "beatLength", "patternIndex", "sequenceIndex", "musicGainNode", "zzfxX", "effectsGain", "effectHit", "effectKick", "effectWhoosh", "effectLoose", "effectWin", "unlockAudio", "force", "zzfxX", "playMusic", "buffer", "renderSong", "background_default", "node", "zzfxP", "musicGainNode", "song", "timeout", "zzfxM", "playEffect", "effect", "volume", "effectGainNode", "effectsGain", "zzfx", "playWhoosh", "effectWhoosh", "playHit", "effectHit", "playKick", "effectKick", "playLoose", "effectLoose", "playWin", "effectWin", "Vector2", "a", "l", "mathHypot", "b", "s", "Box2", "b", "v", "nowMS", "now", "deltaS", "calculateTime", "oldMS", "animationDuration", "animation", "time", "frame", "getFrameImage", "animationTime", "duratuion", "i", "isAnimationFinished", "effects", "hitEffect", "hitMiniEffect", "hitRedEffect", "removeEffect", "effect", "index", "addEffect", "config", "position", "updateEffects", "duration", "animationDuration", "deltaS", "getFrameImage", "entities", "removeEntity", "entity", "index", "clearEntities", "stage", "getStage", "setStage", "value", "item", "entities", "limitCamera", "back", "images", "gameWidth", "gameHeight", "units", "addUnit", "config", "unit", "entities", "removeUnit", "index", "removeEntity", "clearUnits", "limitUnitsPositions", "stage", "getStage", "limit", "updateUnits", "updateUnit", "currentAnimation", "animations", "checkAttack", "mathAbs", "Vector2", "deltaS", "isAnimationFinished", "animationDuration", "getFrameImage", "getColoredImage", "applyUnitsDamage", "current", "opponent", "opponentDistanceX", "numberMax", "opponentDistanceY", "directionX", "distanceX", "distanceY", "effect", "playKick", "hitEffect", "playHit", "chance", "hitRedEffect", "hitMiniEffect", "addEffect", "randomRange", "randomChancesSelect", "randomSelect", "playWhoosh", "updateUnitsSpritePositions", "updateUnitSpritePosition", "getChars", "chars", "font", "getIdByCharCode", "code", "drawSprite", "context", "sprite", "image", "images", "a", "b", "c", "d", "tx", "mathRound", "ty", "drawImage", "drawSprites", "sprites", "joystick", "border", "delta", "updateJoystick", "hasTouch", "screenCanvas", "touchId", "touches", "touch", "Vector2", "direction", "game", "gamepadData", "pressed", "updateGamepad", "gamepads", "pressedNow", "gamepad", "i", "mathAbs", "Vector2", "setAnyKey", "minDistance", "fightDistanceX", "fightDistanceY", "safeDistanceX", "safeDistanceY", "attackers", "resetAttackersTimer", "mobs", "pallette", "baseConfig", "mobsConfigs", "randomMobConfig", "randomSelect", "generateMobsConfigs", "generateConfig", "hairs", "skins", "shirts", "pants", "shoes", "hair", "face", "shirt", "pant", "shoe", "body", "hand0", "hand1", "hand2", "legs0", "legs1", "chance", "targetPallette", "newConfig", "cloneObject", "randomRange", "id", "animations", "name", "animation", "replaceImagesPallette", "image", "newImage", "getPalletteImage", "sourcePallette", "palletteId", "frame", "imagesPallete", "key", "target", "cloneCanvas", "images", "applyPallette", "applyShadow", "noise", "addImage", "createMob", "config", "mob", "addUnit", "mobData", "removeMob", "mob", "index", "mobs", "removeAttacker", "attackers", "updateMobs", "resetAttackersTimer", "deltaS", "randomRange", "hero", "getHero", "units", "mobData", "updateAttackersList", "onFightDistance", "direction", "Vector2", "limit", "walkToHero", "onSafeDistance", "mobsCollision", "i", "mob0", "j", "mob1", "distance", "minDistance", "scale", "attackersMax", "setAttackers", "count", "nearDistance", "numberMax", "nearMob", "furtherUnit", "furtherDistance", "attacker", "onDistance", "fightDistanceX", "fightDistanceY", "safeDistanceX", "safeDistanceY", "dx", "dy", "mathAbs", "waves", "getLevel", "lastLevel", "initWaves", "reactionStart", "reactionEnd", "countStart", "countEnd", "healthStart", "healthEnd", "walkSpeedStart", "walkSpeedEnd", "attackersStart", "attackersEnd", "wavesCount", "i", "value", "reaction", "lerp", "count", "mathRound", "health", "walkSpeed", "attackers", "names", "getZones", "zones", "stage", "getStage", "leftMin", "mathMax", "leftMax", "left", "rightMin", "gameWidth", "rightMax", "mathMin", "right", "generateMobs", "mobs", "usualMobsConfigs", "mobsConfigs", "wave", "setAttackers", "waveMob", "config", "cloneObject", "randomSelect", "mob", "createMob", "mobData", "zone", "randomRange", "units", "game", "playWin", "heroInputType", "setHeroInputType", "value", "config", "hero", "createHero", "addUnit", "getHero", "updateHero", "units", "game", "playLoose", "isKeyPressed", "joystick", "direction", "Vector2", "gamepadData", "screenCanvas", "context", "getContext", "gameWidth", "gameHeight", "screenOffset", "screenScale", "updateSize", "screenWidth", "screenHeight", "mathMin", "mathMax", "mathFloor", "draw", "stage", "getStage", "mathRound", "drawSprite", "unit", "units", "item", "entities", "a", "b", "entity", "effect", "effects", "drawUI", "drawDebug", "heroInputType", "formatColor", "joystick", "mathPI2", "frameTime", "now", "nowMS", "fps", "deltaS", "drawText", "x", "y", "text", "color", "i", "code", "id", "getIdByCharCode", "char", "getColoredImage", "image", "images", "drawImage", "drawUIText", "game", "hero", "getHero", "health", "limit", "healthText", "levelText", "getLevel", "levelWidth", "eneies", "mobs", "attacker", "drawBack", "gameOverText", "drawPressAny", "gameWinText", "pressAny1", "hasTouch", "pressAny2", "touches", "keys", "anyKey", "setAnyKey", "value", "initInput", "domDocument", "unlockAudio", "unpressKey", "screenCanvas", "forTouch", "handler", "changedTouches", "i", "clientX", "clientY", "identifier", "screenScale", "setHeroInputType", "id", "t", "isKeyPressed", "code", "loadResources", "buffer", "stream", "p", "palletteSize", "pallette", "imagesLength", "width", "height", "imageSize", "pixels", "context", "createContext", "setWidth", "setHeight", "imageData", "c", "images", "getCanvas", "getBarStage", "addNoiseToImage", "floorCanvas", "generateFloorImage", "wallCanvas", "generateWallImage", "backCanvas", "createCanvas", "backContext", "getContext", "drawImage", "back", "addImage", "borderX", "borderY", "items", "i", "addBarCounter", "addBarStool", "addTableArmchair", "x", "y", "chance", "randomSelect", "randomRange", "config", "randomMobConfig", "offset", "mathRound", "width", "height", "image", "generateRandomTileImage", "context", "border", "drawGradientV", "trashCount", "trash", "images", "noise", "generateTileImage", "columns", "columnsChances", "columnStep", "columnImage", "randomChancesSelect", "drawCommands", "drawShelf", "drawBottles", "bottles", "drawSprite", "drawSprites", "start", "clearUnits", "clearEntities", "initWaves", "setStage", "getBarStage", "createHero", "stage", "getStage", "hero", "getHero", "startAgain", "game", "deltaS", "anyKey", "updateCameraPosition", "stage", "getStage", "hero", "getHero", "gameWidth", "gameHeight", "collisionItems", "stage", "getStage", "unit", "units", "item", "minX", "minY", "maxX", "maxY", "left", "top", "right", "bottom", "min", "mathMin", "controlAudio", "isKeyPressed", "musicGainNode", "limit", "effectsGain", "update", "calculateTime", "updateSize", "updateGamepad", "game", "updateJoystick", "generateMobs", "updateHero", "updateMobs", "updateUnits", "collisionItems", "applyUnitsDamage", "limitUnitsPositions", "updateEffects", "startAgain", "updateCameraPosition", "limitCamera", "updateUnitsSpritePositions", "draw", "controlAudio", "main", "loadResources", "playMusic", "initInput", "generateMobsConfigs", "start"]
}

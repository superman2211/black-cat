{
  "version": 3,
  "sources": ["../../src/utils/math.ts", "../../src/utils/browser.ts", "../../src/utils/pattern.ts", "../../src/utils/image.ts", "../../src/resources/images.ts", "../../src/resources/sound/background.ts", "../../src/resources/sound/zzfx.js", "../../src/resources/sound/audio.ts", "../../src/utils/geom.ts", "../../src/utils/time.ts", "../../src/engine/animation.ts", "../../src/engine/effect.ts", "../../src/engine/entity.ts", "../../src/engine/stage.ts", "../../src/engine/unit.ts", "../../src/resources/font.ts", "../../src/engine/sprite.ts", "../../src/engine/joystick.ts", "../../src/engine/graphics.ts", "../../src/engine/input.ts", "../../src/game/hero.ts", "../../src/resources/sfxr.ts", "../../src/resources/sounds.ts", "../../src/resources/loader.ts", "../../src/game/mob.ts", "../../src/game/bar.ts", "../../src/engine/waves.ts", "../../src/game/start.ts", "../../src/game/game.ts", "../../src/engine/item.ts", "../../src/resources/sound/control.ts", "../../src/index.ts"],
  "sourcesContent": ["const math = Math;\n\nexport const mathFloor = math.floor;\nexport const mathCeil = math.ceil;\nexport const mathRound = math.round;\nexport const mathMin = math.min;\nexport const mathMax = math.max;\nexport const mathHypot = math.hypot;\nexport const mathAbs = math.abs;\nexport const mathRandom = math.random;\nexport const mathAtan2 = math.atan2;\nexport const mathCos = math.cos;\nexport const mathSin = math.sin;\nexport const mathPI = math.PI;\nexport const mathPI2 = mathPI * 2;\nexport const numberMax = Number.MAX_VALUE;\n\nexport const limit = (min: number, max: number, value: number) => mathMin(max, mathMax(min, value));\nexport const lerp = (min: number, max: number, value: number) => min + value * (max - min);\nexport const randomRange = (min: number, max: number): number => lerp(min, max, mathRandom());\nexport const chance = (chance: number): boolean => mathRandom() < chance;\n\nexport function randomSelect<T>(values: T[]): T {\n    return values[mathRound(randomRange(0, values.length - 1))];\n}\n\nexport function randomChancesSelect<T>(values: T[], chances: Array<number>): T {\n    const total = chances.reduce((p, c) => p + c, 0);\n\n    const chance = mathRandom() * total;\n    \n    let c = 0;\n\n    for(let i = 0; i < values.length; i++) {\n        c += chances[i];\n        if (chance < c) {\n            return values[i];\n        }\n    }\n\n    return values[0];\n}", "import { mathRound } from \"./math\";\n\nexport const domDocument = document;\nexport const hasTouch = 'ontouchstart' in window;\nexport const dpr = devicePixelRatio;\n\nconst canvasName = 'canvas';\n\nexport const getContext = (canvas: HTMLCanvasElement) => canvas.getContext('2d')!;\nexport const createCanvas = () => domDocument.createElement(canvasName);\nexport const createContext = () => getContext(createCanvas());\nexport const getCanvas = (context: CanvasRenderingContext2D) => context.canvas;\nexport const getWidth = (context: CanvasRenderingContext2D) => getCanvas(context).width;\nexport const getHeight = (context: CanvasRenderingContext2D) => getCanvas(context).height;\nexport const setWidth = (context: CanvasRenderingContext2D, width: number) => getCanvas(context).width = width;\nexport const setHeight = (context: CanvasRenderingContext2D, height: number) => getCanvas(context).height = height;\nexport const resetTransform = (context: CanvasRenderingContext2D) => context.resetTransform();\nexport const drawImage = (context: CanvasRenderingContext2D, image: HTMLCanvasElement, x: number, y: number) => context.drawImage(image, mathRound(x), mathRound(y));\nexport const clear = (context: CanvasRenderingContext2D) => { resetTransform(context); context.clearRect(0, 0, getWidth(context), getHeight(context)); }\n\nexport const now = () => performance.now();\n\nexport const cloneObject = (source: any): any => JSON.parse(JSON.stringify(source));\n\nexport async function timeout(time: number) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, time);\n    })\n}\n", "export const formatColor = (c: number): string => {\n    const a = c >> 24 & 0xff;\n    const r = c >> 16 & 0xff;\n    const g = c >> 8 & 0xff;\n    const b = c & 0xff;\n\n    return `rgba(${r}, ${g}, ${b}, ${a / 0xff})`;\n}\n\nexport const createGradient = (\n    context: CanvasRenderingContext2D,\n    x0: number, y0: number, x1: number, y1: number,\n    startColor: number, endColor: number\n) => {\n    const gradient = context.createLinearGradient(x0, y0, x1, y1);\n    gradient.addColorStop(0, formatColor(startColor));\n    gradient.addColorStop(1, formatColor(endColor));\n    return gradient;\n}", "import { images } from \"../resources/images\";\nimport { createCanvas, drawImage, getContext } from \"./browser\";\nimport { mathCeil, mathRandom, randomChancesSelect, randomSelect } from \"./math\";\nimport { createGradient } from \"./pattern\";\n\nexport const generateRandomTileImage = (width: number, height: number, ids: Array<number>, chances: Array<number>): HTMLCanvasElement => {\n    const canvas = createCanvas();\n    const context = getContext(canvas);\n\n    let image = images[ids[0]];\n\n    canvas.width = width;\n    canvas.height = height;\n\n    const sx = mathCeil(width / image.width);\n    const sy = mathCeil(height / image.height);\n\n    for (let x = 0; x < sx; x++) {\n        for (let y = 0; y < sy; y++) {\n            image = images[randomChancesSelect(ids, chances)];\n            context.drawImage(image, x * image.width, y * image.height);\n        }\n    }\n\n    return canvas;\n}\n\nexport const generateTileImage = (width: number, height: number, imageId: number): HTMLCanvasElement => {\n    const canvas = createCanvas();\n    const context = getContext(canvas);\n\n    canvas.width = width;\n    canvas.height = height;\n\n    const image = images[imageId];\n\n    const sx = mathCeil(width / image.width);\n    const sy = mathCeil(height / image.height);\n\n    for (let x = 0; x < sx; x++) {\n        for (let y = 0; y < sy; y++) {\n            context.drawImage(image, x * image.width, y * image.height);\n        }\n    }\n\n    return canvas;\n}\n\nexport const drawCommands = (commands: Array<number>, context: CanvasRenderingContext2D) => {\n    for (let i = 0; i < commands.length; i += 3) {\n        const id = commands[i];\n        const x = commands[i + 1];\n        const y = commands[i + 2];\n        const image = images[id];\n        drawImage(context, image, x, y);\n    }\n}\n\nexport const drawGradientV = (context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, startColor: number, endColor: number) => {\n    context.fillStyle = createGradient(context, x, y, x, y + height, startColor, endColor);\n    context.fillRect(x, y, width, height);\n}\n\nexport const drawGradientH = (context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, startColor: number, endColor: number) => {\n    context.fillStyle = createGradient(context, x, y, x + width, y, startColor, endColor);\n    context.fillRect(x, y, width, height);\n}\n\nexport const filterImage = (canvas: HTMLCanvasElement, filter: (color: Uint8ClampedArray) => void) => {\n    const context = getContext(canvas);\n    const width = canvas.width;\n    const height = canvas.height;\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = imageData.data;\n\n    let i = 0;\n\n    while (i < pixels.length) {\n        const pixel = pixels.slice(i, i + 4);\n\n        filter(pixel);\n\n        pixels.set(pixel, i);\n\n        i += 4;\n    }\n\n    context.putImageData(imageData, 0, 0);\n}\n\nexport const cloneCanvas = (source: HTMLCanvasElement): HTMLCanvasElement => {\n    var target = createCanvas();\n    var context = getContext(target);\n    target.width = source.width;\n    target.height = source.height;\n    context.drawImage(source, 0, 0);\n    return target;\n}\n\nexport const getPallette = (canvas: HTMLCanvasElement): Array<number> => {\n    const pallette: Array<number> = [];\n\n    filterImage(canvas, (pixel) => {\n        const color = pixelToColor(pixel);\n        if (pallette.indexOf(color) == -1) {\n            pallette.push(color);\n        }\n    });\n\n    return pallette;\n}\n\nexport const applyPallette = (canvas: HTMLCanvasElement, sourcePallette: Array<number>, targetPallette: Array<number>) => {\n    filterImage(canvas, (pixel) => {\n        const sourceColor = pixelToColor(pixel);\n\n        const index = sourcePallette.indexOf(sourceColor);\n\n        if (index != -1) {\n            const targetColor = targetPallette[index];\n\n            colorToPixel(targetColor, pixel);\n        }\n    });\n}\n\nconst u32 = new Uint32Array(1);\n\nexport const pixelToColor = (pixel: Uint8ClampedArray): number => {\n    const r = pixel[0];\n    const g = pixel[1];\n    const b = pixel[2];\n    const a = pixel[3];\n\n    u32[0] = (a << 24) | (r << 16) | (g << 8) | b;\n\n    return u32[0];\n}\n\nexport const colorToPixel = (color: number, pixel: Uint8ClampedArray) => {\n    const a = (color >> 24) & 0xff;\n    const r = (color >> 16) & 0xff;\n    const g = (color >> 8) & 0xff;\n    const b = color & 0xff;\n\n    pixel[0] = r;\n    pixel[1] = g;\n    pixel[2] = b;\n    pixel[3] = a;\n}\n\nexport const noise = (offset: number, canvas: HTMLCanvasElement) => {\n    const context = getContext(canvas);\n    const offset2 = offset / 2;\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    let i = 0;\n    while (i < data.length) {\n        const r = data[i];\n        const g = data[i + 1];\n        const b = data[i + 2];\n        data[i] = r - offset2 + offset * mathRandom();\n        data[i + 1] = g - offset2 + offset * mathRandom();\n        data[i + 2] = b - offset2 + offset * mathRandom();\n        i += 4;\n    }\n    context.putImageData(imageData, 0, 0);\n}", "import { createCanvas, getContext } from \"../utils/browser\";\nimport { cloneCanvas, filterImage, noise } from \"../utils/image\";\nimport { mathRandom, mathRound } from \"../utils/math\";\n\nexport const images: HTMLCanvasElement[] = [];\n\nconst coloredImages: { [key: string]: number } = {};\nconst noisedImages: { [key: number]: boolean } = {};\n\nexport const addImage = (image: HTMLCanvasElement): number => {\n    const id = images.length;\n    images.push(image);\n    return id;\n}\n\nexport const getColoredImage = (id: number, color: number): number => {\n    if (id == -1) return -1;\n    \n    const key = `${id}_${color}`;\n    if (!coloredImages[key]) {\n        const a = (color >> 24) & 0xff;\n        const r = (color >> 16) & 0xff;\n        const g = (color >> 8) & 0xff;\n        const b = color & 0xff;\n\n        const coloredImage = cloneCanvas(images[id]);\n\n        filterImage(coloredImage, (color) => {\n            color[0] = r;\n            color[1] = g;\n            color[2] = b;\n            if (color[3]) {\n                color[3] = a;\n            }\n        });\n\n        coloredImages[key] = addImage(coloredImage);\n    }\n\n    return coloredImages[key];\n}\n\nexport const addNoiseToImage = (image: number) => {\n    if (!noisedImages[image]) {\n        const source = images[image];\n        noise(10, source);\n    }\n}", "export default [[[.6,0,100,,,.2,1,.5,,-10,,,,3,,,,10],[.7,0,110,,,.2,2,.1,,,,,,,,,,,.1,.4],[1.3,0,300,,,0,4,3,,,300,,,1,,,,.3,.2],[,0,,,.13,.7,2,.2,,,,,.04,.3,,.02,1,,.3,.1],[3,0,60,,,,3,.2,,,,.5,,.6,1,.05],[,0],[,0]],[[[,-.1,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,],[2,.1,,,,,1,,,,,,,,1,,,,,,,,1,,,,,,,,1,,,1,,,,,1,,,,,,,,1,,,,,,,,1,,,,,,,,1,,1,1],[1,.1,1,,13,,1,,13,,1,,13,,1,,13,,1,,13,,1,,13,,1,,13,,1,,13,,4,,16,,4,,16,,4,,16,,4,,16,,4,,16,,4,,16,,3,,15,,3,,15,,],[3,.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]],[[,-.1,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,],[2,.1,1,,,,1,,,,,,,,1,,,,,,,,1,,,,,,,,1,,,1,,,,,1,,,,,,,,1,,,,,,,,1,,,,,,,,1,,1,1],[1,.1,1,,13,13,1,,13,13,1,,13,,1,,13,13,1,,13,13,1,,13,,1,,13,13,1,,13,13,4,,16,16,4,,16,16,4,,16,,4,,16,16,4,,16,16,4,,16,16,3,,15,15,3,,15,15],[3,.4,,,,,20,,,,,,23,,,,,,25,,,,,,27,,,,,,25,,,,27,,,,,,,,,,,,,,,,28,,27,,,,25,,,,27,,,,25,,]]],[0,0,1,1],,]", "// zzfx() - the universal entry point -- returns a AudioBufferSourceNode\nconst zzfx = (...t) => zzfxP(zzfxG(...t))\n\n// zzfxP() - the sound player -- returns a AudioBufferSourceNode\nconst zzfxP = (...t) => { let e = zzfxX.createBufferSource(), f = zzfxX.createBuffer(t.length, t[0].length, zzfxR); t.map((d, i) => f.getChannelData(i).set(d)), e.buffer = f/*, e.connect(zzfxX.destination), e.start()*/; return e }\n\n// zzfxG() - the sound generator -- returns an array of sample data\nconst zzfxG = (q = 1, k = .05, c = 220, e = 0, t = 0, u = .1, r = 0, F = 1, v = 0, z = 0, w = 0, A = 0, l = 0, B = 0, x = 0, G = 0, d = 0, y = 1, m = 0, C = 0) => { let b = 2 * Math.PI, H = v *= 500 * b / zzfxR ** 2, I = (0 < x ? 1 : -1) * b / 4, D = c *= (1 + 2 * k * Math.random() - k) * b / zzfxR, Z = [], g = 0, E = 0, a = 0, n = 1, J = 0, K = 0, f = 0, p, h; e = 99 + zzfxR * e; m *= zzfxR; t *= zzfxR; u *= zzfxR; d *= zzfxR; z *= 500 * b / zzfxR ** 3; x *= b / zzfxR; w *= b / zzfxR; A *= zzfxR; l = zzfxR * l | 0; for (h = e + m + t + u + d | 0; a < h; Z[a++] = f)++K % (100 * G | 0) || (f = r ? 1 < r ? 2 < r ? 3 < r ? Math.sin((g % b) ** 3) : Math.max(Math.min(Math.tan(g), 1), -1) : 1 - (2 * g / b % 2 + 2) % 2 : 1 - 4 * Math.abs(Math.round(g / b) - g / b) : Math.sin(g), f = (l ? 1 - C + C * Math.sin(2 * Math.PI * a / l) : 1) * (0 < f ? 1 : -1) * Math.abs(f) ** F * q * zzfxV * (a < e ? a / e : a < e + m ? 1 - (a - e) / m * (1 - y) : a < e + m + t ? y : a < h - d ? (h - a - d) / u * y : 0), f = d ? f / 2 + (d > a ? 0 : (a < h - d ? 1 : (h - a) / d) * Z[a - d | 0] / 2) : f), p = (c += v += z) * Math.sin(E * x - I), g += p - p * B * (1 - 1E9 * (Math.sin(a) + 1) % 2), E += p - p * B * (1 - 1E9 * (Math.sin(a) ** 2 + 1) % 2), n && ++n > A && (c += w, D += w, n = 0), !l || ++J % l || (c = D, v = H, n = n || 1); return Z }\n\n// zzfxV - global volume\nconst zzfxV = .3\n\n// zzfxR - global sample rate\nconst zzfxR = 44100\n\n// zzfxX - the common audio context\nconst zzfxX = new (window.AudioContext || webkitAudioContext);\n\n/**\n * ZzFX Music Renderer v2.0.3 by Keith Clark and Frank Force\n */\nconst zzfxM = (instruments, patterns, sequence, BPM = 125) => {\n    let instrumentParameters;\n    let i;\n    let j;\n    let k;\n    let note;\n    let sample;\n    let patternChannel;\n    let notFirstBeat;\n    let stop;\n    let instrument;\n    let pitch;\n    let attenuation;\n    let outSampleOffset;\n    let isSequenceEnd;\n    let sampleOffset = 0;\n    let nextSampleOffset;\n    let sampleBuffer = [];\n    let leftChannelBuffer = [];\n    let rightChannelBuffer = [];\n    let channelIndex = 0;\n    let panning = 0;\n    let hasMore = 1;\n    let sampleCache = {};\n    let beatLength = zzfxR / BPM * 60 >> 2;\n\n    // for each channel in order until there are no more\n    for (; hasMore; channelIndex++) {\n\n        // reset current values\n        sampleBuffer = [hasMore = notFirstBeat = pitch = outSampleOffset = 0];\n\n        // for each pattern in sequence\n        sequence.map((patternIndex, sequenceIndex) => {\n            // get pattern for current channel, use empty 1 note pattern if none found\n            patternChannel = patterns[patternIndex][channelIndex] || [0, 0, 0];\n\n            // check if there are more channels\n            hasMore |= !!patterns[patternIndex][channelIndex];\n\n            // get next offset, use the length of first channel\n            nextSampleOffset = outSampleOffset + (patterns[patternIndex][0].length - 2 - !notFirstBeat) * beatLength;\n            // for each beat in pattern, plus one extra if end of sequence\n            isSequenceEnd = sequenceIndex == sequence.length - 1;\n            for (i = 2, k = outSampleOffset; i < patternChannel.length + isSequenceEnd; notFirstBeat = ++i) {\n\n                // <channel-note>\n                note = patternChannel[i];\n\n                // stop if end, different instrument or new note\n                stop = i == patternChannel.length + isSequenceEnd - 1 && isSequenceEnd ||\n                    instrument != (patternChannel[0] || 0) | note | 0;\n\n                // fill buffer with samples for previous beat, most cpu intensive part\n                for (j = 0; j < beatLength && notFirstBeat;\n\n                    // fade off attenuation at end of beat if stopping note, prevents clicking\n                    j++ > beatLength - 99 && stop ? attenuation += (attenuation < 1) / 99 : 0\n                ) {\n                    // copy sample to stereo buffers with panning\n                    sample = (1 - attenuation) * sampleBuffer[sampleOffset++] / 2 || 0;\n                    leftChannelBuffer[k] = (leftChannelBuffer[k] || 0) - sample * panning + sample;\n                    rightChannelBuffer[k] = (rightChannelBuffer[k++] || 0) + sample * panning + sample;\n                }\n\n                // set up for next note\n                if (note) {\n                    // set attenuation\n                    attenuation = note % 1;\n                    panning = patternChannel[1] || 0;\n                    if (note |= 0) {\n                        // get cached sample\n                        sampleBuffer = sampleCache[\n                            [\n                                instrument = patternChannel[sampleOffset = 0] || 0,\n                                note\n                            ]\n                        ] = sampleCache[[instrument, note]] || (\n                            // add sample to cache\n                            instrumentParameters = [...instruments[instrument]],\n                            // instrumentParameters[2] *= 2 ** ((note - 12) / 12),\n                            instrumentParameters[2] = (instrumentParameters[2] || 220) * (2 ** ((note - 12) / 12)),\n\n                            // allow negative values to stop notes\n                            note > 0 ? zzfxG(...instrumentParameters) : []\n                        );\n                    }\n                }\n            }\n\n            // update the sample offset\n            outSampleOffset = nextSampleOffset;\n        });\n    }\n\n    return [leftChannelBuffer, rightChannelBuffer];\n}\n\nexport { zzfx, zzfxG, zzfxP, zzfxR, zzfxV, zzfxX, zzfxM }", "import { timeout } from \"../../utils/browser\";\nimport background from \"./background\";\nimport { zzfxX as audioContext, zzfx, zzfxM, zzfxP, zzfxX } from \"./zzfx\";\n\nexport const musicGainNode = audioContext.createGain();\nexport const effectGainNode = audioContext.createGain();\n\nmusicGainNode.gain.value = 0.3;\neffectGainNode.gain.value = 0.6;\n\nconst effextHit = [, , 418, .01, .01, .03, 4, 2.1, -1, , , , , .2, , .2, , .67, .03, , 107];\nconst effextKick = [, 1, 48, , .04, .01, 4, 1.6, 1, -26, 300, , , 1.3, , .1, , .9, .03];\nconst effextStep = [.3, , 391.9954, , .005, .01, 2, .4, 1, , 1700, , , 1, , .6, , .2, .005, , 6e3];\n\nconst unlockAudio = (force = false) => {\n  if (force || audioContext.state === \"suspended\") {\n    audioContext.resume().catch();\n  }\n};\n\nconst playMusic = async () => {\n  const buffer = await renderSong(background),\n    node = zzfxP(...buffer);\n\n  node.connect(musicGainNode);\n  node.loop = true;\n  node.start();\n\n  musicGainNode.connect(zzfxX.destination);\n\n  zzfxX.resume();\n};\n\nconst renderSong = async (song: any): Promise<any[][]> => {\n  await timeout(50);\n  return zzfxM(...song);\n};\n\nconst playEffect = (effect: any) => {\n  const node = zzfx(...effect);\n  node.connect(effectGainNode);\n  node.loop = false;\n\n  effectGainNode.connect(zzfxX.destination);\n\n  node.start();\n}\n\nexport const playStep = () => playEffect(effextStep);\nexport const playHit = () => playEffect(effextHit);\nexport const playKick = () => playEffect(effextKick);\n\nexport { audioContext, unlockAudio, playMusic };\n\n", "import { mathHypot } from \"./math\"\n\nexport interface Vector2 {\n    x: number,\n    y: number,\n}\n\nexport interface Box2 {\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n}\n\nexport interface Transform {\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    tx: number,\n    ty: number,\n}\n\nexport namespace Vector2 {\n    export const normalize_ = (a: Vector2) => {\n        const l = length_(a);\n        if (l > 0) {\n            a.x /= l;\n            a.y /= l;\n        }\n    }\n\n    export const length_ = (a: Vector2): number => {\n        return mathHypot(a.x, a.y);\n    }\n\n    export const distance_ = (a: Vector2, b: Vector2): number => {\n        return mathHypot(a.x - b.x, a.y - b.y);\n    }\n\n    export const add_ = (a: Vector2, b: Vector2): Vector2 => {\n        return { x: a.x + b.x, y: a.y + b.y };\n    }\n\n    export const subtract_ = (a: Vector2, b: Vector2): Vector2 => {\n        return { x: a.x - b.x, y: a.y - b.y };\n    }\n\n    export const scale_ = (a: Vector2, s: number): Vector2 => {\n        return { x: a.x * s, y: a.y * s };\n    }\n}\n\nexport const vector2 = (x: number, y: number): Vector2 => ({ x, y });", "import { now } from \"./browser\";\n\nexport let nowMS: number = now();\nexport let deltaS: number = 0;\n\nexport const calculateTime = () => {\n    const oldMS = nowMS;\n    nowMS = now();\n    deltaS = (nowMS - oldMS) / 1000;\n}", "export interface AnimationFrame {\n    image_: number,\n    time_: number,\n}\n\nexport const animationDuration = (animation: Array<AnimationFrame>): number => {\n    let time = 0;\n\n    for (const frame of animation) {\n        time += frame.time_;\n    }\n\n    return time;\n}\n\nexport const getFrameImage = (animation: Array<AnimationFrame>, animationTime: number): number => {\n    let time = 0;\n\n    const duratuion = animationDuration(animation);\n    animationTime %= duratuion;\n\n    for (let i = 0; i < animation.length; i++) {\n        const frame = animation[i];\n        time += frame.time_;\n\n        if (animationTime <= time) {\n            return frame.image_;\n        }\n    }\n\n    return 0;\n}\n\nexport const isAnimationFinished = (animation: Array<AnimationFrame>, animationTime: number): boolean => {\n    const duratuion = animationDuration(animation);\n    return animationTime >= duratuion;\n}\n", "import { hit0, hit1, hit2, hitMini0, hitMini1, hitMini2, hitRed0, hitRed1, hitRed2 } from \"../resources/id\";\nimport { Vector2 } from \"../utils/geom\";\nimport { deltaS } from \"../utils/time\";\nimport { animationDuration, AnimationFrame, getFrameImage } from \"./animation\";\nimport { Sprite } from \"./sprite\";\n\nexport const effects: Array<Effect> = [];\n\nexport interface Effect {\n    sprite_: Sprite,\n    animation_: Array<AnimationFrame>,\n    animationTime_: number,\n}\n\nexport interface EffectConfig {\n    animation_: Array<AnimationFrame>,\n    offset_: Vector2,\n}\n\nexport const hitEffect: EffectConfig = {\n    animation_: [\n        { image_: hit0, time_: 0.1 },\n        { image_: hit1, time_: 0.1 },\n        { image_: hit2, time_: 0.1 },\n    ],\n    offset_: { x: 16, y: 16 }\n}\n\nexport const hitMiniEffect: EffectConfig = {\n    animation_: [\n        { image_: hitMini0, time_: 0.1 },\n        { image_: hitMini1, time_: 0.2 },\n        { image_: hitMini2, time_: 0.2 },\n    ],\n    offset_: { x: 8, y: 8 }\n}\n\nexport const hitRedEffect: EffectConfig = {\n    animation_: [\n        { image_: hitRed0, time_: 0.1 },\n        { image_: hitRed1, time_: 0.2 },\n        { image_: hitRed2, time_: 0.2 },\n    ],\n    offset_: { x: 8, y: 8 }\n}\n\nexport const removeEffect = (effect: Effect) => {\n    const index = effects.indexOf(effect);\n    if (index != -1) {\n        effects.splice(index, 1);\n    }\n}\n\nexport const addEffect = (config: EffectConfig, position: Vector2) => {\n    effects.push({\n        animation_: config.animation_,\n        animationTime_: 0,\n        sprite_: {\n            image_: 0,\n            x: position.x - config.offset_.x,\n            y: position.y - config.offset_.y\n        }\n    });\n}\n\nexport const updateEffects = () => {\n    for (const effect of effects) {\n        const duration = animationDuration(effect.animation_);\n        effect.animationTime_ += deltaS;\n        if (effect.animationTime_ > duration) {\n            removeEffect(effect);\n        } else {\n            effect.sprite_.image_ = getFrameImage(effect.animation_, effect.animationTime_);\n        }\n    }\n}", "import { Vector2 } from \"../utils/geom\";\nimport { Sprite } from \"./sprite\";\n\nexport interface Entity {\n    sprite_: Sprite,\n    position_: Vector2\n}\n\nexport const entities: Array<Entity> = [];\n\nexport const removeEntity = (entity: Entity) => {\n    const index = entities.indexOf(entity);\n    if (index != -1) {\n        entities.splice(index, 1);\n    }\n}\n\nexport const clearEntities = () => {\n    entities.splice(0, entities.length);\n}", "import { images } from \"../resources/images\";\nimport { Box2, Vector2 } from \"../utils/geom\";\nimport { entities, Entity } from \"./entity\";\nimport { gameHeight, gameWidth } from \"./graphics\";\nimport { Item } from \"./item\";\nimport { Sprite } from \"./sprite\";\n\nexport interface Stage {\n    bounds_: Box2,\n    back_: Sprite,\n    camera_: Vector2,\n    items_: Array<Item>,\n}\n\nlet stage: Stage | undefined;\n\nexport const getStage = () => stage!;\n\nexport const setStage = (value: Stage) => {\n    stage = value;\n\n    for (const item of stage.items_) {\n        item.sprite_.x = item.position_.x - item.offset_.x;\n        item.sprite_.y = item.position_.y - item.offset_.y;\n\n        if (item.shadow_) {\n            item.shadow_.x = item.position_.x - item.offset_.x;\n            item.shadow_.y = item.position_.y - item.offset_.y * item.shadow_.scaleY_!;\n        }\n\n        entities.push(item);\n    }\n}\n\nexport const limitCamera = () => {\n    const stage = getStage();\n    const back = images[stage.back_.image_];\n\n    if (- stage.camera_.x > 0) {\n        stage.camera_.x = 0;\n    }\n\n    if (-stage.camera_.x + back.width < gameWidth) {\n        stage.camera_.x = back.width - gameWidth;\n    }\n\n    if (- stage.camera_.y > 0) {\n        stage.camera_.y = 0;\n    }\n\n    if (-stage.camera_.y + back.height < gameHeight) {\n        stage.camera_.y = back.height - gameHeight;\n    }\n}", "import { getColoredImage, images } from \"../resources/images\";\nimport { playHit, playKick } from \"../resources/sound/audio\";\nimport { Vector2 } from \"../utils/geom\";\nimport { chance, limit, mathAbs, mathHypot, mathRound, numberMax, randomChancesSelect, randomRange, randomSelect } from \"../utils/math\";\nimport { deltaS } from \"../utils/time\";\nimport { animationDuration, AnimationFrame, getFrameImage, isAnimationFinished } from \"./animation\";\nimport { addEffect, hitEffect, hitMiniEffect, hitRedEffect } from \"./effect\";\nimport { entities, removeEntity } from \"./entity\";\nimport { Sprite } from \"./sprite\";\nimport { getStage } from \"./stage\";\n\nexport const units: Array<Unit> = [];\n\nexport const enum UnitState {\n    Stand,\n    Walk,\n    Attack,\n    Damage,\n    Dead,\n}\n\nexport interface Unit {\n    config_: UnitConfig,\n    state_: UnitState,\n    controller_: {\n        move_: Vector2,\n        attack_: boolean,\n    },\n    health_: number,\n    direction_: number,\n    position_: Vector2,\n    speed_: Vector2,\n    animationTime_: number,\n    animation_?: Array<AnimationFrame>,\n    sprite_: Sprite,\n    shadow_: Sprite,\n    frame_: number,\n    damage_: number,\n    custom_: any,\n}\n\nexport interface UnitConfig {\n    mob_: boolean,\n    health_: number,\n    walkSpeed_: number,\n    offset_: Vector2,\n    animations_: {\n        stand_: Array<AnimationFrame>,\n        walkH_: Array<AnimationFrame>,\n        walkV_: Array<AnimationFrame>,\n        jab_: Array<AnimationFrame>,\n        cross_: Array<AnimationFrame>,\n        kick_: Array<AnimationFrame>,\n        damage1_: Array<AnimationFrame>,\n        damage2_: Array<AnimationFrame>,\n        knockdown_: Array<AnimationFrame>,\n        dead1_: Array<AnimationFrame>,\n        dead2_: Array<AnimationFrame>,\n        sit_: Array<AnimationFrame>,\n    },\n    damages_: { [key: number]: number },\n}\n\nexport const addUnit = (config: UnitConfig): Unit => {\n    let unit: Unit = {\n        config_: config,\n        state_: UnitState.Stand,\n        controller_: {\n            move_: {\n                x: 0,\n                y: 0\n            },\n            attack_: false,\n        },\n        health_: config.health_,\n        direction_: 1,\n        position_: {\n            x: 0,\n            y: 0\n        },\n        speed_: {\n            x: 0,\n            y: 0\n        },\n        animationTime_: 0,\n        sprite_: {\n            image_: 0,\n        },\n        shadow_: {\n            image_: 0,\n        },\n        damage_: 0,\n        frame_: 0,\n        custom_: null,\n    };\n\n    units.push(unit);\n    entities.push(unit);\n\n    return unit;\n}\n\nexport const removeUnit = (unit: Unit) => {\n    const index = units.indexOf(unit);\n    if (index != -1) {\n        units.splice(index, 1);\n    }\n    removeEntity(unit);\n}\n\nexport const clearUnits = () => {\n    units.splice(0, units.length);\n}\n\nexport const limitUnitsPositions = () => {\n    const stage = getStage();\n\n    for (const unit of units.values()) {\n        unit.position_.x = limit(stage.bounds_.x, stage.bounds_.x + stage.bounds_.w, unit.position_.x);\n        unit.position_.y = limit(stage.bounds_.y, stage.bounds_.y + stage.bounds_.h, unit.position_.y);\n    }\n}\n\nexport const updateUnits = () => {\n    for (const unit of units.values()) {\n        updateUnit(unit);\n    }\n}\n\nconst updateUnit = (unit: Unit) => {\n    let currentAnimation = null;\n\n    const config = unit.config_;\n    const animations = config.animations_;\n\n    switch (unit.state_) {\n        case UnitState.Stand:\n            currentAnimation = animations.stand_;\n\n            if (unit.controller_.move_.x != 0 || unit.controller_.move_.y != 0) {\n                unit.state_ = UnitState.Walk;\n                unit.animationTime_ = 0;\n            }\n\n            checkAttack(unit);\n            break;\n\n        case UnitState.Walk:\n            if (unit.controller_.move_.x == 0 && unit.controller_.move_.y == 0) {\n                unit.state_ = UnitState.Stand;\n                unit.animationTime_ = 0;\n            }\n            else if (mathAbs(unit.controller_.move_.x) > mathAbs(unit.controller_.move_.y)) {\n                currentAnimation = animations.walkH_;\n            } else {\n                currentAnimation = animations.walkV_;\n            }\n\n            Vector2.normalize_(unit.controller_.move_);\n\n            unit.position_.x += unit.controller_.move_.x * config.walkSpeed_ * deltaS;\n            unit.position_.y += unit.controller_.move_.y * config.walkSpeed_ * deltaS;\n\n            checkAttack(unit);\n            break;\n\n        case UnitState.Attack:\n            currentAnimation = unit.animation_ || animations.jab_;\n\n            if (isAnimationFinished(currentAnimation, unit.animationTime_)) {\n                unit.state_ = UnitState.Stand;\n                unit.animationTime_ = 0;\n                unit.animation_ = undefined;\n            }\n            break;\n\n        case UnitState.Damage:\n            currentAnimation = unit.animation_ || animations.damage1_;\n\n            if (isAnimationFinished(currentAnimation, unit.animationTime_)) {\n                unit.state_ = UnitState.Stand;\n                unit.animationTime_ = 0;\n                unit.animation_ = undefined;\n            }\n            break;\n\n        case UnitState.Dead:\n            currentAnimation = unit.animation_ || animations.dead1_;\n\n            const duration = animationDuration(currentAnimation);\n            if (duration <= unit.animationTime_ + deltaS) {\n                removeUnit(unit);\n                currentAnimation = null;\n            }\n            break;\n    }\n\n    unit.position_.x += unit.speed_.x * deltaS;\n    unit.position_.y += unit.speed_.y * deltaS;\n\n    unit.speed_.x *= 0.9;\n    unit.speed_.y *= 0.9;\n\n    if (unit.controller_.move_.x > 0) {\n        unit.direction_ = 1;\n    } else if (unit.controller_.move_.x < 0) {\n        unit.direction_ = -1;\n    }\n\n    if (currentAnimation) {\n        unit.animationTime_ += deltaS;\n\n        unit.sprite_.image_ = getFrameImage(currentAnimation, unit.animationTime_);\n        unit.sprite_.flipX_ = unit.direction_ < 0;\n\n        unit.shadow_.image_ = getColoredImage(unit.sprite_.image_, 0x55000000);\n        unit.shadow_.flipX_ = unit.sprite_.flipX_;\n    }\n\n    unit.damage_ = 0;\n    if (unit.frame_ != unit.sprite_.image_) {\n        unit.frame_ = unit.sprite_.image_;\n        unit.damage_ = config.damages_[unit.frame_] || 0;\n    }\n}\n\nexport const applyUnitsDamage = () => {\n    for (const current of units) {\n        if (current.health_ <= 0) {\n            continue;\n        }\n\n        if (!current.damage_) {\n            continue;\n        }\n\n        let opponent: Unit | null = null;\n        let opponentDistanceX = numberMax;\n        let opponentDistanceY = numberMax;\n\n        for (const unit of units) {\n            if (unit.health_ <= 0 || unit.animation_ == unit.config_.animations_.knockdown_) {\n                continue;\n            }\n\n            if (current.config_.mob_ != unit.config_.mob_) {\n                const directionX = unit.position_.x - current.position_.x;\n                if (directionX * current.direction_ > 0) {\n                    const distanceX = mathAbs(directionX);\n                    const distanceY = mathAbs(current.position_.y - unit.position_.y);\n                    if (distanceX < 25 && distanceY < 10) {\n                        if (!opponent || opponentDistanceX > distanceX || opponentDistanceY > distanceY) {\n                            opponent = unit;\n                            opponentDistanceX = distanceX;\n                            opponentDistanceY = distanceY;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (opponent) {\n            opponent.health_ -= current.damage_;\n\n            opponent.speed_.x += current.direction_ * current.damage_ / 100 * 300;\n            current.speed_.x += current.direction_ * 10;\n\n            const effect = (() => {\n                if (current.damage_ >= 20) {\n                    playKick();\n                    return hitEffect;\n                } else {\n                    playHit();\n                    if (chance(0.5)) {\n                        return hitRedEffect;\n                    } else {\n                        return hitMiniEffect;\n                    }\n                }\n            })();\n\n            addEffect(effect, Vector2.add_(opponent.position_, { x: randomRange(-3, 3), y: randomRange(-14, -18) }));\n\n            const animations = opponent.config_.animations_;\n\n            if (opponent.health_ > 0) {\n                opponent.state_ = UnitState.Damage;\n\n                opponent.animationTime_ = 0;\n\n                opponent.animation_ = randomChancesSelect([\n                    animations.damage1_,\n                    animations.damage2_,\n                    animations.knockdown_,\n                ], [10, 10, 1]);\n            } else {\n                opponent.state_ = UnitState.Dead;\n                opponent.animation_ = randomSelect([animations.dead1_, animations.dead2_]);\n                opponent.animationTime_ = 0;\n            }\n        }\n    }\n}\n\nexport const updateUnitsSpritePositions = () => {\n    for (const unit of units.values()) {\n        updateUnitSpritePosition(unit);\n    }\n}\n\nconst updateUnitSpritePosition = (unit: Unit) => {\n    const config = unit.config_;\n\n    unit.sprite_.x = unit.position_.x - config.offset_.x;\n    unit.sprite_.y = unit.position_.y - config.offset_.y;\n\n    unit.shadow_.scaleY_ = 0.4;\n    unit.shadow_.x = unit.position_.x - config.offset_.x + 0;\n    unit.shadow_.y = unit.position_.y - config.offset_.y * unit.shadow_.scaleY_;\n}\n\nconst checkAttack = (unit: Unit) => {\n    if (unit.controller_.attack_) {\n        const animations = unit.config_.animations_;\n        unit.state_ = UnitState.Attack;\n        unit.animation_ = randomSelect([animations.jab_, animations.cross_, animations.kick_]);\n        unit.animationTime_ = 0;\n    }\n}", "import { DEBUG } from \"../debug\";\nimport { font0, font1, font10, font11, font12, font13, font14, font15, font16, font17, font18, font19, font2, font20, font21, font22, font23, font24, font25, font26, font27, font28, font29, font3, font30, font31, font32, font33, font34, font35, font36, font37, font4, font5, font6, font7, font8, font9 } from \"./id\";\n\nconst getChars = (): number[] => {\n    const chars: number[] = [];\n\n    chars[33] = font36;\n    chars[35] = 0;\n    chars[46] = font37;\n    chars[47] = -1;\n\n    chars.push(\n        font0,\n        font1,\n        font2,\n        font3,\n        font4,\n        font5,\n        font6,\n        font7,\n        font8,\n        font9,\n    );\n\n    chars[64] = 0;\n\n    chars.push(\n        font10,\n        font11,\n        font12,\n        font13,\n        font14,\n        font15,\n        font16,\n        font17,\n        font18,\n        font19,\n        font20,\n        font21,\n        font22,\n        font23,\n        font24,\n        font25,\n        font26,\n        font27,\n        font28,\n        font29,\n        font30,\n        font31,\n        font32,\n        font33,\n        font34,\n        font35,\n    );\n\n    return chars;\n}\n\nconst font = getChars();\n\nexport const getIdByCharCode = (code: number): number | undefined => {\n    if (DEBUG) {\n        if (code != 32 && (font[code] === undefined || font[code] === -1)) {\n            throw `symbol not found ${code} char ${String.fromCharCode(code)}`;\n        }\n    }\n\n    return font[code];\n}", "import { images } from \"../resources/images\";\nimport { drawImage } from \"../utils/browser\";\nimport { mathRound } from \"../utils/math\";\n\nexport interface Sprite {\n    image_: number,\n    x?: number,\n    y?: number,\n    flipX_?: boolean,\n    flipY_?: boolean,\n    scaleY_?: number,\n}\n\nexport const drawSprite = (context: CanvasRenderingContext2D, sprite: Sprite) => {\n    if (sprite.image_ == -1) return;\n\n    context.save();\n\n    const image = images[sprite.image_];\n\n    let a = 1;\n    let b = 0;\n    let c = 0;\n    let d = sprite.scaleY_ || 1;\n\n    let tx = mathRound(sprite.x || 0);\n    let ty = mathRound(sprite.y || 0);\n\n    if (sprite.flipX_) {\n        a = -1;\n        tx += image.width;\n    }\n\n    if (sprite.flipY_) {\n        d = -1;\n        ty += image.height;\n    }\n\n    context.transform(a, b, c, d, tx, ty);\n\n    drawImage(context, image, 0, 0);\n\n    context.restore();\n}\n\nexport const drawSprites = (context: CanvasRenderingContext2D, sprites: Array<Sprite>) => {\n    for (const sprite of sprites) {\n        drawSprite(context, sprite);\n    }\n}", "import { hasTouch } from \"../utils/browser\"\nimport { Vector2 } from \"../utils/geom\";\nimport { gameWidth, screenCanvas } from \"./graphics\";\nimport { touches } from \"./input\"\n\nexport const joystick = {\n    moveId_: -1,\n\n    move_: { x: 0, y: 0 },\n    moveRadius_: 30,\n\n    moveStickRadius_: 10,\n    moveStick_: { x: 0, y: 0 },\n\n    attackId_: -1,\n    attack_: { x: 0, y: 0 },\n    attackRadius_: 30,\n}\n\nconst border = 20;\nconst delta = { x: 60, y: 60 };\n\nexport const updateJoystick = () => {\n    if (!hasTouch) {\n        return;\n    }\n\n    joystick.move_.x = delta.x;\n    joystick.move_.y = screenCanvas.height - delta.y;\n\n    joystick.attack_.x = screenCanvas.width - delta.x;\n    joystick.attack_.y = screenCanvas.height - delta.y;\n\n    if (joystick.moveId_ == -1) {\n        joystick.moveStick_.x = joystick.move_.x;\n        joystick.moveStick_.y = joystick.move_.y;\n\n        for (const touchId in touches) {\n            const touch = touches[touchId];\n            if (touch.started_) {\n                const distance = Vector2.distance_(joystick.move_, touch);\n                if (distance < joystick.moveRadius_ + border) {\n                    joystick.moveId_ = Number(touchId);\n\n                    joystick.moveStick_.x = touch.x;\n                    joystick.moveStick_.y = touch.y;\n                    break;\n                }\n            }\n            // console.log(\"touch\", touchId, touches[touchId]);\n        }\n    } else {\n        const touch = touches[joystick.moveId_];\n        if (touch) {\n            joystick.moveStick_.x = touch.x;\n            joystick.moveStick_.y = touch.y;\n        } else {\n            joystick.moveId_ = -1;\n        }\n    }\n\n    const direction = Vector2.subtract_(joystick.moveStick_, joystick.move_);\n    const distance = Vector2.length_(direction);\n    if (distance > joystick.moveRadius_) {\n        Vector2.normalize_(direction);\n        joystick.moveStick_.x = joystick.move_.x + direction.x * joystick.moveRadius_;\n        joystick.moveStick_.y = joystick.move_.y + direction.y * joystick.moveRadius_;\n    }\n\n    if (joystick.attackId_ == -1) {\n        for (const touchId in touches) {\n            const touch = touches[touchId];\n            if (touch.started_) {\n                const distance = Vector2.distance_(joystick.attack_, touch);\n                if (distance < joystick.attackRadius_ + border) {\n                    joystick.attackId_ = Number(touchId);\n                }\n            }\n        }\n    } else {\n        const touch = touches[joystick.attackId_];\n        if (!touch) {\n            joystick.attackId_ = -1;\n        }\n    }\n}", "import { DEBUG } from \"../debug\";\nimport { units } from \"./unit\";\nimport { getIdByCharCode } from \"../resources/font\";\nimport { getColoredImage, images } from \"../resources/images\";\nimport { drawImage, getContext, now } from \"../utils/browser\";\nimport { mathFloor, mathMax, mathMin, mathPI2, mathRound } from \"../utils/math\";\nimport { deltaS, nowMS } from \"../utils/time\";\nimport { getStage } from \"./stage\";\nimport { drawSprite, Sprite } from \"./sprite\";\nimport { drawGradientH, drawGradientV } from \"../utils/image\";\nimport { effects } from \"./effect\";\nimport { entities, Entity } from \"./entity\";\nimport { formatColor } from \"../utils/pattern\";\nimport { effectGainNode, musicGainNode } from \"../resources/sound/audio\";\nimport { touches } from \"./input\";\nimport { joystick } from \"./joystick\";\n\nexport const screenCanvas = document.getElementById('c') as HTMLCanvasElement;\nscreenCanvas.style.imageRendering = 'pixelated';\n\nconst context = getContext(screenCanvas);\n\nexport const gameWidth = 200;\nexport const gameHeight = 200;\n\nexport const screenOffset = { x: 0, y: 0 };\nexport let screenScale = 1;\n\nexport const updateSize = () => {\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n\n    screenScale = mathMin(screenWidth / gameWidth, screenHeight / gameHeight);\n\n    screenCanvas.width = mathMax(gameWidth, screenWidth / screenScale);\n    screenCanvas.height = mathMax(gameHeight, screenHeight / screenScale);\n\n    screenCanvas.style.width = `${screenWidth}px`;\n    screenCanvas.style.height = `${screenHeight}px`;\n\n    screenOffset.x = mathFloor((screenCanvas.width - gameWidth) / 2);\n    screenOffset.y = mathFloor((screenCanvas.height - gameHeight) / 2);\n}\n\nexport const draw = () => {\n    context.clearRect(0, 0, screenCanvas.width, screenCanvas.height);\n    const stage = getStage();\n\n    context.save();\n    context.setTransform(1, 0, 0, 1, screenOffset.x, screenOffset.y);\n\n    context.save();\n    context.translate(mathRound(-stage.camera_.x), mathRound(-stage.camera_.y));\n\n    drawSprite(context, stage.back_);\n\n    context.shadowBlur = 2;\n    context.shadowColor = \"black\";\n    for (const unit of units) {\n        drawSprite(context, unit.shadow_);\n    }\n    for (const item of stage.items_) {\n        if (item.shadow_) {\n            drawSprite(context, item.shadow_);\n        }\n    }\n    context.shadowBlur = 0;\n\n    entities.sort((a, b) => a.position_.y == b.position_.y ? b.position_.x - a.position_.x : a.position_.y - b.position_.y);\n\n    for (const entity of entities) {\n        drawSprite(context, entity.sprite_);\n    }\n\n    // for (const item of stage.items) {\n    //     context.fillStyle = formatColor(0x55ff0000);\n    //     context.fillRect(\n    //         item.position.x + item.bounds.x,\n    //         item.position.y + item.bounds.y,\n    //         item.bounds.w,\n    //         item.bounds.h,\n    //     );\n    // }\n\n    for (const effect of effects) {\n        drawSprite(context, effect.sprite_);\n    }\n\n    context.restore();\n\n    context.fillStyle = \"black\";\n    if (screenCanvas.width < screenCanvas.height) {\n        context.fillRect(0, - screenOffset.y, gameWidth, screenOffset.y);\n        context.fillRect(0, gameHeight, gameWidth, gameHeight);\n    } else {\n        context.fillRect(- screenOffset.x, 0, screenOffset.x, gameWidth);\n        context.fillRect(gameWidth, 0, gameWidth, gameHeight);\n    }\n\n    context.restore();\n\n    drawDebug();\n\n    // drawText(\n    //     65, 0,\n    //     'BLACK KATE',\n    //     0xffffff\n    // );\n\n    for (const touchId in touches) {\n        const touch = touches[touchId];\n        context.fillStyle = \"red\";\n        context.fillRect(touch.x, touch.y, 10, 10);\n    }\n\n    context.strokeStyle = formatColor(0x99ffffff);\n    context.lineWidth = 2;\n\n    context.beginPath();\n    context.arc(mathRound(joystick.move_.x), mathRound(joystick.move_.y), joystick.moveRadius_, 0, mathPI2);\n    context.closePath();\n    context.stroke();\n\n    if (joystick.moveId_ != -1) {\n        context.beginPath();\n        context.arc(mathRound(joystick.moveStick_.x), mathRound(joystick.moveStick_.y), joystick.moveStickRadius_, 0, mathPI2);\n        context.closePath();\n        context.stroke();\n    }\n\n    context.strokeStyle = formatColor(0x99ff0000);\n    context.lineWidth = 2;\n\n    context.beginPath();\n    context.arc(mathRound(joystick.attack_.x), mathRound(joystick.attack_.y), joystick.attackRadius_, 0, mathPI2);\n    context.closePath();\n    context.stroke();\n    if (joystick.attackId_ != -1) {\n        context.fillStyle = formatColor(0x33ff0000);\n        context.fill();\n    }\n}\n\nconst drawDebug = () => {\n    if (DEBUG) {\n        context.shadowBlur = 3;\n        context.shadowColor = \"black\";\n\n        const frameTime = (now() - nowMS).toFixed();\n        const fps = (1 / deltaS).toFixed();\n\n        drawText(\n            3, 3,\n            `FPS ${fps} TIME ${frameTime}`,\n            0xffffffff\n        );\n\n        const musicVolume = mathRound(musicGainNode.gain.value * 100);\n        const effectVolume = mathRound(effectGainNode.gain.value * 100);\n\n        drawText(\n            3, 3 + 16,\n            `MUSIC ${musicVolume}`,\n            0xff00ffff\n        );\n\n        drawText(\n            3, 3 + 32,\n            `EFFECT ${effectVolume}`,\n            0xffff00ff\n        );\n\n        context.shadowBlur = 0;\n    }\n}\n\nconst drawText = (x: number, y: number, text: string, color: number) => {\n    for (let i = 0; i < text.length; i++) {\n        const code = text[i].toUpperCase().charCodeAt(0);\n        const id = getIdByCharCode(code);\n        if (id !== undefined) {\n            const char = getColoredImage(id, color);\n            let image = images[char];\n            if (image !== undefined) {\n                drawImage(context, image, x + i * 8, y);\n            }\n        }\n    }\n}", "import { screenCanvas, screenOffset, screenScale } from \"./graphics\";\nimport { unlockAudio } from \"../resources/sound/audio\";\nimport { domDocument, dpr } from \"../utils/browser\";\nimport { vector2, Vector2 } from \"../utils/geom\";\n\nexport interface TouchData {\n    x: number,\n    y: number,\n    started_: boolean\n}\n\nexport const touches: { [key: string]: TouchData } = {};\n\nconst keys: { [key: string]: boolean } = {};\nexport let anyKey = false;\n\nexport const initInput = () => {\n    domDocument.onkeydown = (e) => {\n        // console.log(e.keyCode);\n        unlockAudio();\n        anyKey = true;\n        keys[e.keyCode] = true;\n        e.preventDefault();\n    }\n\n    domDocument.onkeyup = (e) => {\n        anyKey = false;\n        unpressKey(e.keyCode);\n        e.preventDefault();\n    }\n\n    screenCanvas.onmousedown = (e) => {\n        unlockAudio();\n        e.preventDefault();\n    }\n\n    const forTouch = (e: TouchEvent, handler: (id: number, t: TouchData) => void) => {\n        const changedTouches = e.changedTouches;\n        for (let i = 0; i < changedTouches.length; i++) {\n            const { clientX, clientY, identifier } = changedTouches[i];\n            handler(\n                identifier,\n                {\n                    x: clientX / screenScale,\n                    y: clientY / screenScale,\n                    started_: false,\n                }\n            );\n        }\n        e.preventDefault();\n    };\n\n    screenCanvas.ontouchstart = (e) => {\n        forTouch(e, (id, t) => { touches[id] = t; t.started_ = true; });\n    };\n\n    screenCanvas.ontouchmove = (e) => {\n        forTouch(e, (id, t) => { touches[id] = t; });\n    };\n\n    screenCanvas.ontouchend = (e) => {\n        forTouch(e, (id, t) => { delete touches[id]; });\n    };\n\n    screenCanvas.ontouchcancel = (e) => {\n        forTouch(e, (id, t) => { delete touches[id]; });\n    };\n}\n\nexport const enum Key {\n    Up = 38,\n    Down = 40,\n    Left = 37,\n    Right = 39,\n    A = 65,\n    D = 68,\n    W = 87,\n    S = 83,\n    Z = 90,\n    X = 88,\n    U = 85,\n    I = 73,\n    J = 74,\n    K = 75,\n    Enter = 13,\n    Space = 32,\n}\n\nexport const isKeyPressed = (code: Key): boolean | undefined => keys[code];\nexport const unpressKey = (code: Key) => delete keys[code];", "import { isKeyPressed, Key } from \"../engine/input\";\nimport { joystick } from \"../engine/joystick\";\nimport { addUnit, Unit, UnitConfig, UnitState } from \"../engine/unit\";\nimport { kate0, kate1, kate10, kate11, kate12, kate13, kate14, kate15, kate16, kate17, kate18, kate19, kate2, kate3, kate4, kate5, kate6, kate7, kate8, kate9 } from \"../resources/id\";\nimport { Vector2 } from \"../utils/geom\";\n\nconst config: UnitConfig = {\n    mob_: false,\n    health_: 1000,\n    walkSpeed_: 40,\n    offset_: { x: 16, y: 29 },\n    animations_: {\n        stand_: [\n            { image_: kate0, time_: 0.2 },\n            { image_: kate1, time_: 0.2 },\n            { image_: kate2, time_: 0.2 },\n            { image_: kate1, time_: 0.2 },\n            { image_: kate0, time_: 0.2 },\n            { image_: kate3, time_: 0.2 },\n        ],\n        walkH_: [\n            { image_: kate0, time_: 0.1 },\n            { image_: kate4, time_: 0.1 },\n            { image_: kate5, time_: 0.1 },\n            { image_: kate4, time_: 0.1 },\n        ],\n        walkV_: [\n            { image_: kate11, time_: 0.1 },\n            { image_: kate12, time_: 0.1 },\n            { image_: kate11, time_: 0.1 },\n            { image_: kate13, time_: 0.1 },\n        ],\n        jab_: [\n            { image_: kate0, time_: 0.05 },\n            { image_: kate8, time_: 0.1 },\n        ],\n        cross_: [\n            { image_: kate8, time_: 0.1 },\n            { image_: kate9, time_: 0.1 },\n            { image_: kate10, time_: 0.1 },\n            { image_: kate9, time_: 0.1 },\n        ],\n        kick_: [\n            { image_: kate0, time_: 0.05 },\n            { image_: kate6, time_: 0.05 },\n            { image_: kate7, time_: 0.1 },\n            { image_: kate6, time_: 0.1 },\n        ],\n        damage1_: [\n            { image_: kate14, time_: 0.5 },\n        ],\n        damage2_: [\n            { image_: kate15, time_: 0.5 },\n        ],\n        knockdown_: [\n            { image_: kate15, time_: 0.3 },\n            { image_: kate16, time_: 0.3 },\n            { image_: kate17, time_: 1.0 },\n            { image_: kate18, time_: 0.3 },\n            { image_: kate19, time_: 0.3 },\n            { image_: kate0, time_: 0.3 },\n        ],\n        dead1_: [\n            { image_: kate0, time_: 0.1 },\n            { image_: kate15, time_: 0.3 },\n            { image_: kate16, time_: 0.3 },\n            { image_: kate17, time_: 1.0 },\n            { image_: -1, time_: 0.2 },\n            { image_: kate17, time_: 0.2 },\n            { image_: -1, time_: 0.2 },\n            { image_: kate17, time_: 0.2 },\n            { image_: -1, time_: 0.2 },\n            { image_: kate17, time_: 0.2 },\n        ],\n        dead2_: [\n            { image_: kate0, time_: 1.0 },\n        ],\n        sit_: []\n    },\n    damages_: {\n        [kate8]: 10, // jab\n        [kate10]: 20, // cross\n        [kate7]: 30, // kick\n    },\n};\n\nlet hero: Unit | undefined;\n\nexport const createHero = () => {\n    hero = addUnit(config);\n}\n\nexport const getHero = (): Unit => {\n    return hero!;\n}\n\nexport const updateHero = () => {\n    if (!hero) {\n        return;\n    }\n\n    if (hero.health_ <= 0) {\n        return;\n    }\n\n    hero.controller_.move_.x = 0;\n    hero.controller_.move_.y = 0;\n    hero.controller_.attack_ = false;\n\n    if (isKeyPressed(Key.Left) || isKeyPressed(Key.A)) {\n        hero.controller_.move_.x = -1;\n    }\n\n    if (isKeyPressed(Key.Right) || isKeyPressed(Key.D)) {\n        hero.controller_.move_.x = 1;\n    }\n\n    if (isKeyPressed(Key.Up) || isKeyPressed(Key.W)) {\n        hero.controller_.move_.y = -1;\n    }\n\n    if (isKeyPressed(Key.Down) || isKeyPressed(Key.S)) {\n        hero.controller_.move_.y = 1;\n    }\n\n    if (isKeyPressed(Key.Space) || isKeyPressed(Key.X) || isKeyPressed(Key.Z)) {\n        hero.controller_.attack_ = true;\n    }\n\n    if (joystick.moveId_ != -1) {\n        const direction = Vector2.subtract_(joystick.moveStick_, joystick.move_);\n        hero.controller_.move_.x = direction.x;\n        hero.controller_.move_.y = direction.y;\n    }\n\n    if (joystick.attackId_ != -1) {\n        hero.controller_.attack_ = true;\n    }\n}", "// Wave shapes\n\nconst SQUARE = 0;\nconst SAWTOOTH = 1;\nconst SINE = 2;\nconst NOISE = 3;\n\nconst p_wave = 0;\nconst p_env_attack = 1;\nconst p_env_sustain = 2;\nconst p_env_punch = 3;\nconst p_env_decay = 4\nconst p_base_freq = 5\nconst p_freq_limit = 6\nconst p_freq_ramp = 7\nconst p_freq_dramp = 8\nconst p_vib_strength = 9\nconst p_vib_speed = 10\nconst p_arp_mod = 11\nconst p_arp_speed = 12\nconst p_duty = 13\nconst p_duty_ramp = 14\nconst p_repeat_speed = 15\nconst p_pha_offset = 16\nconst p_pha_ramp = 17\nconst p_lpf_freq = 18\nconst p_lpf_ramp = 19\nconst p_lpf_resonance = 20\nconst p_hpf_freq = 21\nconst p_hpf_ramp = 22\n\n// render volume\nconst masterVolume = 1;\nconst OVERSAMPLING = 8;\n// default sample parameters\nconst base_sound_vol = 0.5;\nconst gain = masterVolume * (Math.exp(base_sound_vol) - 1);\n\n// Sound generation parameters are on [0,1] unless noted SIGNED & thus\n// on [-1,1]\nfunction render(ps: Float32Array): Float32Array {\n\tlet elapsedSinceRepeat = 0;\n\n\tconst period0 = ps[p_base_freq];\n\tconst periodMax = Math.abs(ps[p_freq_limit]);\n\tconst enableFrequencyCutoff = ps[p_freq_limit] > 0;\n\tconst periodMult0 = ps[p_freq_ramp];\n\tconst periodMultSlide = ps[p_freq_dramp];\n\tconst dutyCycle0 = ps[p_duty];\n\tconst dutyCycleSlide0 = ps[p_duty_ramp];\n\tconst arpeggioMultiplier = ps[p_arp_mod];\n\tconst arpeggioTime0 = ps[p_arp_speed];\n\n\t// init repeat\n\tlet period = period0;\n\tlet periodMult = periodMult0;\n\tlet dutyCycle = dutyCycle0;\n\tlet dutyCycleSlide = dutyCycleSlide0;\n\tlet arpeggioTime = arpeggioTime0;\n\n\t// Waveform shape\n\tconst waveShape = ps[p_wave];\n\n\t// Filter\n\tlet fltw = ps[p_lpf_freq];\n\tconst enableLowPassFilter = (fltw !== 0.1);\n\tconst fltw_d = ps[p_lpf_ramp];\n\tconst fltdmp = ps[p_lpf_resonance];\n\tlet flthp = ps[p_hpf_freq];\n\tconst flthp_d = ps[p_hpf_ramp];\n\n\t// Vibrato\n\tconst vibratoSpeed = ps[p_vib_speed];\n\tconst vibratoAmplitude = ps[p_vib_strength];\n\n\t// Envelope\n\tconst envelopeLength = [\n\t\tps[p_env_attack],\n\t\tps[p_env_sustain],\n\t\tps[p_env_decay],\n\t];\n\tconst envelopePunch = ps[p_env_punch];\n\n\t// Flanger\n\tlet flangerOffset = ps[p_pha_offset];\n\tconst flangerOffsetSlide = ps[p_pha_ramp];\n\n\t// Repeat\n\tconst repeatTime = ps[p_repeat_speed];\n\n\t////////// RENDER\n\tlet fltp = 0;\n\tlet fltdp = 0;\n\tlet fltphp = 0;\n\n\tlet noise_buffer = new Float32Array(32);\n\tfor (let i = 0; i < 32; ++i) {\n\t\tnoise_buffer[i] = Math.random() * 2 - 1;\n\t}\n\n\tlet envelopeStage = 0;\n\tlet envelopeElapsed = 0;\n\n\tlet vibratoPhase = 0;\n\n\tlet phase = 0;\n\tlet ipp = 0;\n\tlet flanger_buffer = new Float32Array(1024);\n\tfor (let i = 0; i < 1024; ++i) {\n\t\tflanger_buffer[i] = 0;\n\t}\n\n\tlet normalized: number[] = [];\n\n\tfor (let t = 0; ; ++t) {\n\n\t\t// Repeats\n\t\tif (repeatTime !== 0 && ++elapsedSinceRepeat >= repeatTime) {\n\t\t\t// INIT REPEAT\n\t\t\tperiod = period0;\n\t\t\tperiodMult = periodMult0;\n\t\t\tdutyCycle = dutyCycle0;\n\t\t\tdutyCycleSlide = dutyCycleSlide0;\n\t\t\tarpeggioTime = arpeggioTime0;\n\t\t}\n\n\t\t// Arpeggio (single)\n\t\tif (arpeggioTime !== 0 && t >= arpeggioTime) {\n\t\t\tarpeggioTime = 0;\n\t\t\tperiod *= arpeggioMultiplier;\n\t\t}\n\n\t\t// Frequency slide, and frequency slide slide!\n\t\tperiodMult += periodMultSlide;\n\t\tperiod *= periodMult;\n\t\tif (period > periodMax) {\n\t\t\tperiod = periodMax;\n\t\t\tif (enableFrequencyCutoff) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Vibrato\n\t\tlet rfperiod = period;\n\t\tif (vibratoAmplitude > 0) {\n\t\t\tvibratoPhase += vibratoSpeed;\n\t\t\trfperiod = period * (1 + Math.sin(vibratoPhase) * vibratoAmplitude);\n\t\t}\n\t\tlet iperiod = Math.floor(rfperiod);\n\t\tif (iperiod < OVERSAMPLING) {\n\t\t\tiperiod = OVERSAMPLING;\n\t\t}\n\n\t\t// Square wave duty cycle\n\t\tdutyCycle += dutyCycleSlide;\n\t\tif (dutyCycle < 0) {\n\t\t\tdutyCycle = 0;\n\t\t}\n\t\tif (dutyCycle > 0.5) {\n\t\t\tdutyCycle = 0.5;\n\t\t}\n\n\t\t// Volume envelope\n\t\tif (++envelopeElapsed > envelopeLength[envelopeStage]) {\n\t\t\tenvelopeElapsed = 0;\n\t\t\tif (++envelopeStage > 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst envf = envelopeElapsed / envelopeLength[envelopeStage];\n\t\tlet env_vol;\n\t\tif (envelopeStage === 0) {         // Attack\n\t\t\tenv_vol = envf;\n\t\t} else if (envelopeStage === 1) {  // Sustain\n\t\t\tenv_vol = 1 + (1 - envf) * 2 * envelopePunch;\n\t\t} else {                           // Decay\n\t\t\tenv_vol = 1 - envf;\n\t\t}\n\n\t\t// Flanger step\n\t\tflangerOffset += flangerOffsetSlide;\n\t\tlet iphase = Math.abs(Math.floor(flangerOffset));\n\t\tif (iphase > 1023) {\n\t\t\tiphase = 1023;\n\t\t}\n\n\t\tif (flthp_d !== 0) {\n\t\t\tflthp *= flthp_d;\n\t\t\tif (flthp < 0.00001) {\n\t\t\t\tflthp = 0.00001;\n\t\t\t}\n\t\t\tif (flthp > 0.1) {\n\t\t\t\tflthp = 0.1;\n\t\t\t}\n\t\t}\n\n\t\t// 8x oversampling\n\t\tlet sample = 0;\n\t\tfor (let si = 0; si < OVERSAMPLING; ++si) {\n\t\t\tlet sub_sample = 0;\n\t\t\t++phase;\n\t\t\tif (phase >= iperiod) {\n\t\t\t\tphase %= iperiod;\n\t\t\t\tif (waveShape === NOISE) {\n\t\t\t\t\tfor (let i = 0; i < 32; ++i) {\n\t\t\t\t\t\tnoise_buffer[i] = Math.random() * 2 - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Base waveform\n\t\t\tconst fp = phase / iperiod;\n\t\t\tif (waveShape === SQUARE) {\n\t\t\t\tsub_sample = fp < dutyCycle ? 0.5 : -0.5;\n\t\t\t} else if (waveShape === SAWTOOTH) {\n\t\t\t\tif (fp < dutyCycle) {\n\t\t\t\t\tsub_sample = -1 + 2 * fp / dutyCycle;\n\t\t\t\t} else {\n\t\t\t\t\tsub_sample = 1 - 2 * (fp - dutyCycle) / (1 - dutyCycle);\n\t\t\t\t}\n\t\t\t} else if (waveShape === SINE) {\n\t\t\t\tsub_sample = Math.sin(fp * 2 * Math.PI);\n\t\t\t} else if (waveShape === NOISE) {\n\t\t\t\tsub_sample = noise_buffer[(phase * 32 / iperiod) | 0];\n\t\t\t} else {\n\t\t\t\t// no-op; invalid wave shape\n\t\t\t}\n\n\t\t\t// Low-pass filter\n\t\t\tconst pp = fltp;\n\t\t\tfltw *= fltw_d;\n\t\t\tif (fltw < 0) {\n\t\t\t\tfltw = 0;\n\t\t\t}\n\t\t\tif (fltw > 0.1) {\n\t\t\t\tfltw = 0.1;\n\t\t\t}\n\t\t\tif (enableLowPassFilter) {\n\t\t\t\tfltdp += (sub_sample - fltp) * fltw;\n\t\t\t\tfltdp -= fltdp * fltdmp;\n\t\t\t} else {\n\t\t\t\tfltp = sub_sample;\n\t\t\t\tfltdp = 0;\n\t\t\t}\n\t\t\tfltp += fltdp;\n\n\t\t\t// High-pass filter\n\t\t\tfltphp += fltp - pp;\n\t\t\tfltphp -= fltphp * flthp;\n\t\t\tsub_sample = fltphp;\n\n\t\t\t// Flanger\n\t\t\tflanger_buffer[ipp & 1023] = sub_sample;\n\t\t\tsub_sample += flanger_buffer[(ipp - iphase + 1024) & 1023];\n\t\t\tipp = (ipp + 1) & 1023;\n\n\t\t\t// final accumulation and envelope application\n\t\t\tsample += sub_sample * env_vol;\n\t\t}\n\n\t\t// store normalized floating point sample\n\t\tnormalized.push(sample * gain / OVERSAMPLING);\n\t}\n\n\treturn new Float32Array(normalized);\n}\n\nexport function createAudioBuffer(audioContext: AudioContext, params: Float32Array): AudioBuffer {\n\tconst samples = render(params);\n\tconst audioBuffer = audioContext.createBuffer(1, samples.length, 44100);\n\taudioBuffer.copyToChannel(samples, 0, 0);\n\treturn audioBuffer;\n}", "import { DEBUG } from \"../debug\";\nimport { hasTouch } from \"../utils/browser\";\nimport { createAudioBuffer } from \"./sfxr\";\n\nlet audioContext: AudioContext | undefined = undefined;\n\nexport const soundsBuffers: ArrayBuffer[] = [];\nconst sounds: AudioBuffer[] = [];\n\nconst masterVolume = 0.05;\n\nif (!hasTouch) {\n    initSound();\n}\n\nexport function initSound() {\n    if (!audioContext) {\n        audioContext = new AudioContext();\n\n        if (DEBUG) {\n            console.log(\"sound inited\");\n        }\n    }\n}\n\nexport function playSound(id: number, volume: number = 1.0) {\n    if (audioContext) {\n        if (!sounds[id]) {\n            sounds[id] = createAudioBuffer(audioContext, new Float32Array(soundsBuffers[id]));\n        }\n\n        const source = audioContext.createBufferSource();\n        source.buffer = sounds[id];\n\n        const gainNode = audioContext.createGain();\n        gainNode.gain.value = masterVolume * volume;\n        source.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n\n        source.start();\n    }\n}", "import { createCanvas, createContext, getCanvas, setHeight, setWidth } from \"../utils/browser\";\nimport { addImage, images } from \"./images\";\nimport { soundsBuffers } from \"./sounds\";\n\nexport async function loadResources() {\n    const response = await fetch('r');\n    const buffer = await response.arrayBuffer();\n\n    const stream = new Uint8Array(buffer);\n\n    let p = 0;\n\n    const palletteSize = stream[p++] * 4;\n    const pallette = stream.slice(p, p + palletteSize);\n    p += palletteSize;\n\n    let imagesLength = stream[p++];\n\n    while (imagesLength--) {\n        const width = stream[p++];\n        const height = stream[p++];\n\n        const imageSize = width * height;\n\n        const pixels = stream.slice(p, p + imageSize);\n        p += imageSize;\n\n        let context = createContext();\n        setWidth(context, width);\n        setHeight(context, height);\n\n        let imageData = context.getImageData(0, 0, width, height);\n\n        for (let p = 0; p < pixels.length; p++) {\n            let c = pixels[p] << 2;\n\n            imageData.data.set(pallette.slice(c, c + 4), p << 2);\n        }\n\n        context.putImageData(imageData, 0, 0);\n\n        images.push(getCanvas(context));\n    }\n\n    let soundsLength = stream[p++];\n\n    while (soundsLength--) {\n        const soundSize = stream[p++];\n        soundsBuffers.push(buffer.slice(p, p + soundSize));\n        p += soundSize;\n    }\n}", "import { AnimationFrame } from \"../engine/animation\";\nimport { getStage } from \"../engine/stage\";\nimport { addUnit, Unit, UnitConfig, units, UnitState } from \"../engine/unit\";\nimport { man0, man1, man10, man11, man12, man2, man3, man4, man5, man6, man7, man8, man9, man13, man14, man15, man16, man17, man18, man19, man20, man21, man22 } from \"../resources/id\";\nimport { addImage, images } from \"../resources/images\";\nimport { cloneObject } from \"../utils/browser\";\nimport { Box2, Vector2 } from \"../utils/geom\";\nimport { applyPallette, cloneCanvas } from \"../utils/image\";\nimport { chance, limit, mathAbs, mathCos, mathPI, mathPI2, mathRandom, mathSin, numberMax, randomRange, randomSelect } from \"../utils/math\";\nimport { deltaS } from \"../utils/time\";\nimport { getHero } from \"./hero\";\n\nconst minDistance = 10;\n\nconst fightDistanceX = 18;\nconst fightDistanceY = 5;\n\nconst safeDistanceX = 50;\nconst safeDistanceY = 20;\n\nconst attackers: Array<Unit> = [];\n\nexport interface MobData {\n    reaction_: { min_: number, max_: number },\n    reactionTimeout_: number,\n    reactionTime_: number,\n    attackActive_: boolean,\n};\n\nexport const mobs: Array<Unit> = [];\n\nconst pallette = [\n    0xff000000, // hair\n    0xffff9300, // face\n    0xff942192, // body\n    0xffaa7942, // hand0\n    0xff5e0e01, // hand1\n    0xffbf6d5e, // hand2\n    0xff006500, // legs0\n    0xff006a6b, // legs1\n    0xff01187d, // legs2\n];\n\nconst baseConfig: UnitConfig = {\n    mob_: true,\n    health_: 100,\n    walkSpeed_: 20,\n    offset_: { x: 16, y: 31 },\n    animations_: {\n        stand_: [\n            { image_: man0, time_: 0.3 },\n            { image_: man1, time_: 0.3 },\n            { image_: man0, time_: 0.3 },\n            { image_: man2, time_: 0.3 },\n            { image_: man3, time_: 0.3 },\n            { image_: man2, time_: 0.3 },\n        ],\n        walkH_: [\n            { image_: man0, time_: 0.2 },\n            { image_: man4, time_: 0.2 },\n            { image_: man0, time_: 0.2 },\n            { image_: man5, time_: 0.2 },\n        ],\n        walkV_: [\n            { image_: man0, time_: 0.2 },\n            { image_: man9, time_: 0.2 },\n            { image_: man0, time_: 0.2 },\n            { image_: man10, time_: 0.2 },\n        ],\n        jab_: [\n            { image_: man0, time_: 0.2 },\n            { image_: man6, time_: 0.2 },\n        ],\n        cross_: [\n            { image_: man6, time_: 0.2 },\n            { image_: man7, time_: 0.2 },\n            { image_: man8, time_: 0.2 },\n            { image_: man7, time_: 0.2 },\n        ],\n        kick_: [\n            { image_: man0, time_: 0.2 },\n            { image_: man11, time_: 0.2 },\n            { image_: man12, time_: 0.2 },\n            { image_: man11, time_: 0.2 },\n        ],\n        damage1_: [\n            { image_: man14, time_: 0.5 },\n            { image_: man13, time_: 0.3 },\n        ],\n        damage2_: [\n            { image_: man18, time_: 0.5 },\n            { image_: man17, time_: 0.3 },\n        ],\n        knockdown_: [\n            { image_: man13, time_: 0.2 },\n            { image_: man14, time_: 0.5 },\n            { image_: man15, time_: 1.0 },\n            { image_: man16, time_: 0.3 },\n            { image_: man17, time_: 0.2 },\n        ],\n        dead1_: [\n            { image_: man18, time_: 0.2 },\n            { image_: man19, time_: 0.2 },\n            { image_: man20, time_: 0.2 },\n            { image_: man21, time_: 1.0 },\n            { image_: -1, time_: 0.2 },\n            { image_: man21, time_: 0.2 },\n            { image_: -1, time_: 0.2 },\n            { image_: man21, time_: 0.2 },\n            { image_: -1, time_: 0.2 },\n            { image_: man21, time_: 0.2 },\n        ],\n        dead2_: [\n            { image_: man13, time_: 0.2 },\n            { image_: man14, time_: 0.5 },\n            { image_: man15, time_: 1.0 },\n            { image_: -1, time_: 0.2 },\n            { image_: man15, time_: 0.2 },\n            { image_: -1, time_: 0.2 },\n            { image_: man15, time_: 0.2 },\n            { image_: -1, time_: 0.2 },\n            { image_: man15, time_: 0.2 },\n        ],\n        sit_: [\n            { image_: man22, time_: 0.0 },\n        ]\n    },\n    damages_: {\n        [man6]: 5, // jab\n        [man8]: 10, // cross\n        [man12]: 20, // kick\n    },\n};\n\nexport const mobsConfigs: Array<UnitConfig> = [];\n\nexport const randomMobConfig = (): UnitConfig => randomSelect(mobsConfigs);\n\nexport const generateMobsConfigs = () => {\n    // const pallette = getPallette(images[man0]);\n    // for (const color of pallette) {\n    //     console.log(`0x${color.toString(16)}`);\n    // }\n\n    // boss\n    generateConfig([\n        0xff000000, // hair\n        0xffff9300, // face\n        0xffaaaaaa, // body\n        0xffffffff, // hand0\n        0xffffffff, // hand1\n        0xffff9300, // hand2\n        0xff666666, // legs0\n        0xff666666, // legs1\n        0xff000000 // legs2\n    ]);\n\n    // bodyguard\n    generateConfig([\n        0xff000000, // hair\n        0xffff9300, // face\n        0xff111111, // body\n        0xff111111, // hand0\n        0xff111111, // hand1\n        0xffff9300, // hand2\n        0xff111111, // legs0\n        0xff111111, // legs1\n        0xff000000 // legs2\n    ]);\n\n    const hairs = [0xff090806, 0xff9B6C4C, 0xffA95942];\n    const skins = [0xffE7C2AA, 0xffC99073, 0xffE1BA91, 0xffBC8663, 0xff553D2D];\n    const shirts = [0xff333333, 0xff2E4A57, 0xff005493];\n    const pants = [0xff000033, 0xff797B8B, 0xff005493, 0xff003F24];\n    const shoes = [0xff000000, 0xffEBEBEB, 0xff270C01];\n\n    for (let i = 0; i < 10; i++) {\n        let hair = randomSelect(hairs);\n        const face = randomSelect(skins);\n        const shirt = randomSelect(shirts);\n        const pant = randomSelect(pants);\n        const shoe = randomSelect(shoes);\n\n        let body = shirt;\n        let hand0 = shirt;\n        let hand1 = shirt;\n        let hand2 = face;\n\n        let legs0 = pant;\n        let legs1 = pant;\n\n        // blind\n        if (chance(0.1)) {\n            hair = face;\n        }\n\n        // short shirt\n        if (chance(0.5)) {\n            hand1 = face;\n        }\n\n        // gloves\n        if (chance(0.2)) {\n            hand2 = 0xff111111;\n        }\n\n        // short pants\n        if (chance(0.5)) {\n            legs1 = face;\n        }\n\n        generateConfig([\n            hair, // hair\n            face, // face\n            body, // body\n            hand0, // hand0\n            hand1, // hand1\n            hand2, // hand2\n            legs0, // legs0\n            legs1, // legs1\n            shoe, // legs2\n        ]);\n    }\n}\n\nconst generateConfig = (targetPallette: number[]) => {\n    const newConfig: UnitConfig = cloneObject(baseConfig);\n\n    newConfig.walkSpeed_ = randomRange(10, 20);\n\n    const id = mobsConfigs.length;\n\n    const animations = newConfig.animations_ as any;\n    for (const name in animations) {\n        const animation = animations[name] as Array<AnimationFrame>;\n        replaceImagesPallette(animation, pallette, targetPallette, id);\n    }\n\n    for (const image in newConfig.damages_) {\n        const newImage = getPalletteImage(Number(image), pallette, targetPallette, id);\n        newConfig.damages_[newImage] = newConfig.damages_[image];\n    }\n\n    mobsConfigs.push(newConfig);\n}\n\nconst replaceImagesPallette = (animation: Array<AnimationFrame>, sourcePallette: Array<number>, targetPallette: Array<number>, palletteId: number) => {\n    for (const frame of animation) {\n        frame.image_ = getPalletteImage(frame.image_, sourcePallette, targetPallette, palletteId);\n    }\n}\n\nconst imagesPallete: { [key: string]: number } = {};\nconst getPalletteImage = (id: number, sourcePallette: Array<number>, targetPallette: Array<number>, palletteId: number) => {\n    if (id == -1) return -1;\n\n    const key = `${id}_${palletteId}`;\n    if (!imagesPallete[key]) {\n        const target = cloneCanvas(images[id]);\n        applyPallette(target, sourcePallette, targetPallette);\n        imagesPallete[key] = addImage(target);\n    }\n    return imagesPallete[key];\n}\n\nexport const createMob = (config: UnitConfig): Unit => {\n    const mob = addUnit(config);\n    const mobData: MobData = {\n        reaction_: {\n            min_: 1,\n            max_: 2,\n        },\n        reactionTimeout_: 0,\n        reactionTime_: 0,\n        attackActive_: false,\n    };\n    mob.custom_ = mobData;\n    mobs.push(mob);\n    return mob;\n}\n\nexport const clearMobs = () => {\n    mobs.splice(0, mobs.length);\n}\n\nexport const removeMob = (mob: Unit) => {\n    const index = mobs.indexOf(mob);\n    if (index != -1) {\n        mobs.splice(index, 1);\n    }\n}\n\nexport const removeAttacker = (mob: Unit) => {\n    const index = attackers.indexOf(mob);\n    if (index != -1) {\n        attackers.splice(index, 1);\n    }\n}\n\nexport const updateMobs = () => {\n    const hero = getHero();\n\n    for (const mob of mobs) {\n        if (mob.health_ <= 0 || !units.includes(mob)) {\n            removeMob(mob);\n            removeAttacker(mob);\n            continue;\n        }\n\n        mob.controller_.move_.x = 0;\n        mob.controller_.move_.y = 0;\n        mob.controller_.attack_ = false;\n\n        const mobData = mob.custom_ as MobData;\n\n        if (!mobData.attackActive_) {\n            mobData.reactionTime_ += deltaS;\n            if (mobData.reactionTime_ > mobData.reactionTimeout_) {\n                mobData.reactionTime_ = 0;\n                mobData.reactionTimeout_ = randomRange(mobData.reaction_.min_, mobData.reaction_.max_);\n                mobData.attackActive_ = true;\n            }\n        }\n    }\n\n    updateAttackersList(hero);\n\n    for (const mob of mobs) {\n        if (mob.health_ <= 0 || mob.animation_ == mob.config_.animations_.knockdown_) {\n            return;\n        }\n\n        if (mob.state_ != UnitState.Walk && mob.state_ != UnitState.Stand) {\n            return;\n        }\n\n        if (hero.health_ <= 0 || hero.animation_ == hero.config_.animations_.knockdown_) {\n            return;\n        }\n\n        const nearHero = onFightDistance(mob, hero);\n        if (nearHero) {\n            const mobData = mob.custom_ as MobData;\n            if (mobData.attackActive_) {\n                mobData.attackActive_ = false;\n\n                const direction = Vector2.subtract_(hero.position_, mob.position_);\n                mob.direction_ = limit(-1, 1, direction.x);\n                mob.controller_.attack_ = true;\n\n                if (!attackers.includes(mob)) {\n                    attackers.push(mob);\n                }\n            }\n        } else {\n            let walkToHero = false;\n\n            if (attackers.includes(mob)) {\n                walkToHero = true;\n            } else {\n                if (!onSafeDistance(mob, hero)) {\n                    walkToHero = true;\n                }\n            }\n\n            if (walkToHero) {\n                const direction = Vector2.subtract_(hero.position_, mob.position_);\n                Vector2.normalize_(direction);\n                mob.controller_.move_.x = direction.x;\n                mob.controller_.move_.y = direction.y;\n            }\n        }\n    }\n\n    mobsCollision();\n}\n\nconst mobsCollision = () => {\n    for (let i = 0; i < mobs.length; i++) {\n        const mob0 = mobs[i];\n        if (mob0.state_ == UnitState.Walk || mob0.state_ == UnitState.Stand) {\n            for (let j = i + 1; j < mobs.length; j++) {\n                const mob1 = mobs[j];\n                if (mob1.state_ == UnitState.Walk || mob1.state_ == UnitState.Stand) {\n                    const direction = Vector2.subtract_(mob1.position_, mob0.position_);\n                    if (direction.x == 0 && direction.y == 0) {\n                        direction.x = 1;\n                    }\n                    const distance = Vector2.length_(direction);\n                    if (distance < minDistance) {\n                        const scale = (minDistance - distance) / distance;\n\n                        mob0.position_.x -= direction.x * scale;\n                        mob0.position_.y -= direction.y * scale;\n\n                        mob1.position_.x += direction.x * scale;\n                        mob1.position_.y += direction.y * scale;\n                    }\n                }\n            }\n        }\n    }\n}\n\nlet attackersMax = 1;\n\nexport const setAttackers = (count: number) => attackersMax = count;\n\nexport const updateAttackersList = (hero: Unit) => {\n    while (attackers.length < attackersMax) {\n        let nearDistance = numberMax;\n        let nearMob: Unit | undefined;\n\n        for (const mob of mobs) {\n            if ((mob.state_ == UnitState.Stand || mob.state_ == UnitState.Walk) && mob.health_ > 0) {\n                if (!attackers.includes(mob)) {\n                    const distance = Vector2.distance_(hero.position_, mob.position_);\n                    if (nearDistance > distance) {\n                        nearDistance = distance;\n                        nearMob = mob;\n                    }\n                }\n            }\n        }\n\n        if (nearMob) {\n            attackers.push(nearMob);\n        } else {\n            break;\n        }\n    }\n\n    while (attackers.length > attackersMax) {\n        let furtherUnit: Unit | undefined;\n        let furtherDistance = 0;\n        for (const attacker of attackers) {\n            const distance = Vector2.distance_(attacker.position_, hero.position_);\n            if (furtherDistance < distance) {\n                furtherDistance = distance;\n                furtherUnit = attacker;\n            }\n        }\n\n        if (furtherUnit) {\n            removeAttacker(furtherUnit);\n        }\n    }\n}\n\nconst onFightDistance = (mob: Unit, hero: Unit): boolean => onDistance(mob, hero, fightDistanceX, fightDistanceY);\nconst onSafeDistance = (mob: Unit, hero: Unit): boolean => onDistance(mob, hero, safeDistanceX, safeDistanceY);\n\nconst onDistance = (mob: Unit, hero: Unit, dx: number, dy: number): boolean => {\n    const direction = Vector2.subtract_(hero.position_, mob.position_);\n    return mathAbs(direction.x) < dx && mathAbs(direction.y) < dy;\n}", "import { Item } from \"../engine/item\";\nimport { drawSprite, drawSprites } from \"../engine/sprite\";\nimport { Stage } from \"../engine/stage\";\nimport { barBigItems0, barFloor0, barFloor1, barFloor2, barFloor3, barItem0, barItem1, barWall0, barWall1, barWall10, barWall2, barWall3, barWall4, barWall5, barWall6, barWall7, barWall8, barWall9, bottle0, bottle1, bottle2, bottle3, bottle4 } from \"../resources/id\";\nimport { addImage, addNoiseToImage, getColoredImage, images } from \"../resources/images\";\nimport { createCanvas, drawImage, getContext } from \"../utils/browser\"\nimport { drawCommands, drawGradientV, generateRandomTileImage, generateTileImage, noise } from \"../utils/image\";\nimport { chance, mathRound, randomChancesSelect, randomRange, randomSelect } from \"../utils/math\";\nimport { randomMobConfig } from \"./mob\";\n\nexport const getBarStage = (): Stage => {\n    const floorWidth = 400;\n    const floorHeight = 150;\n    const wallHeight = 95;\n\n    const floorCanvas = generateFloorImage(floorWidth, floorHeight);\n    const wallCanvas = generateWallImage(floorWidth, wallHeight);\n\n    const backCanvas = createCanvas();\n    const backContext = getContext(backCanvas);\n    backCanvas.width = floorWidth;\n    backCanvas.height = floorHeight + wallHeight;\n    drawImage(backContext, wallCanvas, 0, 0);\n    drawImage(backContext, floorCanvas, 0, wallHeight);\n\n    const back = addImage(backCanvas);\n\n    const borderX = 10;\n    const borderY = 5;\n\n    addNoiseToImage(barItem0);\n\n    const items: Array<Item> = [];\n\n    for (let i = 0; i < 10; i++) {\n        addBarCounter(items, 90 + i * 21, 120);\n    }\n\n    addBarCounter(items, 84, 114);\n    addBarCounter(items, 273, 114);\n\n    addNoiseToImage(barItem1);\n\n    for (let i = 0; i < 10; i++) {\n        addBarStool(items, 100 + i * 20, 130);\n    }\n\n    addNoiseToImage(barBigItems0);\n\n    for (let i = 0; i < 6; i++) {\n        addTableArmchair(items, 80 + i * 45, 240);\n    }\n\n    return {\n        bounds_: {\n            x: borderX,\n            y: wallHeight + borderY,\n            w: floorWidth - borderX * 2,\n            h: floorHeight - borderY * 2,\n        },\n        back_: { image_: back },\n        camera_: { x: 0, y: 0 },\n        items_: items\n    }\n}\n\nconst addBarCounter = (items: Array<Item>, x: number, y: number) => {\n    items.push(\n        {\n            sprite_: { image_: barItem0 },\n            position_: { x, y },\n            offset_: { x: 16, y: 32 },\n            bounds_: { x: -16, y: -10, w: 32, h: 12 }\n        },\n    );\n}\n\nconst addBarStool = (items: Array<Item>, x: number, y: number) => {\n    items.push(\n        {\n            sprite_: { image_: barItem1 },\n            position_: { x, y },\n            offset_: { x: 16, y: 32 },\n            bounds_: { x: -6, y: -7, w: 12, h: 10 },\n            shadow_: { image_: getColoredImage(barItem1, 0x55000000), scaleY_: 0.4 }\n        },\n    );\n}\n\nconst addTableArmchair = (items: Array<Item>, x: number, y: number) => {\n    items.push(\n        {\n            sprite_: { image_: barBigItems0 },\n            position_: { x, y },\n            offset_: { x: 32, y: 64 },\n            bounds_: { x: -34, y: -22, w: 68, h: 25 },\n        },\n    );\n\n    if (chance(0.9)) {\n        const config = randomMobConfig();\n        const offset = mathRound(randomRange(0, 2));\n        items.push(\n            {\n                sprite_: { image_: config.animations_.sit_[0].image_ },\n                position_: { x: x + offset, y: y + offset },\n                offset_: { x: 12, y: 50 },\n                bounds_: { x: 0, y: 0, w: 10, h: 10 },\n            },\n        );\n    }\n\n\n}\n\nconst generateFloorImage = (width: number, height: number): HTMLCanvasElement => {\n    const image = generateRandomTileImage(width, height, [barFloor0, barFloor1, barFloor2, barFloor3], [3, 2, 1, 1]);\n    const context = getContext(image);\n\n    const border = 30;\n\n    context.fillStyle = \"black\";\n    context.fillRect(0, 0, image.width, 1);\n\n    drawGradientV(context, 0, 0, image.width, border, 0x77000000, 0);\n    drawGradientV(context, 0, image.height - border, image.width, border, 0, 0x77000000);\n\n    noise(10, image);\n\n    return image;\n}\n\nconst generateWallImage = (width: number, height: number): HTMLCanvasElement => {\n    const image = generateTileImage(width, height, barWall0);\n    const context = getContext(image);\n\n    const columns = [barWall1, barWall2, barWall3];\n    const columnsChances = [2, 1, 1];\n\n    const columnStep = 70;\n\n    for (let x = 0; x < width; x += columnStep) {\n        for (let y = 0; y < width; y += 16) {\n            const columnImage = images[randomChancesSelect(columns, columnsChances)];\n            drawImage(context, columnImage, x, y);\n        }\n    }\n\n    drawCommands(\n        [\n            barWall4, columnStep - 13, 0,\n            barWall4, columnStep * 3 - 13, 0,\n            barWall4, columnStep * 6 - 13, 0,\n\n            barWall5, columnStep * 2 - 17, 0,\n            barWall5, columnStep * 5 - 30, 0\n        ],\n        context,\n    );\n\n    drawShelf(context, 89, 30);\n    drawShelf(context, 159, 30);\n    drawShelf(context, 229, 30);\n\n    const border = 40;\n    drawGradientV(context, 0, image.height - border, image.width, border, 0, 0x77000000);\n\n    noise(10, image);\n\n    return image;\n}\n\nconst drawBottles = (context: CanvasRenderingContext2D, bottles: Array<number>, x: number, y: number) => {\n    for (let i = 0; i < 6; i++) {\n        const image = randomSelect(bottles);\n        drawSprite(context, { image_: image, x: i * 7 + x, y });\n    }\n}\n\nfunction drawShelf(context: CanvasRenderingContext2D, x: number, y: number) {\n    context.setTransform(1, 0, 0, 1, x, y);\n\n    drawSprites(context, [\n        { image_: barWall6 },\n        { image_: barWall7, y: 16 },\n        { image_: barWall6, y: 32, flipY_: true },\n        { image_: barWall8, x: 16 },\n        { image_: barWall6, x: 32, flipX_: true },\n        { image_: barWall7, x: 32, y: 16, flipX_: true },\n        { image_: barWall6, x: 32, y: 32, flipY_: true, flipX_: true },\n        { image_: barWall9, x: 16, y: 16 },\n        { image_: barWall8, x: 16, y: 32, flipY_: true },\n        { image_: barWall10, x: 3, y: 15 },\n        { image_: barWall10, x: 16, y: 15 },\n        { image_: barWall10, x: 29, y: 15 },\n        { image_: barWall10, x: 3, y: 30 },\n        { image_: barWall10, x: 16, y: 30 },\n        { image_: barWall10, x: 29, y: 30 },\n    ]);\n\n    drawBottles(context, [bottle0, bottle1, bottle2], -1, -1);\n    drawBottles(context, [bottle2, bottle3, bottle1], -1, 14);\n    drawBottles(context, [bottle4], -1, 28);\n\n    context.resetTransform();\n}\n\n", "import { getHero } from \"../game/hero\";\nimport { createMob, MobData, mobs, mobsConfigs, setAttackers } from \"../game/mob\";\nimport { Box2 } from \"../utils/geom\";\nimport { lerp, mathMax, mathMin, mathRound, numberMax, randomRange, randomSelect } from \"../utils/math\";\nimport { gameWidth } from \"./graphics\";\nimport { getStage } from \"./stage\";\n\nexport interface WaveMob {\n    config_: number,\n    count_: number,\n    health_: number,\n    walkSpeed_: number,\n    reaction_: {\n        min_: number,\n        max_: number\n    },\n}\n\nexport interface Wave {\n    mobs_: Array<WaveMob>,\n    attackers_: number,\n}\n\nlet waves: Array<Wave> = [];\n\nexport const initWaves = () => {\n    waves = [];\n\n    const reactionStart = 2;\n    const reactionEnd = 0.5;\n\n    const countStart = 3;\n    const countEnd = 10;\n\n    const healthStart = 100;\n    const healthEnd = 300;\n\n    const walkSpeedStart = 30;\n    const walkSpeedEnd = 40;\n\n    const attackersStart = 1;\n    const attackersEnd = 5;\n\n    const wavesCount = 12;\n\n    for (let i = 0; i < wavesCount; i++) {\n        const value = i / (wavesCount - 1);\n\n        const reaction = lerp(reactionStart, reactionEnd, value);\n        const count = mathRound(lerp(countStart, countEnd, value));\n        const health = lerp(healthStart, healthEnd, value);\n        const walkSpeed = lerp(walkSpeedStart, walkSpeedEnd, value);\n        const attackers = mathRound(lerp(attackersStart, attackersEnd, value));\n\n        waves.push(\n            {\n                attackers_: attackers,\n                mobs_: [\n                    {\n                        reaction_: { min_: reaction, max_: reaction * 1.2 },\n                        count_: count,\n                        config_: -1,\n                        health_: health,\n                        walkSpeed_: walkSpeed,\n                    }\n                ],\n            }\n        )\n    }\n\n    waves.push(\n        {\n            attackers_: attackersEnd,\n            mobs_: [\n                {\n                    reaction_: { min_: 0.1, max_: 0.2 },\n                    count_: 3,\n                    config_: 1, // bodyguard\n                    health_: healthEnd,\n                    walkSpeed_: walkSpeedEnd,\n                },\n                {\n                    reaction_: { min_: 0.05, max_: 0.1 },\n                    count_: 1,\n                    config_: 0, // boss\n                    health_: 1000,\n                    walkSpeed_: walkSpeedEnd,\n                }\n            ],\n        }\n    )\n}\n\nexport const getZones = (): Array<Box2> => {\n    const top = 32;\n    const bottom = 64;\n\n    const zones: Array<Box2> = [];\n\n    const stage = getStage();\n\n    const leftMin = mathMax(stage.bounds_.x, stage.camera_.x - 30);\n    const leftMax = stage.camera_.x;\n\n    const left: Box2 = {\n        x: leftMin,\n        y: stage.bounds_.y + top,\n        w: leftMax - leftMin,\n        h: stage.bounds_.h - top - bottom,\n    }\n\n    if (left.w > 0) {\n        zones.push(left);\n    }\n\n    const rightMin = stage.camera_.x + gameWidth;\n    const rightMax = mathMin(stage.bounds_.x + stage.bounds_.w, stage.camera_.x + gameWidth + 30);\n\n    const right: Box2 = {\n        x: rightMin,\n        y: stage.bounds_.y + top,\n        w: rightMax - rightMin,\n        h: stage.bounds_.h - top - bottom,\n    }\n\n    if (right.w > 0) {\n        zones.push(right);\n    }\n\n    return zones;\n};\n\nexport const generateMobs = () => {\n    const zones = getZones();\n\n    if (!zones.length) {\n        return;\n    }\n\n    if (!mobs.length) {\n        if (waves.length) {\n            const usualMobsConfigs = [...mobsConfigs];\n            usualMobsConfigs.shift();\n            usualMobsConfigs.shift();\n\n            const wave = waves.shift()!;\n\n            setAttackers(wave.attackers_);\n\n            for (const waveMob of wave.mobs_) {\n                for (let i = 0; i < waveMob.count_; i++) {\n                    const config = waveMob.config_ == -1 ? randomSelect(usualMobsConfigs) : mobsConfigs[waveMob.config_];\n                    config.health_ = waveMob.health_;\n                    config.walkSpeed_ = waveMob.walkSpeed_;\n\n                    const mob = createMob(config);\n                    const mobData = mob.custom_ as MobData;\n                    mobData.reaction_ = waveMob.reaction_;\n\n                    const zone = randomSelect(zones);\n\n                    mob.position_.x = zone.x + randomRange(0, zone.w);\n                    mob.position_.y = zone.y + randomRange(0, zone.h);\n                }\n            }\n        } else {\n            // win!\n        }\n    }\n}", "import { clearEntities } from \"../engine/entity\";\nimport { getStage, setStage } from \"../engine/stage\"\nimport { clearUnits } from \"../engine/unit\";\nimport { createHero, getHero } from \"./hero\";\nimport { getBarStage } from \"./bar\"\nimport { initWaves } from \"../engine/waves\";\n\nexport const start = () => {\n    clearUnits();\n    clearEntities();\n    initWaves();\n\n    setStage(getBarStage());\n\n    createHero();\n\n    const stage = getStage();\n\n    const hero = getHero();\n    hero.position_.x = stage.bounds_.x + 50;\n    hero.position_.y = stage.bounds_.y + stage.bounds_.h / 2;\n}", "import { gameHeight, gameWidth } from \"../engine/graphics\";\nimport { getStage } from \"../engine/stage\";\nimport { getHero } from \"./hero\";\n\nexport const updateCameraPosition = () => {\n    const stage = getStage();\n    const hero = getHero();\n\n    stage.camera_.x = hero.position_.x - gameWidth / 2;\n    stage.camera_.y = hero.position_.y - gameHeight / 2;\n}", "import { Box2, Vector2 } from \"../utils/geom\";\nimport { mathMin } from \"../utils/math\";\nimport { Entity } from \"./entity\";\nimport { Sprite } from \"./sprite\";\nimport { getStage } from \"./stage\";\nimport { units } from \"./unit\";\n\nexport interface Item extends Entity {\n    offset_: Vector2,\n    bounds_: Box2,\n    shadow_?: Sprite,\n}\n\nexport const collisionItems = () => {\n    const stage = getStage();\n\n    for (const unit of units) {\n        for (const item of stage.items_) {\n            let minX = item.position_.x + item.bounds_.x;\n            let minY = item.position_.y + item.bounds_.y;\n\n            let maxX = minX + item.bounds_.w;\n            let maxY = minY + item.bounds_.h;\n\n            const left = unit.position_.x - minX;\n            const top = unit.position_.y - minY;\n            const right = maxX - unit.position_.x;\n            const bottom = maxY - unit.position_.y;\n\n            if (left > 0 && top > 0 && right > 0 && bottom > 0) {\n                const min = mathMin(left, top, right, bottom);\n\n                if (left == min) {\n                    unit.position_.x -= left;\n                }\n\n                if (top == min) {\n                    unit.position_.y -= top;\n                }\n\n                if (right == min) {\n                    unit.position_.x += right;\n                }\n\n                if (bottom == min) {\n                    unit.position_.y += bottom;\n                }\n            }\n        }\n    }\n}", "import { isKeyPressed, Key } from \"../../engine/input\"\nimport { limit } from \"../../utils/math\";\nimport { effectGainNode, musicGainNode } from \"./audio\"\n\nexport const controlAudio = () => {\n    const step = 0.01;\n\n    if (isKeyPressed(Key.U)) {\n        musicGainNode.gain.value -= step;\n    }\n\n    if (isKeyPressed(Key.I)) {\n        musicGainNode.gain.value += step;\n    }\n\n    musicGainNode.gain.value = limit(0, 1, musicGainNode.gain.value);\n\n    if (isKeyPressed(Key.J)) {\n        effectGainNode.gain.value -= step;\n    }\n\n    if (isKeyPressed(Key.K)) {\n        effectGainNode.gain.value += step;\n    }\n\n    effectGainNode.gain.value = limit(0, 1, effectGainNode.gain.value);\n}\n", "import { DEBUG } from \"./debug\";\nimport { initInput } from \"./engine/input\";\nimport { applyUnitsDamage, limitUnitsPositions, updateUnits, updateUnitsSpritePositions } from \"./engine/unit\";\nimport { updateHero } from \"./game/hero\";\nimport { draw, updateSize } from \"./engine/graphics\";\nimport { loadResources } from \"./resources/loader\";\nimport { playMusic } from \"./resources/sound/audio\";\nimport { calculateTime } from \"./utils/time\";\nimport { start } from \"./game/start\";\nimport { updateCameraPosition } from \"./game/game\";\nimport { limitCamera } from \"./engine/stage\";\nimport { generateMobsConfigs, updateMobs } from \"./game/mob\";\nimport { updateEffects } from \"./engine/effect\";\nimport { collisionItems } from \"./engine/item\";\nimport { controlAudio } from \"./resources/sound/control\";\nimport { generateMobs } from \"./engine/waves\";\nimport { updateJoystick } from \"./engine/joystick\";\n\nif (DEBUG) {\n    console.warn(\"debug mode\");\n    new EventSource('/esbuild').addEventListener('change', () => location.reload())\n}\n\nconst update = () => {\n    calculateTime();\n    updateSize();\n\n    updateJoystick();\n    generateMobs();\n    updateHero();\n    updateMobs();\n    updateUnits();\n    collisionItems();\n    applyUnitsDamage();\n    limitUnitsPositions();\n    updateEffects();\n\n    updateCameraPosition();\n    limitCamera();\n    updateUnitsSpritePositions();\n\n    draw();\n\n    controlAudio();\n\n    requestAnimationFrame(update);\n};\n\nasync function main() {\n    await loadResources();\n    playMusic();\n    initInput();\n    generateMobsConfigs();\n    start();\n    update();\n}\n\nmain();"],
  "mappings": "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EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,EAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAA,EAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,EAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,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",
  "names": ["math", "mathFloor", "mathCeil", "mathRound", "mathMin", "mathMax", "mathHypot", "mathAbs", "mathRandom", "mathAtan2", "mathCos", "mathSin", "mathPI", "mathPI2", "numberMax", "limit", "min", "max", "value", "lerp", "randomRange", "chance", "randomSelect", "values", "randomChancesSelect", "chances", "total", "p", "c", "i", "domDocument", "hasTouch", "canvasName", "getContext", "canvas", "createCanvas", "domDocument", "createContext", "getCanvas", "context", "setWidth", "context", "width", "getCanvas", "setHeight", "height", "drawImage", "context", "image", "x", "y", "mathRound", "now", "cloneObject", "source", "timeout", "time", "resolve", "formatColor", "c", "a", "r", "g", "b", "createGradient", "context", "x0", "y0", "x1", "y1", "startColor", "endColor", "gradient", "generateRandomTileImage", "width", "height", "ids", "chances", "canvas", "createCanvas", "context", "getContext", "image", "images", "sx", "mathCeil", "sy", "x", "y", "randomChancesSelect", "generateTileImage", "imageId", "drawCommands", "commands", "i", "id", "drawImage", "drawGradientV", "startColor", "endColor", "createGradient", "filterImage", "canvas", "filter", "context", "getContext", "width", "height", "imageData", "pixels", "i", "pixel", "cloneCanvas", "source", "target", "createCanvas", "applyPallette", "canvas", "sourcePallette", "targetPallette", "filterImage", "pixel", "sourceColor", "pixelToColor", "index", "targetColor", "colorToPixel", "u32", "r", "g", "b", "a", "color", "noise", "offset", "context", "getContext", "offset2", "imageData", "data", "i", "mathRandom", "images", "coloredImages", "noisedImages", "addImage", "image", "id", "getColoredImage", "color", "key", "a", "g", "b", "coloredImage", "cloneCanvas", "filterImage", "addNoiseToImage", "source", "noise", "background_default", "zzfx", "zzfxP", "zzfxG", "e", "zzfxX", "f", "zzfxR", "d", "i", "q", "k", "c", "t", "u", "r", "F", "v", "z", "w", "A", "l", "B", "x", "G", "y", "m", "C", "b", "H", "I", "D", "Z", "g", "E", "a", "n", "J", "K", "p", "h", "zzfxV", "zzfxM", "instruments", "patterns", "sequence", "BPM", "instrumentParameters", "j", "note", "sample", "patternChannel", "notFirstBeat", "stop", "instrument", "pitch", "attenuation", "outSampleOffset", "isSequenceEnd", "sampleOffset", "nextSampleOffset", "sampleBuffer", "leftChannelBuffer", "rightChannelBuffer", "channelIndex", "panning", "hasMore", "sampleCache", "beatLength", "patternIndex", "sequenceIndex", "musicGainNode", "zzfxX", "effectGainNode", "effextHit", "effextKick", "unlockAudio", "force", "zzfxX", "playMusic", "buffer", "renderSong", "background_default", "node", "zzfxP", "musicGainNode", "song", "timeout", "zzfxM", "playEffect", "effect", "zzfx", "effectGainNode", "playHit", "playEffect", "effextHit", "playKick", "effextKick", "Vector2", "normalize_", "a", "l", "length_", "mathHypot", "distance_", "b", "add_", "subtract_", "scale_", "s", "nowMS", "now", "deltaS", "calculateTime", "oldMS", "animationDuration", "animation", "time", "frame", "time_", "getFrameImage", "animationTime", "duratuion", "i", "image_", "isAnimationFinished", "effects", "hitEffect", "animation_", "image_", "time_", "offset_", "hitMiniEffect", "hitRedEffect", "removeEffect", "effect", "index", "addEffect", "config", "position", "animationTime_", "sprite_", "updateEffects", "duration", "animationDuration", "deltaS", "getFrameImage", "entities", "removeEntity", "entity", "index", "clearEntities", "stage", "getStage", "setStage", "value", "item", "items_", "sprite_", "position_", "offset_", "shadow_", "scaleY_", "entities", "limitCamera", "back", "images", "back_", "image_", "camera_", "gameWidth", "gameHeight", "units", "addUnit", "config", "unit", "config_", "state_", "controller_", "move_", "attack_", "health_", "direction_", "position_", "speed_", "animationTime_", "sprite_", "image_", "shadow_", "damage_", "frame_", "custom_", "entities", "removeUnit", "index", "removeEntity", "clearUnits", "limitUnitsPositions", "stage", "getStage", "limit", "bounds_", "updateUnits", "updateUnit", "currentAnimation", "animations", "animations_", "stand_", "checkAttack", "mathAbs", "walkH_", "walkV_", "Vector2", "normalize_", "walkSpeed_", "deltaS", "animation_", "jab_", "isAnimationFinished", "damage1_", "dead1_", "animationDuration", "getFrameImage", "flipX_", "getColoredImage", "damages_", "applyUnitsDamage", "current", "opponent", "opponentDistanceX", "numberMax", "opponentDistanceY", "knockdown_", "mob_", "directionX", "distanceX", "distanceY", "effect", "playKick", "hitEffect", "playHit", "chance", "hitRedEffect", "hitMiniEffect", "addEffect", "add_", "randomRange", "randomChancesSelect", "damage2_", "randomSelect", "dead2_", "updateUnitsSpritePositions", "updateUnitSpritePosition", "offset_", "scaleY_", "cross_", "kick_", "getChars", "chars", "font", "getIdByCharCode", "code", "drawSprite", "context", "sprite", "image_", "image", "images", "a", "b", "c", "d", "scaleY_", "tx", "mathRound", "ty", "flipX_", "flipY_", "drawImage", "drawSprites", "sprites", "joystick", "moveId_", "move_", "moveRadius_", "moveStickRadius_", "moveStick_", "attackId_", "attack_", "attackRadius_", "border", "delta", "updateJoystick", "hasTouch", "screenCanvas", "touchId", "touches", "touch", "started_", "Vector2", "distance_", "direction", "subtract_", "length_", "normalize_", "screenCanvas", "context", "getContext", "gameWidth", "gameHeight", "screenOffset", "screenScale", "updateSize", "screenWidth", "screenHeight", "mathMin", "mathMax", "mathFloor", "draw", "stage", "getStage", "mathRound", "camera_", "drawSprite", "back_", "unit", "units", "shadow_", "item", "items_", "entities", "a", "b", "position_", "entity", "sprite_", "effect", "effects", "drawDebug", "touchId", "touches", "touch", "formatColor", "joystick", "move_", "moveRadius_", "mathPI2", "moveId_", "moveStick_", "moveStickRadius_", "attack_", "attackRadius_", "attackId_", "frameTime", "now", "nowMS", "fps", "deltaS", "drawText", "musicVolume", "musicGainNode", "effectVolume", "effectGainNode", "x", "y", "text", "color", "i", "code", "id", "getIdByCharCode", "char", "getColoredImage", "image", "images", "drawImage", "touches", "keys", "anyKey", "initInput", "domDocument", "e", "unlockAudio", "unpressKey", "screenCanvas", "forTouch", "handler", "changedTouches", "i", "clientX", "clientY", "identifier", "screenScale", "started_", "id", "t", "isKeyPressed", "code", "config", "mob_", "health_", "walkSpeed_", "offset_", "animations_", "stand_", "image_", "time_", "walkH_", "walkV_", "jab_", "cross_", "kick_", "damage1_", "damage2_", "knockdown_", "dead1_", "dead2_", "sit_", "damages_", "hero", "createHero", "addUnit", "getHero", "updateHero", "controller_", "move_", "attack_", "isKeyPressed", "joystick", "moveId_", "direction", "Vector2", "subtract_", "moveStick_", "attackId_", "gain", "audioContext", "soundsBuffers", "hasTouch", "initSound", "audioContext", "loadResources", "buffer", "stream", "p", "palletteSize", "pallette", "imagesLength", "width", "height", "imageSize", "pixels", "context", "createContext", "setWidth", "setHeight", "imageData", "c", "images", "getCanvas", "soundsLength", "soundSize", "soundsBuffers", "minDistance", "fightDistanceX", "fightDistanceY", "safeDistanceX", "safeDistanceY", "attackers", "mobs", "pallette", "baseConfig", "mob_", "health_", "walkSpeed_", "offset_", "animations_", "stand_", "image_", "time_", "walkH_", "walkV_", "jab_", "cross_", "kick_", "damage1_", "damage2_", "knockdown_", "dead1_", "dead2_", "sit_", "damages_", "mobsConfigs", "randomMobConfig", "randomSelect", "generateMobsConfigs", "generateConfig", "hairs", "skins", "shirts", "pants", "shoes", "i", "hair", "face", "shirt", "pant", "shoe", "body", "hand0", "hand1", "hand2", "legs0", "legs1", "chance", "targetPallette", "newConfig", "cloneObject", "randomRange", "id", "animations", "name", "animation", "replaceImagesPallette", "image", "newImage", "getPalletteImage", "sourcePallette", "palletteId", "frame", "imagesPallete", "key", "target", "cloneCanvas", "images", "applyPallette", "addImage", "createMob", "config", "mob", "addUnit", "mobData", "reaction_", "min_", "max_", "reactionTimeout_", "reactionTime_", "attackActive_", "custom_", "removeMob", "mob", "index", "mobs", "removeAttacker", "attackers", "updateMobs", "hero", "getHero", "health_", "units", "controller_", "move_", "attack_", "mobData", "custom_", "attackActive_", "reactionTime_", "deltaS", "reactionTimeout_", "randomRange", "reaction_", "min_", "max_", "updateAttackersList", "animation_", "config_", "animations_", "knockdown_", "state_", "onFightDistance", "direction", "Vector2", "subtract_", "position_", "direction_", "limit", "walkToHero", "onSafeDistance", "normalize_", "mobsCollision", "i", "mob0", "j", "mob1", "distance", "length_", "minDistance", "scale", "attackersMax", "setAttackers", "count", "nearDistance", "numberMax", "nearMob", "distance_", "furtherUnit", "furtherDistance", "attacker", "onDistance", "fightDistanceX", "fightDistanceY", "safeDistanceX", "safeDistanceY", "dx", "dy", "mathAbs", "getBarStage", "floorCanvas", "generateFloorImage", "wallCanvas", "generateWallImage", "backCanvas", "createCanvas", "backContext", "getContext", "drawImage", "back", "addImage", "borderX", "borderY", "addNoiseToImage", "items", "i", "addBarCounter", "addBarStool", "addTableArmchair", "bounds_", "back_", "image_", "camera_", "items_", "x", "y", "sprite_", "position_", "offset_", "shadow_", "getColoredImage", "scaleY_", "chance", "config", "randomMobConfig", "offset", "mathRound", "randomRange", "animations_", "sit_", "width", "height", "image", "generateRandomTileImage", "context", "border", "drawGradientV", "noise", "generateTileImage", "columns", "columnsChances", "columnStep", "columnImage", "images", "randomChancesSelect", "drawCommands", "drawShelf", "drawBottles", "bottles", "randomSelect", "drawSprite", "drawSprites", "flipY_", "flipX_", "waves", "initWaves", "reactionStart", "reactionEnd", "countStart", "countEnd", "healthStart", "healthEnd", "walkSpeedStart", "walkSpeedEnd", "attackersStart", "attackersEnd", "wavesCount", "i", "value", "reaction", "lerp", "count", "mathRound", "health", "walkSpeed", "attackers", "attackers_", "mobs_", "reaction_", "min_", "max_", "count_", "config_", "health_", "walkSpeed_", "getZones", "zones", "stage", "getStage", "leftMin", "mathMax", "bounds_", "camera_", "leftMax", "left", "rightMin", "gameWidth", "rightMax", "mathMin", "right", "generateMobs", "mobs", "usualMobsConfigs", "mobsConfigs", "wave", "setAttackers", "waveMob", "config", "randomSelect", "mob", "createMob", "mobData", "custom_", "zone", "position_", "randomRange", "start", "clearUnits", "clearEntities", "initWaves", "setStage", "getBarStage", "createHero", "stage", "getStage", "hero", "getHero", "position_", "bounds_", "updateCameraPosition", "stage", "getStage", "hero", "getHero", "camera_", "position_", "gameWidth", "gameHeight", "collisionItems", "stage", "getStage", "unit", "units", "item", "items_", "minX", "position_", "bounds_", "minY", "maxX", "maxY", "left", "top", "right", "bottom", "min", "mathMin", "controlAudio", "isKeyPressed", "musicGainNode", "limit", "effectGainNode", "update", "calculateTime", "updateSize", "updateJoystick", "generateMobs", "updateHero", "updateMobs", "updateUnits", "collisionItems", "applyUnitsDamage", "limitUnitsPositions", "updateEffects", "updateCameraPosition", "limitCamera", "updateUnitsSpritePositions", "draw", "controlAudio", "main", "loadResources", "playMusic", "initInput", "generateMobsConfigs", "start"]
}

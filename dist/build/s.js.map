{
  "version": 3,
  "sources": ["../../src/utils/math.ts", "../../src/utils/browser.ts", "../../src/utils/time.ts", "../../src/engine/animation.ts", "../../src/engine/unit.ts", "../../src/resources/font.ts", "../../src/resources/images.ts", "../../src/graphics.ts", "../../src/resources/sound/zzfx.js", "../../src/resources/sound/audio.ts", "../../src/engine/input.ts", "../../src/game/hero.ts", "../../src/resources/sfxr.ts", "../../src/resources/sounds.ts", "../../src/resources/loader.ts", "../../src/resources/background.ts", "../../src/index.ts"],
  "sourcesContent": ["const math = Math;\n\nexport const mathFloor = math.floor;\nexport const mathRound = math.round;\nexport const mathMin = math.min;\nexport const mathMax = math.max;\nexport const mathHypot = math.hypot;\nexport const mathAbs = math.abs;\nexport const mathRandom = math.random;\nexport const mathAtan2 = math.atan2;\nexport const mathPI = math.PI;\nexport const mathPI2 = mathPI * 2;\n\nexport const limit = (min: number, max: number, value: number) => mathMin(max, mathMax(min, value));\nexport const lerp = (min: number, max: number, value: number) => min + value * (max - min);\nexport const randomRange = (min: number, max: number): number => lerp(min, max, mathRandom());\n\nexport function randomSelect<T>(values: T[]): T {\n    return values[mathRound(randomRange(0, values.length - 1))];\n}", "import { mathRound } from \"./math\";\n\nexport const domDocument = document;\nexport const hasTouch = 'ontouchstart' in window;\nexport const dpr = devicePixelRatio;\n\nconst canvasName = 'canvas';\n\nexport const getContext = (canvas: HTMLCanvasElement) => canvas.getContext('2d')!;\nexport const createCanvas = () => domDocument.createElement(canvasName);\nexport const createContext = () => getContext(createCanvas());\nexport const getCanvas = (context: CanvasRenderingContext2D) => context.canvas;\nexport const getWidth = (context: CanvasRenderingContext2D) => getCanvas(context).width;\nexport const getHeight = (context: CanvasRenderingContext2D) => getCanvas(context).height;\nexport const setWidth = (context: CanvasRenderingContext2D, width: number) => getCanvas(context).width = width;\nexport const setHeight = (context: CanvasRenderingContext2D, height: number) => getCanvas(context).height = height;\nexport const resetTransform = (context: CanvasRenderingContext2D) => context.resetTransform();\nexport const drawImage = (context: CanvasRenderingContext2D, image: HTMLCanvasElement, x: number, y: number) => context.drawImage(image, mathRound(x), mathRound(y));\nexport const clear = (context: CanvasRenderingContext2D) => { resetTransform(context); context.clearRect(0, 0, getWidth(context), getHeight(context)); }\n\nexport const now = () => performance.now();\n\nexport const cloneObject = (source: any): any => JSON.parse(JSON.stringify(source));\n\nexport async function timeout(time: number) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, time);\n    })\n}\n", "import { now } from \"./browser\";\n\nexport let nowMS: number = now();\nexport let deltaS: number = 0;\n\nexport const calculateTime = () => {\n    const oldMS = nowMS;\n    nowMS = now();\n    deltaS = (nowMS - oldMS) / 1000;\n}", "export interface AnimationFrame {\n    image: number,\n    time: number,\n}\n\nexport const animationDuration = (animation: Array<AnimationFrame>): number => {\n    let time = 0;\n\n    for (const frame of animation) {\n        time += frame.time;\n    }\n\n    return time;\n}\n\nexport const getFrameImage = (animation: Array<AnimationFrame>, animationTime: number): number => {\n    let time = 0;\n\n    const duratuion = animationDuration(animation);\n    animationTime %= duratuion;\n\n    for (let i = 0; i < animation.length; i++) {\n        const frame = animation[i];\n        time += frame.time;\n\n        if (animationTime <= time) {\n            return frame.image;\n        }\n    }\n\n    return 0;\n}\n\nexport const isAnimationFinished = (animation: Array<AnimationFrame>, animationTime: number): boolean => {\n    const duratuion = animationDuration(animation);\n    return animationTime >= duratuion;\n}\n", "import { deltaS } from \"../utils/time\";\nimport { animationDuration, AnimationFrame, getFrameImage, isAnimationFinished } from \"./animation\";\n\nexport const units: Array<Unit> = [];\n\nexport const enum UnitState {\n    Stand,\n    Walk,\n    Jab,\n    Cross,\n    Kick,\n}\n\nexport interface Unit {\n    config: UnitConfig,\n    state: UnitState,\n    controller: {\n        move: { x: number, y: number },\n        hand: boolean,\n        leg: boolean,\n    },\n    health: number,\n    position: { x: number, y: number },\n    animationTime: number,\n    image: number,\n}\n\nexport interface UnitConfig {\n    walkSpeed: number,\n    animations: {\n        stand: Array<AnimationFrame>,\n        walk: Array<AnimationFrame>,\n        jab: Array<AnimationFrame>,\n        cross: Array<AnimationFrame>,\n        kick: Array<AnimationFrame>,\n    }\n}\n\nexport const addUnit = (config: UnitConfig): Unit => {\n    let unit: Unit = {\n        config,\n        state: UnitState.Stand,\n        controller: {\n            move: {\n                x: 0,\n                y: 0\n            },\n            hand: false,\n            leg: false\n        },\n        health: 0,\n        position: {\n            x: 0,\n            y: 0\n        },\n        animationTime: 0,\n        image: 0\n    };\n\n    units.push(unit);\n\n    return unit;\n}\n\nexport const removeUnit = (unit: Unit) => {\n    const index = units.indexOf(unit);\n    if (index != -1) {\n        units.splice(index, 1);\n    }\n}\n\nexport const updateUnits = () => {\n    for (const unit of units.values()) {\n        let currentAnimation = null;\n\n        const config = unit.config;\n        const animations = config.animations;\n\n        switch (unit.state) {\n            case UnitState.Stand:\n                currentAnimation = animations.stand;\n                if (unit.controller.move.x != 0) {\n                    unit.state = UnitState.Walk;\n                    unit.animationTime = 0;\n                }\n\n                if (unit.controller.leg) {\n                    unit.state = UnitState.Kick;\n                    unit.animationTime = 0;\n                }\n                break;\n\n            case UnitState.Walk:\n                currentAnimation = animations.walk;\n                if (unit.controller.move.x == 0) {\n                    unit.state = UnitState.Stand;\n                    unit.animationTime = 0;\n                }\n                break;\n\n            case UnitState.Jab:\n                currentAnimation = animations.jab;\n                break;\n\n            case UnitState.Cross:\n                currentAnimation = animations.cross;\n                break;\n\n            case UnitState.Kick:\n                currentAnimation = animations.kick;\n\n                if (isAnimationFinished(currentAnimation, unit.animationTime)) {\n                    unit.state = UnitState.Stand;\n                    unit.animationTime = 0;\n                }\n                break;\n        }\n\n        unit.position.x += unit.controller.move.x * config.walkSpeed * deltaS;\n\n        if (currentAnimation) {\n            unit.animationTime += deltaS;\n            unit.image = getFrameImage(currentAnimation, unit.animationTime);\n        }\n    }\n}", "import { DEBUG } from \"../debug\";\nimport { font0, font1, font10, font11, font12, font13, font14, font15, font16, font17, font18, font19, font2, font20, font21, font22, font23, font24, font25, font26, font27, font28, font29, font3, font30, font31, font32, font33, font34, font35, font36, font37, font4, font5, font6, font7, font8, font9 } from \"./id\";\n\nconst getChars = (): number[] => {\n    const chars: number[] = [];\n\n    chars[33] = font36;\n    chars[35] = 0;\n    chars[46] = font37;\n    chars[47] = -1;\n\n    chars.push(\n        font0,\n        font1,\n        font2,\n        font3,\n        font4,\n        font5,\n        font6,\n        font7,\n        font8,\n        font9,\n    );\n\n    chars[64] = 0;\n\n    chars.push(\n        font10,\n        font11,\n        font12,\n        font13,\n        font14,\n        font15,\n        font16,\n        font17,\n        font18,\n        font19,\n        font20,\n        font21,\n        font22,\n        font23,\n        font24,\n        font25,\n        font26,\n        font27,\n        font28,\n        font29,\n        font30,\n        font31,\n        font32,\n        font33,\n        font34,\n        font35,\n    );\n\n    return chars;\n}\n\nconst font = getChars();\n\nexport const getIdByCharCode = (code: number): number | undefined => {\n    if (DEBUG) {\n        if (code != 32 && (font[code] === undefined || font[code] === -1)) {\n            throw `symbol not found ${code} char ${String.fromCharCode(code)}`;\n        }\n    }\n\n    return font[code];\n}", "export const images: HTMLCanvasElement[] = [];", "import { DEBUG } from \"./debug\";\nimport { units } from \"./engine/unit\";\nimport { getIdByCharCode } from \"./resources/font\";\nimport { images } from \"./resources/images\";\nimport { drawImage, getContext, now } from \"./utils/browser\";\nimport { mathFloor, mathMax, mathMin, mathRound } from \"./utils/math\";\nimport { deltaS, nowMS } from \"./utils/time\";\n\nexport const canvas = document.getElementById('c') as HTMLCanvasElement;\ncanvas.style.imageRendering = 'pixelated';\n\nconst context = getContext(canvas);\n\nexport const width = 200;\nexport const height = 200;\n\nconst offset = { x: 0, y: 0 };\n\nexport const updateSize = () => {\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n\n    const scale = mathMin(screenWidth / width, screenHeight / height);\n\n    canvas.width = mathMax(width, screenWidth / scale);\n    canvas.height = mathMax(height, screenHeight / scale);\n\n    canvas.style.width = `${screenWidth}px`;\n    canvas.style.height = `${screenHeight}px`;\n\n    offset.x = mathRound((canvas.width - width) / 2);\n    offset.y = mathRound((canvas.height - height) / 2);\n}\n\nexport const draw = () => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.setTransform(1, 0, 0, 1, offset.x, offset.y);\n\n    context.fillStyle = \"gray\";\n    context.fillRect(0, 0, width, height);\n\n    // let image = images[heroImage];\n    // drawImage(context, image, heroPosition.x, heroPosition.y);\n\n    for (const unit of units.values()) {\n        let image = images[unit.image];\n        drawImage(context, image, unit.position.x, unit.position.y);\n    }\n\n    drawFPS();\n\n    // drawText(\n    //     65, 50,\n    //     'BLACK KATE',\n    //     0xffffff\n    // );\n}\n\nconst drawFPS = () => {\n    if (DEBUG) {\n        const frameTime = (now() - nowMS).toFixed();\n        const fps = (1 / deltaS).toFixed();\n\n        drawText(\n            3, 3,\n            `FPS ${fps} TIME ${frameTime}`,\n            0xffffff\n        );\n    }\n}\n\nconst drawText = (x: number, y: number, text: string, color: number) => {\n    for (let i = 0; i < text.length; i++) {\n        const code = text[i].toUpperCase().charCodeAt(0);\n        const id = getIdByCharCode(code);\n        if (id !== undefined) {\n            // const char = getColoredImage(id, color);\n            let image = images[id];\n            if (image !== undefined) {\n                drawImage(context, image, x + i * 8, y);\n            }\n        }\n    }\n}", "// zzfx() - the universal entry point -- returns a AudioBufferSourceNode\nconst zzfx=(...t)=>zzfxP(zzfxG(...t))\n\n// zzfxP() - the sound player -- returns a AudioBufferSourceNode\nconst zzfxP=(...t)=>{let e=zzfxX.createBufferSource(),f=zzfxX.createBuffer(t.length,t[0].length,zzfxR);t.map((d,i)=>f.getChannelData(i).set(d)),e.buffer=f,e.connect(zzfxX.destination),e.start();return e}\n\n// zzfxG() - the sound generator -- returns an array of sample data\nconst zzfxG=(q=1,k=.05,c=220,e=0,t=0,u=.1,r=0,F=1,v=0,z=0,w=0,A=0,l=0,B=0,x=0,G=0,d=0,y=1,m=0,C=0)=>{let b=2*Math.PI,H=v*=500*b/zzfxR**2,I=(0<x?1:-1)*b/4,D=c*=(1+2*k*Math.random()-k)*b/zzfxR,Z=[],g=0,E=0,a=0,n=1,J=0,K=0,f=0,p,h;e=99+zzfxR*e;m*=zzfxR;t*=zzfxR;u*=zzfxR;d*=zzfxR;z*=500*b/zzfxR**3;x*=b/zzfxR;w*=b/zzfxR;A*=zzfxR;l=zzfxR*l|0;for(h=e+m+t+u+d|0;a<h;Z[a++]=f)++K%(100*G|0)||(f=r?1<r?2<r?3<r?Math.sin((g%b)**3):Math.max(Math.min(Math.tan(g),1),-1):1-(2*g/b%2+2)%2:1-4*Math.abs(Math.round(g/b)-g/b):Math.sin(g),f=(l?1-C+C*Math.sin(2*Math.PI*a/l):1)*(0<f?1:-1)*Math.abs(f)**F*q*zzfxV*(a<e?a/e:a<e+m?1-(a-e)/m*(1-y):a<e+m+t?y:a<h-d?(h-a-d)/u*y:0),f=d?f/2+(d>a?0:(a<h-d?1:(h-a)/d)*Z[a-d|0]/2):f),p=(c+=v+=z)*Math.sin(E*x-I),g+=p-p*B*(1-1E9*(Math.sin(a)+1)%2),E+=p-p*B*(1-1E9*(Math.sin(a)**2+1)%2),n&&++n>A&&(c+=w,D+=w,n=0),!l||++J%l||(c=D,v=H,n=n||1);return Z}\n\n// zzfxV - global volume\nconst zzfxV=.3\n\n// zzfxR - global sample rate\nconst zzfxR=44100\n\n// zzfxX - the common audio context\nconst zzfxX=new(window.AudioContext||webkitAudioContext);\n\n//! ZzFXM (v2.0.3) | (C) Keith Clark | MIT | https://github.com/keithclark/ZzFXM\nconst zzfxM=(n,f,t,e=125)=>{let l,o,z,r,g,h,x,a,u,c,d,i,m,p,G,M=0,R=[],b=[],j=[],k=0,q=0,s=1,v={},w=zzfxR/e*60>>2;for(;s;k++)R=[s=a=d=m=0],t.map((e,d)=>{for(x=f[e][k]||[0,0,0],s|=!!f[e][k],G=m+(f[e][0].length-2-!a)*w,p=d==t.length-1,o=2,r=m;o<x.length+p;a=++o){for(g=x[o],u=o==x.length+p-1&&p||c!=(x[0]||0)|g|0,z=0;z<w&&a;z++>w-99&&u?i+=(i<1)/99:0)h=(1-i)*R[M++]/2||0,b[r]=(b[r]||0)-h*q+h,j[r]=(j[r++]||0)+h*q+h;g&&(i=g%1,q=x[1]||0,(g|=0)&&(R=v[[c=x[M=0]||0,g]]=v[[c,g]]||(l=[...n[c]],l[2]*=2**((g-12)/12),g>0?zzfxG(...l):[])))}m=G});return[b,j]}\n\nexport { zzfx, zzfxG, zzfxP, zzfxR, zzfxV, zzfxX, zzfxM }", "import { timeout } from \"../../utils/browser\";\nimport { zzfxX as audioContext, zzfxM, zzfxP, zzfxX } from \"./zzfx\";\n\nconst unlockAudio = (force = false) => {\n  if (force || audioContext.state === \"suspended\") {\n    audioContext.resume().catch();\n  }\n};\n\nconst playMusic = async (source: any) => {\n  const buffer = await renderSong(source),\n    node = zzfxP(...buffer);\n  node.loop = true;\n  zzfxX.resume();\n};\n\nconst renderSong = async (song: any): Promise<any[][]> => {\n  await timeout(50);\n  return zzfxM(...song);\n};\n\nexport { audioContext, unlockAudio, playMusic };\n", "import { canvas } from \"../graphics\";\nimport { unlockAudio } from \"../resources/sound/audio\";\nimport { domDocument } from \"../utils/browser\";\n\nconst keys: { [key: string]: boolean } = {};\nexport let anyKey = false;\n\nexport const initInput = () => {\n    domDocument.onkeydown = (e) => {\n        unlockAudio();\n        anyKey = true;\n        keys[e.keyCode] = true;\n        e.preventDefault();\n    }\n\n    domDocument.onkeyup = (e) => {\n        anyKey = false;\n        unpressKey(e.keyCode);\n        e.preventDefault();\n    }\n\n    canvas.onmousedown = () => {\n        unlockAudio();\n    }\n\n    canvas.ontouchstart = () => {\n        unlockAudio();\n    }\n}\n\nexport const enum Key {\n    Up = 38,\n    Down = 40,\n    Left = 37,\n    Right = 39,\n    A = 65,\n    D = 68,\n    W = 87,\n    S = 83,\n    Enter = 13,\n    Space = 32,\n}\n\nexport const isKeyPressed = (code: Key): boolean | undefined => keys[code];\nexport const unpressKey = (code: Key) => delete keys[code];", "import { isKeyPressed, Key } from \"../engine/input\";\nimport { addUnit, UnitConfig, units, UnitState } from \"../engine/unit\";\nimport { kate0, kate1, kate2, kate3, kate4, kate5, kate6, kate7 } from \"../resources/id\";\nimport { mathFloor } from \"../utils/math\";\nimport { deltaS } from \"../utils/time\";\n\nconst config: UnitConfig = {\n    walkSpeed: 30,\n    animations: {\n        stand: [\n            { image: kate0, time: 0.2 },\n            { image: kate1, time: 0.2 },\n            { image: kate2, time: 0.2 },\n            { image: kate1, time: 0.2 },\n            { image: kate0, time: 0.2 },\n            { image: kate3, time: 0.2 },\n        ],\n        walk: [\n            { image: kate0, time: 0.1 },\n            { image: kate4, time: 0.1 },\n            { image: kate5, time: 0.1 },\n            { image: kate4, time: 0.1 },\n        ],\n        jab: [\n            // { image: kate0, time: defaultTime },\n            // { image: kate3, time: defaultTime },\n        ],\n        cross: [\n            // { image: kate0, time: defaultTime },\n            // { image: kate4, time: defaultTime },\n            // { image: kate5, time: defaultTime },\n        ],\n        kick: [\n            { image: kate0, time: 0.1 },\n            { image: kate6, time: 0.1 },\n            { image: kate7, time: 0.1 },\n            { image: kate6, time: 0.1 },\n        ]\n    }\n};\n\nexport const hero = addUnit(config);\nhero.position.y = 100;\nhero.position.x = 100;\n\nexport const updateHero = () => {\n    hero.controller.move.x = 0;\n    hero.controller.leg = false;\n\n    if (isKeyPressed(Key.Left) || isKeyPressed(Key.A)) {\n        hero.controller.move.x = -1;\n    }\n\n    if (isKeyPressed(Key.Right) || isKeyPressed(Key.D)) {\n        hero.controller.move.x = 1;\n    }\n\n    if (isKeyPressed(Key.Up)) {\n        hero.controller.leg = true;\n    }\n}", "// Wave shapes\n\nconst SQUARE = 0;\nconst SAWTOOTH = 1;\nconst SINE = 2;\nconst NOISE = 3;\n\nconst p_wave = 0;\nconst p_env_attack = 1;\nconst p_env_sustain = 2;\nconst p_env_punch = 3;\nconst p_env_decay = 4\nconst p_base_freq = 5\nconst p_freq_limit = 6\nconst p_freq_ramp = 7\nconst p_freq_dramp = 8\nconst p_vib_strength = 9\nconst p_vib_speed = 10\nconst p_arp_mod = 11\nconst p_arp_speed = 12\nconst p_duty = 13\nconst p_duty_ramp = 14\nconst p_repeat_speed = 15\nconst p_pha_offset = 16\nconst p_pha_ramp = 17\nconst p_lpf_freq = 18\nconst p_lpf_ramp = 19\nconst p_lpf_resonance = 20\nconst p_hpf_freq = 21\nconst p_hpf_ramp = 22\n\n// render volume\nconst masterVolume = 1;\nconst OVERSAMPLING = 8;\n// default sample parameters\nconst base_sound_vol = 0.5;\nconst gain = masterVolume * (Math.exp(base_sound_vol) - 1);\n\n// Sound generation parameters are on [0,1] unless noted SIGNED & thus\n// on [-1,1]\nfunction render(ps: Float32Array): Float32Array {\n\tlet elapsedSinceRepeat = 0;\n\n\tconst period0 = ps[p_base_freq];\n\tconst periodMax = Math.abs(ps[p_freq_limit]);\n\tconst enableFrequencyCutoff = ps[p_freq_limit] > 0;\n\tconst periodMult0 = ps[p_freq_ramp];\n\tconst periodMultSlide = ps[p_freq_dramp];\n\tconst dutyCycle0 = ps[p_duty];\n\tconst dutyCycleSlide0 = ps[p_duty_ramp];\n\tconst arpeggioMultiplier = ps[p_arp_mod];\n\tconst arpeggioTime0 = ps[p_arp_speed];\n\n\t// init repeat\n\tlet period = period0;\n\tlet periodMult = periodMult0;\n\tlet dutyCycle = dutyCycle0;\n\tlet dutyCycleSlide = dutyCycleSlide0;\n\tlet arpeggioTime = arpeggioTime0;\n\n\t// Waveform shape\n\tconst waveShape = ps[p_wave];\n\n\t// Filter\n\tlet fltw = ps[p_lpf_freq];\n\tconst enableLowPassFilter = (fltw !== 0.1);\n\tconst fltw_d = ps[p_lpf_ramp];\n\tconst fltdmp = ps[p_lpf_resonance];\n\tlet flthp = ps[p_hpf_freq];\n\tconst flthp_d = ps[p_hpf_ramp];\n\n\t// Vibrato\n\tconst vibratoSpeed = ps[p_vib_speed];\n\tconst vibratoAmplitude = ps[p_vib_strength];\n\n\t// Envelope\n\tconst envelopeLength = [\n\t\tps[p_env_attack],\n\t\tps[p_env_sustain],\n\t\tps[p_env_decay],\n\t];\n\tconst envelopePunch = ps[p_env_punch];\n\n\t// Flanger\n\tlet flangerOffset = ps[p_pha_offset];\n\tconst flangerOffsetSlide = ps[p_pha_ramp];\n\n\t// Repeat\n\tconst repeatTime = ps[p_repeat_speed];\n\n\t////////// RENDER\n\tlet fltp = 0;\n\tlet fltdp = 0;\n\tlet fltphp = 0;\n\n\tlet noise_buffer = new Float32Array(32);\n\tfor (let i = 0; i < 32; ++i) {\n\t\tnoise_buffer[i] = Math.random() * 2 - 1;\n\t}\n\n\tlet envelopeStage = 0;\n\tlet envelopeElapsed = 0;\n\n\tlet vibratoPhase = 0;\n\n\tlet phase = 0;\n\tlet ipp = 0;\n\tlet flanger_buffer = new Float32Array(1024);\n\tfor (let i = 0; i < 1024; ++i) {\n\t\tflanger_buffer[i] = 0;\n\t}\n\n\tlet normalized: number[] = [];\n\n\tfor (let t = 0; ; ++t) {\n\n\t\t// Repeats\n\t\tif (repeatTime !== 0 && ++elapsedSinceRepeat >= repeatTime) {\n\t\t\t// INIT REPEAT\n\t\t\tperiod = period0;\n\t\t\tperiodMult = periodMult0;\n\t\t\tdutyCycle = dutyCycle0;\n\t\t\tdutyCycleSlide = dutyCycleSlide0;\n\t\t\tarpeggioTime = arpeggioTime0;\n\t\t}\n\n\t\t// Arpeggio (single)\n\t\tif (arpeggioTime !== 0 && t >= arpeggioTime) {\n\t\t\tarpeggioTime = 0;\n\t\t\tperiod *= arpeggioMultiplier;\n\t\t}\n\n\t\t// Frequency slide, and frequency slide slide!\n\t\tperiodMult += periodMultSlide;\n\t\tperiod *= periodMult;\n\t\tif (period > periodMax) {\n\t\t\tperiod = periodMax;\n\t\t\tif (enableFrequencyCutoff) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Vibrato\n\t\tlet rfperiod = period;\n\t\tif (vibratoAmplitude > 0) {\n\t\t\tvibratoPhase += vibratoSpeed;\n\t\t\trfperiod = period * (1 + Math.sin(vibratoPhase) * vibratoAmplitude);\n\t\t}\n\t\tlet iperiod = Math.floor(rfperiod);\n\t\tif (iperiod < OVERSAMPLING) {\n\t\t\tiperiod = OVERSAMPLING;\n\t\t}\n\n\t\t// Square wave duty cycle\n\t\tdutyCycle += dutyCycleSlide;\n\t\tif (dutyCycle < 0) {\n\t\t\tdutyCycle = 0;\n\t\t}\n\t\tif (dutyCycle > 0.5) {\n\t\t\tdutyCycle = 0.5;\n\t\t}\n\n\t\t// Volume envelope\n\t\tif (++envelopeElapsed > envelopeLength[envelopeStage]) {\n\t\t\tenvelopeElapsed = 0;\n\t\t\tif (++envelopeStage > 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst envf = envelopeElapsed / envelopeLength[envelopeStage];\n\t\tlet env_vol;\n\t\tif (envelopeStage === 0) {         // Attack\n\t\t\tenv_vol = envf;\n\t\t} else if (envelopeStage === 1) {  // Sustain\n\t\t\tenv_vol = 1 + (1 - envf) * 2 * envelopePunch;\n\t\t} else {                           // Decay\n\t\t\tenv_vol = 1 - envf;\n\t\t}\n\n\t\t// Flanger step\n\t\tflangerOffset += flangerOffsetSlide;\n\t\tlet iphase = Math.abs(Math.floor(flangerOffset));\n\t\tif (iphase > 1023) {\n\t\t\tiphase = 1023;\n\t\t}\n\n\t\tif (flthp_d !== 0) {\n\t\t\tflthp *= flthp_d;\n\t\t\tif (flthp < 0.00001) {\n\t\t\t\tflthp = 0.00001;\n\t\t\t}\n\t\t\tif (flthp > 0.1) {\n\t\t\t\tflthp = 0.1;\n\t\t\t}\n\t\t}\n\n\t\t// 8x oversampling\n\t\tlet sample = 0;\n\t\tfor (let si = 0; si < OVERSAMPLING; ++si) {\n\t\t\tlet sub_sample = 0;\n\t\t\t++phase;\n\t\t\tif (phase >= iperiod) {\n\t\t\t\tphase %= iperiod;\n\t\t\t\tif (waveShape === NOISE) {\n\t\t\t\t\tfor (let i = 0; i < 32; ++i) {\n\t\t\t\t\t\tnoise_buffer[i] = Math.random() * 2 - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Base waveform\n\t\t\tconst fp = phase / iperiod;\n\t\t\tif (waveShape === SQUARE) {\n\t\t\t\tsub_sample = fp < dutyCycle ? 0.5 : -0.5;\n\t\t\t} else if (waveShape === SAWTOOTH) {\n\t\t\t\tif (fp < dutyCycle) {\n\t\t\t\t\tsub_sample = -1 + 2 * fp / dutyCycle;\n\t\t\t\t} else {\n\t\t\t\t\tsub_sample = 1 - 2 * (fp - dutyCycle) / (1 - dutyCycle);\n\t\t\t\t}\n\t\t\t} else if (waveShape === SINE) {\n\t\t\t\tsub_sample = Math.sin(fp * 2 * Math.PI);\n\t\t\t} else if (waveShape === NOISE) {\n\t\t\t\tsub_sample = noise_buffer[(phase * 32 / iperiod) | 0];\n\t\t\t} else {\n\t\t\t\t// no-op; invalid wave shape\n\t\t\t}\n\n\t\t\t// Low-pass filter\n\t\t\tconst pp = fltp;\n\t\t\tfltw *= fltw_d;\n\t\t\tif (fltw < 0) {\n\t\t\t\tfltw = 0;\n\t\t\t}\n\t\t\tif (fltw > 0.1) {\n\t\t\t\tfltw = 0.1;\n\t\t\t}\n\t\t\tif (enableLowPassFilter) {\n\t\t\t\tfltdp += (sub_sample - fltp) * fltw;\n\t\t\t\tfltdp -= fltdp * fltdmp;\n\t\t\t} else {\n\t\t\t\tfltp = sub_sample;\n\t\t\t\tfltdp = 0;\n\t\t\t}\n\t\t\tfltp += fltdp;\n\n\t\t\t// High-pass filter\n\t\t\tfltphp += fltp - pp;\n\t\t\tfltphp -= fltphp * flthp;\n\t\t\tsub_sample = fltphp;\n\n\t\t\t// Flanger\n\t\t\tflanger_buffer[ipp & 1023] = sub_sample;\n\t\t\tsub_sample += flanger_buffer[(ipp - iphase + 1024) & 1023];\n\t\t\tipp = (ipp + 1) & 1023;\n\n\t\t\t// final accumulation and envelope application\n\t\t\tsample += sub_sample * env_vol;\n\t\t}\n\n\t\t// store normalized floating point sample\n\t\tnormalized.push(sample * gain / OVERSAMPLING);\n\t}\n\n\treturn new Float32Array(normalized);\n}\n\nexport function createAudioBuffer(audioContext: AudioContext, params: Float32Array): AudioBuffer {\n\tconst samples = render(params);\n\tconst audioBuffer = audioContext.createBuffer(1, samples.length, 44100);\n\taudioBuffer.copyToChannel(samples, 0, 0);\n\treturn audioBuffer;\n}", "import { DEBUG } from \"../debug\";\nimport { hasTouch } from \"../utils/browser\";\nimport { createAudioBuffer } from \"./sfxr\";\n\nlet audioContext: AudioContext | undefined = undefined;\n\nexport const soundsBuffers: ArrayBuffer[] = [];\nconst sounds: AudioBuffer[] = [];\n\nconst masterVolume = 0.05;\n\nif (!hasTouch) {\n    initSound();\n}\n\nexport function initSound() {\n    if (!audioContext) {\n        audioContext = new AudioContext();\n\n        if (DEBUG) {\n            console.log(\"sound inited\");\n        }\n    }\n}\n\nexport function playSound(id: number, volume: number = 1.0) {\n    if (audioContext) {\n        if (!sounds[id]) {\n            sounds[id] = createAudioBuffer(audioContext, new Float32Array(soundsBuffers[id]));\n        }\n\n        const source = audioContext.createBufferSource();\n        source.buffer = sounds[id];\n\n        const gainNode = audioContext.createGain();\n        gainNode.gain.value = masterVolume * volume;\n        source.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n\n        source.start();\n    }\n}", "import { createContext, getCanvas, setHeight, setWidth } from \"../utils/browser\";\nimport { images } from \"./images\";\nimport { soundsBuffers } from \"./sounds\";\n\nexport async function loadResources() {\n    const response = await fetch('r');\n    const buffer = await response.arrayBuffer();\n\n    const stream = new Uint8Array(buffer);\n\n    let p = 0;\n\n    const palletteSize = stream[p++] * 4;\n    const pallette = stream.slice(p, p + palletteSize);\n    p += palletteSize;\n\n    let imagesLength = stream[p++];\n\n    while (imagesLength--) {\n        const width = stream[p++];\n        const height = stream[p++];\n\n        const imageSize = width * height;\n\n        const pixels = stream.slice(p, p + imageSize);\n        p += imageSize;\n\n        let context = createContext();\n        setWidth(context, width);\n        setHeight(context, height);\n\n        let imageData = context.getImageData(0, 0, width, height);\n\n        for (let p = 0; p < pixels.length; p++) {\n            let c = pixels[p] << 2;\n\n            imageData.data.set(pallette.slice(c, c + 4), p << 2);\n        }\n\n        context.putImageData(imageData, 0, 0);\n\n        images.push(getCanvas(context));\n    }\n\n    let soundsLength = stream[p++];\n\n    while (soundsLength--) {\n        const soundSize = stream[p++];\n        soundsBuffers.push(buffer.slice(p, p + soundSize));\n        p += soundSize;\n    }\n}", "export default [[[.6,0,100,,,.2,1,.5,,-10,,,,3,,,,10],[.7,0,110,,,.2,2,.1,,,,,,,,,,,.1,.4],[1.3,0,300,,,0,4,3,,,300,,,1,,,,.3,.2],[,0,,,.13,.7,2,.2,,,,,.04,.3,,.02,1,,.3,.1],[3,0,60,,,,3,.2,,,,.5,,.6,1,.05],[,0],[,0]],[[[,-.1,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,],[2,.1,,,,,1,,,,,,,,1,,,,,,,,1,,,,,,,,1,,,1,,,,,1,,,,,,,,1,,,,,,,,1,,,,,,,,1,,1,1],[1,.1,1,,13,,1,,13,,1,,13,,1,,13,,1,,13,,1,,13,,1,,13,,1,,13,,4,,16,,4,,16,,4,,16,,4,,16,,4,,16,,4,,16,,3,,15,,3,,15,,],[3,.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,]],[[,-.1,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,1,,,,],[2,.1,1,,,,1,,,,,,,,1,,,,,,,,1,,,,,,,,1,,,1,,,,,1,,,,,,,,1,,,,,,,,1,,,,,,,,1,,1,1],[1,.1,1,,13,13,1,,13,13,1,,13,,1,,13,13,1,,13,13,1,,13,,1,,13,13,1,,13,13,4,,16,16,4,,16,16,4,,16,,4,,16,16,4,,16,16,4,,16,16,3,,15,15,3,,15,15],[3,.4,,,,,20,,,,,,23,,,,,,25,,,,,,27,,,,,,25,,,,27,,,,,,,,,,,,,,,,28,,27,,,,25,,,,27,,,,25,,]]],[1,0,1,0],,{\"title\":\"dbc_8bit\",\"authorUrl\":\"https://www.youtube.com/@dbcoll\",\"author\":\"DBColl\",\"instruments\":[\"BD\",\"Bass\",\"Snare\",\"Korg Filter\",\"Bass Drum\",\"Instrument 5\",\"Instrument 6\"],\"patterns\":[\"Pattern 0\",\"Pattern 1\"]}]", "import { DEBUG } from \"./debug\";\nimport { initInput } from \"./engine/input\";\nimport { updateUnits } from \"./engine/unit\";\nimport { updateHero } from \"./game/hero\";\nimport { draw, updateSize } from \"./graphics\";\nimport { loadResources } from \"./resources/loader\";\nimport { playMusic } from \"./resources/sound/audio\";\nimport { calculateTime } from \"./utils/time\";\nimport background from \"./resources/background\";\n\nif (DEBUG) {\n    console.warn(\"debug mode\");\n    new EventSource('/esbuild').addEventListener('change', () => location.reload())\n}\n\nconst update = () => {\n    calculateTime();\n    updateSize();\n\n    updateHero();\n    updateUnits();\n\n    draw();\n\n    requestAnimationFrame(update);\n};\n\nasync function main() {\n    await loadResources();\n    playMusic(background);\n    initInput();\n    update();\n}\n\nmain();"],
  "mappings": "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C,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,EAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAA,EAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,EAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAA,CAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,MAAQ,WAAW,UAAY,kCAAkC,OAAS,SAAS,YAAc,CAAC,KAAK,OAAO,QAAQ,cAAc,YAAY,eAAe,cAAc,EAAE,SAAW,CAAC,YAAY,WAAW,CAAC,CAAC,ECUhsC,GAKJ,IAAMC,GAAS,IAAK,CAChBC,GAAa,EACbC,GAAU,EAEVC,GAAU,EACVC,GAAW,EAEXC,GAAI,EAEJ,sBAAsBL,EAAM,CAChC,EAEA,eAAeM,IAAI,CACf,MAAMC,GAAa,EACnBC,GAAUC,EAAU,EACpBC,GAAS,EACTV,GAAM,CACV,CAEAM,GAAI",
  "names": ["math", "mathFloor", "mathRound", "mathMin", "mathMax", "mathHypot", "mathAbs", "mathRandom", "mathAtan2", "mathPI", "mathPI2", "domDocument", "hasTouch", "canvasName", "getContext", "canvas", "createCanvas", "domDocument", "createContext", "getCanvas", "context", "setWidth", "context", "width", "getCanvas", "setHeight", "height", "drawImage", "context", "image", "x", "y", "mathRound", "now", "timeout", "time", "resolve", "nowMS", "now", "deltaS", "calculateTime", "oldMS", "animationDuration", "animation", "time", "frame", "getFrameImage", "animationTime", "duratuion", "i", "isAnimationFinished", "units", "addUnit", "config", "unit", "updateUnits", "unit", "units", "currentAnimation", "config", "animations", "isAnimationFinished", "deltaS", "getFrameImage", "getChars", "chars", "font", "getIdByCharCode", "code", "images", "canvas", "context", "getContext", "width", "height", "offset", "updateSize", "screenWidth", "screenHeight", "scale", "mathMin", "mathMax", "mathRound", "draw", "unit", "units", "image", "images", "drawImage", "drawFPS", "frameTime", "now", "nowMS", "fps", "deltaS", "drawText", "x", "y", "text", "color", "i", "code", "id", "getIdByCharCode", "zzfxP", "zzfxX", "f", "zzfxR", "d", "i", "zzfxG", "q", "k", "c", "e", "t", "u", "r", "F", "v", "z", "w", "A", "l", "B", "x", "G", "y", "m", "C", "b", "H", "I", "D", "Z", "E", "n", "J", "K", "p", "h", "zzfxV", "zzfxM", "o", "g", "a", "M", "R", "j", "s", "unlockAudio", "force", "zzfxX", "playMusic", "source", "buffer", "renderSong", "node", "zzfxP", "song", "timeout", "zzfxM", "keys", "anyKey", "initInput", "domDocument", "e", "unlockAudio", "unpressKey", "canvas", "isKeyPressed", "code", "config", "hero", "addUnit", "updateHero", "isKeyPressed", "gain", "audioContext", "soundsBuffers", "hasTouch", "initSound", "audioContext", "loadResources", "buffer", "stream", "p", "palletteSize", "pallette", "imagesLength", "width", "height", "imageSize", "pixels", "context", "createContext", "setWidth", "setHeight", "imageData", "c", "images", "getCanvas", "soundsLength", "soundSize", "soundsBuffers", "background_default", "update", "calculateTime", "updateSize", "updateHero", "updateUnits", "draw", "main", "loadResources", "playMusic", "background_default", "initInput"]
}
